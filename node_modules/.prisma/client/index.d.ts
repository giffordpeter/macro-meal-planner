
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Meal
 * 
 */
export type Meal = $Result.DefaultSelection<Prisma.$MealPayload>
/**
 * Model Ingredient
 * 
 */
export type Ingredient = $Result.DefaultSelection<Prisma.$IngredientPayload>
/**
 * Model MealIngredient
 * 
 */
export type MealIngredient = $Result.DefaultSelection<Prisma.$MealIngredientPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model MealCategory
 * 
 */
export type MealCategory = $Result.DefaultSelection<Prisma.$MealCategoryPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model MealTag
 * 
 */
export type MealTag = $Result.DefaultSelection<Prisma.$MealTagPayload>
/**
 * Model FavoriteMeal
 * 
 */
export type FavoriteMeal = $Result.DefaultSelection<Prisma.$FavoriteMealPayload>
/**
 * Model Plan
 * 
 */
export type Plan = $Result.DefaultSelection<Prisma.$PlanPayload>
/**
 * Model PlanMeal
 * 
 */
export type PlanMeal = $Result.DefaultSelection<Prisma.$PlanMealPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model MacroHistory
 * 
 */
export type MacroHistory = $Result.DefaultSelection<Prisma.$MacroHistoryPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.meal`: Exposes CRUD operations for the **Meal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Meals
    * const meals = await prisma.meal.findMany()
    * ```
    */
  get meal(): Prisma.MealDelegate<ExtArgs>;

  /**
   * `prisma.ingredient`: Exposes CRUD operations for the **Ingredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingredients
    * const ingredients = await prisma.ingredient.findMany()
    * ```
    */
  get ingredient(): Prisma.IngredientDelegate<ExtArgs>;

  /**
   * `prisma.mealIngredient`: Exposes CRUD operations for the **MealIngredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MealIngredients
    * const mealIngredients = await prisma.mealIngredient.findMany()
    * ```
    */
  get mealIngredient(): Prisma.MealIngredientDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.mealCategory`: Exposes CRUD operations for the **MealCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MealCategories
    * const mealCategories = await prisma.mealCategory.findMany()
    * ```
    */
  get mealCategory(): Prisma.MealCategoryDelegate<ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs>;

  /**
   * `prisma.mealTag`: Exposes CRUD operations for the **MealTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MealTags
    * const mealTags = await prisma.mealTag.findMany()
    * ```
    */
  get mealTag(): Prisma.MealTagDelegate<ExtArgs>;

  /**
   * `prisma.favoriteMeal`: Exposes CRUD operations for the **FavoriteMeal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavoriteMeals
    * const favoriteMeals = await prisma.favoriteMeal.findMany()
    * ```
    */
  get favoriteMeal(): Prisma.FavoriteMealDelegate<ExtArgs>;

  /**
   * `prisma.plan`: Exposes CRUD operations for the **Plan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plans
    * const plans = await prisma.plan.findMany()
    * ```
    */
  get plan(): Prisma.PlanDelegate<ExtArgs>;

  /**
   * `prisma.planMeal`: Exposes CRUD operations for the **PlanMeal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlanMeals
    * const planMeals = await prisma.planMeal.findMany()
    * ```
    */
  get planMeal(): Prisma.PlanMealDelegate<ExtArgs>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs>;

  /**
   * `prisma.macroHistory`: Exposes CRUD operations for the **MacroHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MacroHistories
    * const macroHistories = await prisma.macroHistory.findMany()
    * ```
    */
  get macroHistory(): Prisma.MacroHistoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.1.0
   * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Meal: 'Meal',
    Ingredient: 'Ingredient',
    MealIngredient: 'MealIngredient',
    Category: 'Category',
    MealCategory: 'MealCategory',
    Tag: 'Tag',
    MealTag: 'MealTag',
    FavoriteMeal: 'FavoriteMeal',
    Plan: 'Plan',
    PlanMeal: 'PlanMeal',
    Profile: 'Profile',
    MacroHistory: 'MacroHistory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "meal" | "ingredient" | "mealIngredient" | "category" | "mealCategory" | "tag" | "mealTag" | "favoriteMeal" | "plan" | "planMeal" | "profile" | "macroHistory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Meal: {
        payload: Prisma.$MealPayload<ExtArgs>
        fields: Prisma.MealFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          findFirst: {
            args: Prisma.MealFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          findMany: {
            args: Prisma.MealFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>[]
          }
          create: {
            args: Prisma.MealCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          createMany: {
            args: Prisma.MealCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MealCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>[]
          }
          delete: {
            args: Prisma.MealDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          update: {
            args: Prisma.MealUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          deleteMany: {
            args: Prisma.MealDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MealUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MealUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPayload>
          }
          aggregate: {
            args: Prisma.MealAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeal>
          }
          groupBy: {
            args: Prisma.MealGroupByArgs<ExtArgs>
            result: $Utils.Optional<MealGroupByOutputType>[]
          }
          count: {
            args: Prisma.MealCountArgs<ExtArgs>
            result: $Utils.Optional<MealCountAggregateOutputType> | number
          }
        }
      }
      Ingredient: {
        payload: Prisma.$IngredientPayload<ExtArgs>
        fields: Prisma.IngredientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IngredientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IngredientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          findFirst: {
            args: Prisma.IngredientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IngredientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          findMany: {
            args: Prisma.IngredientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>[]
          }
          create: {
            args: Prisma.IngredientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          createMany: {
            args: Prisma.IngredientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IngredientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>[]
          }
          delete: {
            args: Prisma.IngredientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          update: {
            args: Prisma.IngredientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          deleteMany: {
            args: Prisma.IngredientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IngredientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IngredientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          aggregate: {
            args: Prisma.IngredientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIngredient>
          }
          groupBy: {
            args: Prisma.IngredientGroupByArgs<ExtArgs>
            result: $Utils.Optional<IngredientGroupByOutputType>[]
          }
          count: {
            args: Prisma.IngredientCountArgs<ExtArgs>
            result: $Utils.Optional<IngredientCountAggregateOutputType> | number
          }
        }
      }
      MealIngredient: {
        payload: Prisma.$MealIngredientPayload<ExtArgs>
        fields: Prisma.MealIngredientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealIngredientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealIngredientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealIngredientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealIngredientPayload>
          }
          findFirst: {
            args: Prisma.MealIngredientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealIngredientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealIngredientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealIngredientPayload>
          }
          findMany: {
            args: Prisma.MealIngredientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealIngredientPayload>[]
          }
          create: {
            args: Prisma.MealIngredientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealIngredientPayload>
          }
          createMany: {
            args: Prisma.MealIngredientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MealIngredientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealIngredientPayload>[]
          }
          delete: {
            args: Prisma.MealIngredientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealIngredientPayload>
          }
          update: {
            args: Prisma.MealIngredientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealIngredientPayload>
          }
          deleteMany: {
            args: Prisma.MealIngredientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MealIngredientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MealIngredientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealIngredientPayload>
          }
          aggregate: {
            args: Prisma.MealIngredientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMealIngredient>
          }
          groupBy: {
            args: Prisma.MealIngredientGroupByArgs<ExtArgs>
            result: $Utils.Optional<MealIngredientGroupByOutputType>[]
          }
          count: {
            args: Prisma.MealIngredientCountArgs<ExtArgs>
            result: $Utils.Optional<MealIngredientCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      MealCategory: {
        payload: Prisma.$MealCategoryPayload<ExtArgs>
        fields: Prisma.MealCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealCategoryPayload>
          }
          findFirst: {
            args: Prisma.MealCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealCategoryPayload>
          }
          findMany: {
            args: Prisma.MealCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealCategoryPayload>[]
          }
          create: {
            args: Prisma.MealCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealCategoryPayload>
          }
          createMany: {
            args: Prisma.MealCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MealCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealCategoryPayload>[]
          }
          delete: {
            args: Prisma.MealCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealCategoryPayload>
          }
          update: {
            args: Prisma.MealCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealCategoryPayload>
          }
          deleteMany: {
            args: Prisma.MealCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MealCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MealCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealCategoryPayload>
          }
          aggregate: {
            args: Prisma.MealCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMealCategory>
          }
          groupBy: {
            args: Prisma.MealCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<MealCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.MealCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<MealCategoryCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      MealTag: {
        payload: Prisma.$MealTagPayload<ExtArgs>
        fields: Prisma.MealTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealTagPayload>
          }
          findFirst: {
            args: Prisma.MealTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealTagPayload>
          }
          findMany: {
            args: Prisma.MealTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealTagPayload>[]
          }
          create: {
            args: Prisma.MealTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealTagPayload>
          }
          createMany: {
            args: Prisma.MealTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MealTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealTagPayload>[]
          }
          delete: {
            args: Prisma.MealTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealTagPayload>
          }
          update: {
            args: Prisma.MealTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealTagPayload>
          }
          deleteMany: {
            args: Prisma.MealTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MealTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MealTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealTagPayload>
          }
          aggregate: {
            args: Prisma.MealTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMealTag>
          }
          groupBy: {
            args: Prisma.MealTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<MealTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.MealTagCountArgs<ExtArgs>
            result: $Utils.Optional<MealTagCountAggregateOutputType> | number
          }
        }
      }
      FavoriteMeal: {
        payload: Prisma.$FavoriteMealPayload<ExtArgs>
        fields: Prisma.FavoriteMealFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteMealFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMealPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteMealFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMealPayload>
          }
          findFirst: {
            args: Prisma.FavoriteMealFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMealPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteMealFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMealPayload>
          }
          findMany: {
            args: Prisma.FavoriteMealFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMealPayload>[]
          }
          create: {
            args: Prisma.FavoriteMealCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMealPayload>
          }
          createMany: {
            args: Prisma.FavoriteMealCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteMealCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMealPayload>[]
          }
          delete: {
            args: Prisma.FavoriteMealDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMealPayload>
          }
          update: {
            args: Prisma.FavoriteMealUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMealPayload>
          }
          deleteMany: {
            args: Prisma.FavoriteMealDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteMealUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FavoriteMealUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMealPayload>
          }
          aggregate: {
            args: Prisma.FavoriteMealAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavoriteMeal>
          }
          groupBy: {
            args: Prisma.FavoriteMealGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteMealGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteMealCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteMealCountAggregateOutputType> | number
          }
        }
      }
      Plan: {
        payload: Prisma.$PlanPayload<ExtArgs>
        fields: Prisma.PlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          findFirst: {
            args: Prisma.PlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          findMany: {
            args: Prisma.PlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          create: {
            args: Prisma.PlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          createMany: {
            args: Prisma.PlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          delete: {
            args: Prisma.PlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          update: {
            args: Prisma.PlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          deleteMany: {
            args: Prisma.PlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          aggregate: {
            args: Prisma.PlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlan>
          }
          groupBy: {
            args: Prisma.PlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanCountArgs<ExtArgs>
            result: $Utils.Optional<PlanCountAggregateOutputType> | number
          }
        }
      }
      PlanMeal: {
        payload: Prisma.$PlanMealPayload<ExtArgs>
        fields: Prisma.PlanMealFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanMealFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMealPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanMealFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMealPayload>
          }
          findFirst: {
            args: Prisma.PlanMealFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMealPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanMealFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMealPayload>
          }
          findMany: {
            args: Prisma.PlanMealFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMealPayload>[]
          }
          create: {
            args: Prisma.PlanMealCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMealPayload>
          }
          createMany: {
            args: Prisma.PlanMealCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanMealCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMealPayload>[]
          }
          delete: {
            args: Prisma.PlanMealDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMealPayload>
          }
          update: {
            args: Prisma.PlanMealUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMealPayload>
          }
          deleteMany: {
            args: Prisma.PlanMealDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlanMealUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlanMealUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMealPayload>
          }
          aggregate: {
            args: Prisma.PlanMealAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlanMeal>
          }
          groupBy: {
            args: Prisma.PlanMealGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlanMealGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanMealCountArgs<ExtArgs>
            result: $Utils.Optional<PlanMealCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      MacroHistory: {
        payload: Prisma.$MacroHistoryPayload<ExtArgs>
        fields: Prisma.MacroHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MacroHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MacroHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MacroHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MacroHistoryPayload>
          }
          findFirst: {
            args: Prisma.MacroHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MacroHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MacroHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MacroHistoryPayload>
          }
          findMany: {
            args: Prisma.MacroHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MacroHistoryPayload>[]
          }
          create: {
            args: Prisma.MacroHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MacroHistoryPayload>
          }
          createMany: {
            args: Prisma.MacroHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MacroHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MacroHistoryPayload>[]
          }
          delete: {
            args: Prisma.MacroHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MacroHistoryPayload>
          }
          update: {
            args: Prisma.MacroHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MacroHistoryPayload>
          }
          deleteMany: {
            args: Prisma.MacroHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MacroHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MacroHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MacroHistoryPayload>
          }
          aggregate: {
            args: Prisma.MacroHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMacroHistory>
          }
          groupBy: {
            args: Prisma.MacroHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<MacroHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.MacroHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<MacroHistoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    meals: number
    plans: number
    profiles: number
    favorites: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meals?: boolean | UserCountOutputTypeCountMealsArgs
    plans?: boolean | UserCountOutputTypeCountPlansArgs
    profiles?: boolean | UserCountOutputTypeCountProfilesArgs
    favorites?: boolean | UserCountOutputTypeCountFavoritesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteMealWhereInput
  }


  /**
   * Count Type MealCountOutputType
   */

  export type MealCountOutputType = {
    planMeals: number
    ingredients: number
    categories: number
    tags: number
    favorited: number
  }

  export type MealCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    planMeals?: boolean | MealCountOutputTypeCountPlanMealsArgs
    ingredients?: boolean | MealCountOutputTypeCountIngredientsArgs
    categories?: boolean | MealCountOutputTypeCountCategoriesArgs
    tags?: boolean | MealCountOutputTypeCountTagsArgs
    favorited?: boolean | MealCountOutputTypeCountFavoritedArgs
  }

  // Custom InputTypes
  /**
   * MealCountOutputType without action
   */
  export type MealCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCountOutputType
     */
    select?: MealCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MealCountOutputType without action
   */
  export type MealCountOutputTypeCountPlanMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanMealWhereInput
  }

  /**
   * MealCountOutputType without action
   */
  export type MealCountOutputTypeCountIngredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealIngredientWhereInput
  }

  /**
   * MealCountOutputType without action
   */
  export type MealCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealCategoryWhereInput
  }

  /**
   * MealCountOutputType without action
   */
  export type MealCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealTagWhereInput
  }

  /**
   * MealCountOutputType without action
   */
  export type MealCountOutputTypeCountFavoritedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteMealWhereInput
  }


  /**
   * Count Type IngredientCountOutputType
   */

  export type IngredientCountOutputType = {
    meals: number
  }

  export type IngredientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meals?: boolean | IngredientCountOutputTypeCountMealsArgs
  }

  // Custom InputTypes
  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngredientCountOutputType
     */
    select?: IngredientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeCountMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealIngredientWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    meals: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meals?: boolean | CategoryCountOutputTypeCountMealsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealCategoryWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    meals: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meals?: boolean | TagCountOutputTypeCountMealsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealTagWhereInput
  }


  /**
   * Count Type PlanCountOutputType
   */

  export type PlanCountOutputType = {
    planMeals: number
  }

  export type PlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    planMeals?: boolean | PlanCountOutputTypeCountPlanMealsArgs
  }

  // Custom InputTypes
  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCountOutputType
     */
    select?: PlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountPlanMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanMealWhereInput
  }


  /**
   * Count Type ProfileCountOutputType
   */

  export type ProfileCountOutputType = {
    macroHistory: number
  }

  export type ProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    macroHistory?: boolean | ProfileCountOutputTypeCountMacroHistoryArgs
  }

  // Custom InputTypes
  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     */
    select?: ProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountMacroHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MacroHistoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    b2cId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    b2cId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    b2cId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    b2cId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    b2cId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    b2cId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    b2cId: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    b2cId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meals?: boolean | User$mealsArgs<ExtArgs>
    plans?: boolean | User$plansArgs<ExtArgs>
    profiles?: boolean | User$profilesArgs<ExtArgs>
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    b2cId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    b2cId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meals?: boolean | User$mealsArgs<ExtArgs>
    plans?: boolean | User$plansArgs<ExtArgs>
    profiles?: boolean | User$profilesArgs<ExtArgs>
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      meals: Prisma.$MealPayload<ExtArgs>[]
      plans: Prisma.$PlanPayload<ExtArgs>[]
      profiles: Prisma.$ProfilePayload<ExtArgs>[]
      favorites: Prisma.$FavoriteMealPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      b2cId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meals<T extends User$mealsArgs<ExtArgs> = {}>(args?: Subset<T, User$mealsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findMany"> | Null>
    plans<T extends User$plansArgs<ExtArgs> = {}>(args?: Subset<T, User$plansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findMany"> | Null>
    profiles<T extends User$profilesArgs<ExtArgs> = {}>(args?: Subset<T, User$profilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany"> | Null>
    favorites<T extends User$favoritesArgs<ExtArgs> = {}>(args?: Subset<T, User$favoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteMealPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly b2cId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.meals
   */
  export type User$mealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    where?: MealWhereInput
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    cursor?: MealWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealScalarFieldEnum | MealScalarFieldEnum[]
  }

  /**
   * User.plans
   */
  export type User$plansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    where?: PlanWhereInput
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    cursor?: PlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * User.profiles
   */
  export type User$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * User.favorites
   */
  export type User$favoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeal
     */
    select?: FavoriteMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMealInclude<ExtArgs> | null
    where?: FavoriteMealWhereInput
    orderBy?: FavoriteMealOrderByWithRelationInput | FavoriteMealOrderByWithRelationInput[]
    cursor?: FavoriteMealWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteMealScalarFieldEnum | FavoriteMealScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Meal
   */

  export type AggregateMeal = {
    _count: MealCountAggregateOutputType | null
    _avg: MealAvgAggregateOutputType | null
    _sum: MealSumAggregateOutputType | null
    _min: MealMinAggregateOutputType | null
    _max: MealMaxAggregateOutputType | null
  }

  export type MealAvgAggregateOutputType = {
    prepTime: number | null
    cookTime: number | null
    servings: number | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
  }

  export type MealSumAggregateOutputType = {
    prepTime: number | null
    cookTime: number | null
    servings: number | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
  }

  export type MealMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    instructions: string | null
    prepTime: number | null
    cookTime: number | null
    servings: number | null
    servingSize: string | null
    difficulty: string | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    notes: string | null
  }

  export type MealMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    instructions: string | null
    prepTime: number | null
    cookTime: number | null
    servings: number | null
    servingSize: string | null
    difficulty: string | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    notes: string | null
  }

  export type MealCountAggregateOutputType = {
    id: number
    name: number
    description: number
    instructions: number
    prepTime: number
    cookTime: number
    servings: number
    servingSize: number
    difficulty: number
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: number
    createdAt: number
    updatedAt: number
    notes: number
    _all: number
  }


  export type MealAvgAggregateInputType = {
    prepTime?: true
    cookTime?: true
    servings?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
  }

  export type MealSumAggregateInputType = {
    prepTime?: true
    cookTime?: true
    servings?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
  }

  export type MealMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    instructions?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    servingSize?: true
    difficulty?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
  }

  export type MealMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    instructions?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    servingSize?: true
    difficulty?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
  }

  export type MealCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    instructions?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    servingSize?: true
    difficulty?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
    _all?: true
  }

  export type MealAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meal to aggregate.
     */
    where?: MealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meals to fetch.
     */
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Meals
    **/
    _count?: true | MealCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MealAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MealSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealMaxAggregateInputType
  }

  export type GetMealAggregateType<T extends MealAggregateArgs> = {
        [P in keyof T & keyof AggregateMeal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeal[P]>
      : GetScalarType<T[P], AggregateMeal[P]>
  }




  export type MealGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealWhereInput
    orderBy?: MealOrderByWithAggregationInput | MealOrderByWithAggregationInput[]
    by: MealScalarFieldEnum[] | MealScalarFieldEnum
    having?: MealScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealCountAggregateInputType | true
    _avg?: MealAvgAggregateInputType
    _sum?: MealSumAggregateInputType
    _min?: MealMinAggregateInputType
    _max?: MealMaxAggregateInputType
  }

  export type MealGroupByOutputType = {
    id: string
    name: string
    description: string | null
    instructions: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: string
    createdAt: Date
    updatedAt: Date
    notes: string | null
    _count: MealCountAggregateOutputType | null
    _avg: MealAvgAggregateOutputType | null
    _sum: MealSumAggregateOutputType | null
    _min: MealMinAggregateOutputType | null
    _max: MealMaxAggregateOutputType | null
  }

  type GetMealGroupByPayload<T extends MealGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealGroupByOutputType[P]>
            : GetScalarType<T[P], MealGroupByOutputType[P]>
        }
      >
    >


  export type MealSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    instructions?: boolean
    prepTime?: boolean
    cookTime?: boolean
    servings?: boolean
    servingSize?: boolean
    difficulty?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    planMeals?: boolean | Meal$planMealsArgs<ExtArgs>
    ingredients?: boolean | Meal$ingredientsArgs<ExtArgs>
    categories?: boolean | Meal$categoriesArgs<ExtArgs>
    tags?: boolean | Meal$tagsArgs<ExtArgs>
    favorited?: boolean | Meal$favoritedArgs<ExtArgs>
    _count?: boolean | MealCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meal"]>

  export type MealSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    instructions?: boolean
    prepTime?: boolean
    cookTime?: boolean
    servings?: boolean
    servingSize?: boolean
    difficulty?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meal"]>

  export type MealSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    instructions?: boolean
    prepTime?: boolean
    cookTime?: boolean
    servings?: boolean
    servingSize?: boolean
    difficulty?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
  }

  export type MealInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    planMeals?: boolean | Meal$planMealsArgs<ExtArgs>
    ingredients?: boolean | Meal$ingredientsArgs<ExtArgs>
    categories?: boolean | Meal$categoriesArgs<ExtArgs>
    tags?: boolean | Meal$tagsArgs<ExtArgs>
    favorited?: boolean | Meal$favoritedArgs<ExtArgs>
    _count?: boolean | MealCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MealIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MealPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Meal"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      planMeals: Prisma.$PlanMealPayload<ExtArgs>[]
      ingredients: Prisma.$MealIngredientPayload<ExtArgs>[]
      categories: Prisma.$MealCategoryPayload<ExtArgs>[]
      tags: Prisma.$MealTagPayload<ExtArgs>[]
      favorited: Prisma.$FavoriteMealPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      instructions: string | null
      prepTime: number
      cookTime: number
      servings: number
      servingSize: string
      difficulty: string
      calories: number
      protein: number
      carbs: number
      fat: number
      userId: string
      createdAt: Date
      updatedAt: Date
      notes: string | null
    }, ExtArgs["result"]["meal"]>
    composites: {}
  }

  type MealGetPayload<S extends boolean | null | undefined | MealDefaultArgs> = $Result.GetResult<Prisma.$MealPayload, S>

  type MealCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MealFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MealCountAggregateInputType | true
    }

  export interface MealDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Meal'], meta: { name: 'Meal' } }
    /**
     * Find zero or one Meal that matches the filter.
     * @param {MealFindUniqueArgs} args - Arguments to find a Meal
     * @example
     * // Get one Meal
     * const meal = await prisma.meal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MealFindUniqueArgs>(args: SelectSubset<T, MealFindUniqueArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Meal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MealFindUniqueOrThrowArgs} args - Arguments to find a Meal
     * @example
     * // Get one Meal
     * const meal = await prisma.meal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MealFindUniqueOrThrowArgs>(args: SelectSubset<T, MealFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Meal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFindFirstArgs} args - Arguments to find a Meal
     * @example
     * // Get one Meal
     * const meal = await prisma.meal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MealFindFirstArgs>(args?: SelectSubset<T, MealFindFirstArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Meal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFindFirstOrThrowArgs} args - Arguments to find a Meal
     * @example
     * // Get one Meal
     * const meal = await prisma.meal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MealFindFirstOrThrowArgs>(args?: SelectSubset<T, MealFindFirstOrThrowArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Meals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Meals
     * const meals = await prisma.meal.findMany()
     * 
     * // Get first 10 Meals
     * const meals = await prisma.meal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealWithIdOnly = await prisma.meal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MealFindManyArgs>(args?: SelectSubset<T, MealFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Meal.
     * @param {MealCreateArgs} args - Arguments to create a Meal.
     * @example
     * // Create one Meal
     * const Meal = await prisma.meal.create({
     *   data: {
     *     // ... data to create a Meal
     *   }
     * })
     * 
     */
    create<T extends MealCreateArgs>(args: SelectSubset<T, MealCreateArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Meals.
     * @param {MealCreateManyArgs} args - Arguments to create many Meals.
     * @example
     * // Create many Meals
     * const meal = await prisma.meal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MealCreateManyArgs>(args?: SelectSubset<T, MealCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Meals and returns the data saved in the database.
     * @param {MealCreateManyAndReturnArgs} args - Arguments to create many Meals.
     * @example
     * // Create many Meals
     * const meal = await prisma.meal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Meals and only return the `id`
     * const mealWithIdOnly = await prisma.meal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MealCreateManyAndReturnArgs>(args?: SelectSubset<T, MealCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Meal.
     * @param {MealDeleteArgs} args - Arguments to delete one Meal.
     * @example
     * // Delete one Meal
     * const Meal = await prisma.meal.delete({
     *   where: {
     *     // ... filter to delete one Meal
     *   }
     * })
     * 
     */
    delete<T extends MealDeleteArgs>(args: SelectSubset<T, MealDeleteArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Meal.
     * @param {MealUpdateArgs} args - Arguments to update one Meal.
     * @example
     * // Update one Meal
     * const meal = await prisma.meal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MealUpdateArgs>(args: SelectSubset<T, MealUpdateArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Meals.
     * @param {MealDeleteManyArgs} args - Arguments to filter Meals to delete.
     * @example
     * // Delete a few Meals
     * const { count } = await prisma.meal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MealDeleteManyArgs>(args?: SelectSubset<T, MealDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Meals
     * const meal = await prisma.meal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MealUpdateManyArgs>(args: SelectSubset<T, MealUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Meal.
     * @param {MealUpsertArgs} args - Arguments to update or create a Meal.
     * @example
     * // Update or create a Meal
     * const meal = await prisma.meal.upsert({
     *   create: {
     *     // ... data to create a Meal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Meal we want to update
     *   }
     * })
     */
    upsert<T extends MealUpsertArgs>(args: SelectSubset<T, MealUpsertArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Meals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealCountArgs} args - Arguments to filter Meals to count.
     * @example
     * // Count the number of Meals
     * const count = await prisma.meal.count({
     *   where: {
     *     // ... the filter for the Meals we want to count
     *   }
     * })
    **/
    count<T extends MealCountArgs>(
      args?: Subset<T, MealCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Meal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealAggregateArgs>(args: Subset<T, MealAggregateArgs>): Prisma.PrismaPromise<GetMealAggregateType<T>>

    /**
     * Group by Meal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealGroupByArgs['orderBy'] }
        : { orderBy?: MealGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Meal model
   */
  readonly fields: MealFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Meal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    planMeals<T extends Meal$planMealsArgs<ExtArgs> = {}>(args?: Subset<T, Meal$planMealsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanMealPayload<ExtArgs>, T, "findMany"> | Null>
    ingredients<T extends Meal$ingredientsArgs<ExtArgs> = {}>(args?: Subset<T, Meal$ingredientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealIngredientPayload<ExtArgs>, T, "findMany"> | Null>
    categories<T extends Meal$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Meal$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    tags<T extends Meal$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Meal$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealTagPayload<ExtArgs>, T, "findMany"> | Null>
    favorited<T extends Meal$favoritedArgs<ExtArgs> = {}>(args?: Subset<T, Meal$favoritedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteMealPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Meal model
   */ 
  interface MealFieldRefs {
    readonly id: FieldRef<"Meal", 'String'>
    readonly name: FieldRef<"Meal", 'String'>
    readonly description: FieldRef<"Meal", 'String'>
    readonly instructions: FieldRef<"Meal", 'String'>
    readonly prepTime: FieldRef<"Meal", 'Int'>
    readonly cookTime: FieldRef<"Meal", 'Int'>
    readonly servings: FieldRef<"Meal", 'Int'>
    readonly servingSize: FieldRef<"Meal", 'String'>
    readonly difficulty: FieldRef<"Meal", 'String'>
    readonly calories: FieldRef<"Meal", 'Int'>
    readonly protein: FieldRef<"Meal", 'Float'>
    readonly carbs: FieldRef<"Meal", 'Float'>
    readonly fat: FieldRef<"Meal", 'Float'>
    readonly userId: FieldRef<"Meal", 'String'>
    readonly createdAt: FieldRef<"Meal", 'DateTime'>
    readonly updatedAt: FieldRef<"Meal", 'DateTime'>
    readonly notes: FieldRef<"Meal", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Meal findUnique
   */
  export type MealFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meal to fetch.
     */
    where: MealWhereUniqueInput
  }

  /**
   * Meal findUniqueOrThrow
   */
  export type MealFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meal to fetch.
     */
    where: MealWhereUniqueInput
  }

  /**
   * Meal findFirst
   */
  export type MealFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meal to fetch.
     */
    where?: MealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meals to fetch.
     */
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meals.
     */
    cursor?: MealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meals.
     */
    distinct?: MealScalarFieldEnum | MealScalarFieldEnum[]
  }

  /**
   * Meal findFirstOrThrow
   */
  export type MealFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meal to fetch.
     */
    where?: MealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meals to fetch.
     */
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meals.
     */
    cursor?: MealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meals.
     */
    distinct?: MealScalarFieldEnum | MealScalarFieldEnum[]
  }

  /**
   * Meal findMany
   */
  export type MealFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter, which Meals to fetch.
     */
    where?: MealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meals to fetch.
     */
    orderBy?: MealOrderByWithRelationInput | MealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Meals.
     */
    cursor?: MealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meals.
     */
    skip?: number
    distinct?: MealScalarFieldEnum | MealScalarFieldEnum[]
  }

  /**
   * Meal create
   */
  export type MealCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * The data needed to create a Meal.
     */
    data: XOR<MealCreateInput, MealUncheckedCreateInput>
  }

  /**
   * Meal createMany
   */
  export type MealCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Meals.
     */
    data: MealCreateManyInput | MealCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Meal createManyAndReturn
   */
  export type MealCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Meals.
     */
    data: MealCreateManyInput | MealCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Meal update
   */
  export type MealUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * The data needed to update a Meal.
     */
    data: XOR<MealUpdateInput, MealUncheckedUpdateInput>
    /**
     * Choose, which Meal to update.
     */
    where: MealWhereUniqueInput
  }

  /**
   * Meal updateMany
   */
  export type MealUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Meals.
     */
    data: XOR<MealUpdateManyMutationInput, MealUncheckedUpdateManyInput>
    /**
     * Filter which Meals to update
     */
    where?: MealWhereInput
  }

  /**
   * Meal upsert
   */
  export type MealUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * The filter to search for the Meal to update in case it exists.
     */
    where: MealWhereUniqueInput
    /**
     * In case the Meal found by the `where` argument doesn't exist, create a new Meal with this data.
     */
    create: XOR<MealCreateInput, MealUncheckedCreateInput>
    /**
     * In case the Meal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealUpdateInput, MealUncheckedUpdateInput>
  }

  /**
   * Meal delete
   */
  export type MealDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
    /**
     * Filter which Meal to delete.
     */
    where: MealWhereUniqueInput
  }

  /**
   * Meal deleteMany
   */
  export type MealDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meals to delete
     */
    where?: MealWhereInput
  }

  /**
   * Meal.planMeals
   */
  export type Meal$planMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMeal
     */
    select?: PlanMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMealInclude<ExtArgs> | null
    where?: PlanMealWhereInput
    orderBy?: PlanMealOrderByWithRelationInput | PlanMealOrderByWithRelationInput[]
    cursor?: PlanMealWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanMealScalarFieldEnum | PlanMealScalarFieldEnum[]
  }

  /**
   * Meal.ingredients
   */
  export type Meal$ingredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealIngredient
     */
    select?: MealIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIngredientInclude<ExtArgs> | null
    where?: MealIngredientWhereInput
    orderBy?: MealIngredientOrderByWithRelationInput | MealIngredientOrderByWithRelationInput[]
    cursor?: MealIngredientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealIngredientScalarFieldEnum | MealIngredientScalarFieldEnum[]
  }

  /**
   * Meal.categories
   */
  export type Meal$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCategory
     */
    select?: MealCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealCategoryInclude<ExtArgs> | null
    where?: MealCategoryWhereInput
    orderBy?: MealCategoryOrderByWithRelationInput | MealCategoryOrderByWithRelationInput[]
    cursor?: MealCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealCategoryScalarFieldEnum | MealCategoryScalarFieldEnum[]
  }

  /**
   * Meal.tags
   */
  export type Meal$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealTag
     */
    select?: MealTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealTagInclude<ExtArgs> | null
    where?: MealTagWhereInput
    orderBy?: MealTagOrderByWithRelationInput | MealTagOrderByWithRelationInput[]
    cursor?: MealTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealTagScalarFieldEnum | MealTagScalarFieldEnum[]
  }

  /**
   * Meal.favorited
   */
  export type Meal$favoritedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeal
     */
    select?: FavoriteMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMealInclude<ExtArgs> | null
    where?: FavoriteMealWhereInput
    orderBy?: FavoriteMealOrderByWithRelationInput | FavoriteMealOrderByWithRelationInput[]
    cursor?: FavoriteMealWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteMealScalarFieldEnum | FavoriteMealScalarFieldEnum[]
  }

  /**
   * Meal without action
   */
  export type MealDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meal
     */
    select?: MealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealInclude<ExtArgs> | null
  }


  /**
   * Model Ingredient
   */

  export type AggregateIngredient = {
    _count: IngredientCountAggregateOutputType | null
    _avg: IngredientAvgAggregateOutputType | null
    _sum: IngredientSumAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  export type IngredientAvgAggregateOutputType = {
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
  }

  export type IngredientSumAggregateOutputType = {
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
  }

  export type IngredientMinAggregateOutputType = {
    id: string | null
    name: string | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    unit: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IngredientMaxAggregateOutputType = {
    id: string | null
    name: string | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    unit: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IngredientCountAggregateOutputType = {
    id: number
    name: number
    calories: number
    protein: number
    carbs: number
    fat: number
    unit: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type IngredientAvgAggregateInputType = {
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
  }

  export type IngredientSumAggregateInputType = {
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
  }

  export type IngredientMinAggregateInputType = {
    id?: true
    name?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    unit?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IngredientMaxAggregateInputType = {
    id?: true
    name?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    unit?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IngredientCountAggregateInputType = {
    id?: true
    name?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    unit?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type IngredientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingredient to aggregate.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ingredients
    **/
    _count?: true | IngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IngredientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IngredientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IngredientMaxAggregateInputType
  }

  export type GetIngredientAggregateType<T extends IngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngredient[P]>
      : GetScalarType<T[P], AggregateIngredient[P]>
  }




  export type IngredientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngredientWhereInput
    orderBy?: IngredientOrderByWithAggregationInput | IngredientOrderByWithAggregationInput[]
    by: IngredientScalarFieldEnum[] | IngredientScalarFieldEnum
    having?: IngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IngredientCountAggregateInputType | true
    _avg?: IngredientAvgAggregateInputType
    _sum?: IngredientSumAggregateInputType
    _min?: IngredientMinAggregateInputType
    _max?: IngredientMaxAggregateInputType
  }

  export type IngredientGroupByOutputType = {
    id: string
    name: string
    calories: number
    protein: number
    carbs: number
    fat: number
    unit: string
    createdAt: Date
    updatedAt: Date
    _count: IngredientCountAggregateOutputType | null
    _avg: IngredientAvgAggregateOutputType | null
    _sum: IngredientSumAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  type GetIngredientGroupByPayload<T extends IngredientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IngredientGroupByOutputType[P]>
            : GetScalarType<T[P], IngredientGroupByOutputType[P]>
        }
      >
    >


  export type IngredientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    unit?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meals?: boolean | Ingredient$mealsArgs<ExtArgs>
    _count?: boolean | IngredientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ingredient"]>

  export type IngredientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    unit?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["ingredient"]>

  export type IngredientSelectScalar = {
    id?: boolean
    name?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    unit?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type IngredientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meals?: boolean | Ingredient$mealsArgs<ExtArgs>
    _count?: boolean | IngredientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IngredientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $IngredientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ingredient"
    objects: {
      meals: Prisma.$MealIngredientPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      calories: number
      protein: number
      carbs: number
      fat: number
      unit: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ingredient"]>
    composites: {}
  }

  type IngredientGetPayload<S extends boolean | null | undefined | IngredientDefaultArgs> = $Result.GetResult<Prisma.$IngredientPayload, S>

  type IngredientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IngredientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IngredientCountAggregateInputType | true
    }

  export interface IngredientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ingredient'], meta: { name: 'Ingredient' } }
    /**
     * Find zero or one Ingredient that matches the filter.
     * @param {IngredientFindUniqueArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IngredientFindUniqueArgs>(args: SelectSubset<T, IngredientFindUniqueArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ingredient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IngredientFindUniqueOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IngredientFindUniqueOrThrowArgs>(args: SelectSubset<T, IngredientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ingredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IngredientFindFirstArgs>(args?: SelectSubset<T, IngredientFindFirstArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ingredient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IngredientFindFirstOrThrowArgs>(args?: SelectSubset<T, IngredientFindFirstOrThrowArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingredients
     * const ingredients = await prisma.ingredient.findMany()
     * 
     * // Get first 10 Ingredients
     * const ingredients = await prisma.ingredient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ingredientWithIdOnly = await prisma.ingredient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IngredientFindManyArgs>(args?: SelectSubset<T, IngredientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ingredient.
     * @param {IngredientCreateArgs} args - Arguments to create a Ingredient.
     * @example
     * // Create one Ingredient
     * const Ingredient = await prisma.ingredient.create({
     *   data: {
     *     // ... data to create a Ingredient
     *   }
     * })
     * 
     */
    create<T extends IngredientCreateArgs>(args: SelectSubset<T, IngredientCreateArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ingredients.
     * @param {IngredientCreateManyArgs} args - Arguments to create many Ingredients.
     * @example
     * // Create many Ingredients
     * const ingredient = await prisma.ingredient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IngredientCreateManyArgs>(args?: SelectSubset<T, IngredientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ingredients and returns the data saved in the database.
     * @param {IngredientCreateManyAndReturnArgs} args - Arguments to create many Ingredients.
     * @example
     * // Create many Ingredients
     * const ingredient = await prisma.ingredient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ingredients and only return the `id`
     * const ingredientWithIdOnly = await prisma.ingredient.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IngredientCreateManyAndReturnArgs>(args?: SelectSubset<T, IngredientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ingredient.
     * @param {IngredientDeleteArgs} args - Arguments to delete one Ingredient.
     * @example
     * // Delete one Ingredient
     * const Ingredient = await prisma.ingredient.delete({
     *   where: {
     *     // ... filter to delete one Ingredient
     *   }
     * })
     * 
     */
    delete<T extends IngredientDeleteArgs>(args: SelectSubset<T, IngredientDeleteArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ingredient.
     * @param {IngredientUpdateArgs} args - Arguments to update one Ingredient.
     * @example
     * // Update one Ingredient
     * const ingredient = await prisma.ingredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IngredientUpdateArgs>(args: SelectSubset<T, IngredientUpdateArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ingredients.
     * @param {IngredientDeleteManyArgs} args - Arguments to filter Ingredients to delete.
     * @example
     * // Delete a few Ingredients
     * const { count } = await prisma.ingredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IngredientDeleteManyArgs>(args?: SelectSubset<T, IngredientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingredients
     * const ingredient = await prisma.ingredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IngredientUpdateManyArgs>(args: SelectSubset<T, IngredientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ingredient.
     * @param {IngredientUpsertArgs} args - Arguments to update or create a Ingredient.
     * @example
     * // Update or create a Ingredient
     * const ingredient = await prisma.ingredient.upsert({
     *   create: {
     *     // ... data to create a Ingredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingredient we want to update
     *   }
     * })
     */
    upsert<T extends IngredientUpsertArgs>(args: SelectSubset<T, IngredientUpsertArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientCountArgs} args - Arguments to filter Ingredients to count.
     * @example
     * // Count the number of Ingredients
     * const count = await prisma.ingredient.count({
     *   where: {
     *     // ... the filter for the Ingredients we want to count
     *   }
     * })
    **/
    count<T extends IngredientCountArgs>(
      args?: Subset<T, IngredientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IngredientAggregateArgs>(args: Subset<T, IngredientAggregateArgs>): Prisma.PrismaPromise<GetIngredientAggregateType<T>>

    /**
     * Group by Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IngredientGroupByArgs['orderBy'] }
        : { orderBy?: IngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ingredient model
   */
  readonly fields: IngredientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ingredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IngredientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meals<T extends Ingredient$mealsArgs<ExtArgs> = {}>(args?: Subset<T, Ingredient$mealsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealIngredientPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ingredient model
   */ 
  interface IngredientFieldRefs {
    readonly id: FieldRef<"Ingredient", 'String'>
    readonly name: FieldRef<"Ingredient", 'String'>
    readonly calories: FieldRef<"Ingredient", 'Int'>
    readonly protein: FieldRef<"Ingredient", 'Float'>
    readonly carbs: FieldRef<"Ingredient", 'Float'>
    readonly fat: FieldRef<"Ingredient", 'Float'>
    readonly unit: FieldRef<"Ingredient", 'String'>
    readonly createdAt: FieldRef<"Ingredient", 'DateTime'>
    readonly updatedAt: FieldRef<"Ingredient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Ingredient findUnique
   */
  export type IngredientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient findUniqueOrThrow
   */
  export type IngredientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient findFirst
   */
  export type IngredientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     */
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Ingredient findFirstOrThrow
   */
  export type IngredientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     */
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Ingredient findMany
   */
  export type IngredientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredients to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Ingredient create
   */
  export type IngredientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The data needed to create a Ingredient.
     */
    data: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
  }

  /**
   * Ingredient createMany
   */
  export type IngredientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ingredients.
     */
    data: IngredientCreateManyInput | IngredientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ingredient createManyAndReturn
   */
  export type IngredientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Ingredients.
     */
    data: IngredientCreateManyInput | IngredientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ingredient update
   */
  export type IngredientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The data needed to update a Ingredient.
     */
    data: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
    /**
     * Choose, which Ingredient to update.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient updateMany
   */
  export type IngredientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ingredients.
     */
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyInput>
    /**
     * Filter which Ingredients to update
     */
    where?: IngredientWhereInput
  }

  /**
   * Ingredient upsert
   */
  export type IngredientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The filter to search for the Ingredient to update in case it exists.
     */
    where: IngredientWhereUniqueInput
    /**
     * In case the Ingredient found by the `where` argument doesn't exist, create a new Ingredient with this data.
     */
    create: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
    /**
     * In case the Ingredient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
  }

  /**
   * Ingredient delete
   */
  export type IngredientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter which Ingredient to delete.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient deleteMany
   */
  export type IngredientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingredients to delete
     */
    where?: IngredientWhereInput
  }

  /**
   * Ingredient.meals
   */
  export type Ingredient$mealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealIngredient
     */
    select?: MealIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIngredientInclude<ExtArgs> | null
    where?: MealIngredientWhereInput
    orderBy?: MealIngredientOrderByWithRelationInput | MealIngredientOrderByWithRelationInput[]
    cursor?: MealIngredientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealIngredientScalarFieldEnum | MealIngredientScalarFieldEnum[]
  }

  /**
   * Ingredient without action
   */
  export type IngredientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
  }


  /**
   * Model MealIngredient
   */

  export type AggregateMealIngredient = {
    _count: MealIngredientCountAggregateOutputType | null
    _avg: MealIngredientAvgAggregateOutputType | null
    _sum: MealIngredientSumAggregateOutputType | null
    _min: MealIngredientMinAggregateOutputType | null
    _max: MealIngredientMaxAggregateOutputType | null
  }

  export type MealIngredientAvgAggregateOutputType = {
    amount: number | null
  }

  export type MealIngredientSumAggregateOutputType = {
    amount: number | null
  }

  export type MealIngredientMinAggregateOutputType = {
    id: string | null
    mealId: string | null
    ingredientId: string | null
    amount: number | null
    unit: string | null
    notes: string | null
  }

  export type MealIngredientMaxAggregateOutputType = {
    id: string | null
    mealId: string | null
    ingredientId: string | null
    amount: number | null
    unit: string | null
    notes: string | null
  }

  export type MealIngredientCountAggregateOutputType = {
    id: number
    mealId: number
    ingredientId: number
    amount: number
    unit: number
    notes: number
    _all: number
  }


  export type MealIngredientAvgAggregateInputType = {
    amount?: true
  }

  export type MealIngredientSumAggregateInputType = {
    amount?: true
  }

  export type MealIngredientMinAggregateInputType = {
    id?: true
    mealId?: true
    ingredientId?: true
    amount?: true
    unit?: true
    notes?: true
  }

  export type MealIngredientMaxAggregateInputType = {
    id?: true
    mealId?: true
    ingredientId?: true
    amount?: true
    unit?: true
    notes?: true
  }

  export type MealIngredientCountAggregateInputType = {
    id?: true
    mealId?: true
    ingredientId?: true
    amount?: true
    unit?: true
    notes?: true
    _all?: true
  }

  export type MealIngredientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealIngredient to aggregate.
     */
    where?: MealIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealIngredients to fetch.
     */
    orderBy?: MealIngredientOrderByWithRelationInput | MealIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MealIngredients
    **/
    _count?: true | MealIngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MealIngredientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MealIngredientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealIngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealIngredientMaxAggregateInputType
  }

  export type GetMealIngredientAggregateType<T extends MealIngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateMealIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMealIngredient[P]>
      : GetScalarType<T[P], AggregateMealIngredient[P]>
  }




  export type MealIngredientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealIngredientWhereInput
    orderBy?: MealIngredientOrderByWithAggregationInput | MealIngredientOrderByWithAggregationInput[]
    by: MealIngredientScalarFieldEnum[] | MealIngredientScalarFieldEnum
    having?: MealIngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealIngredientCountAggregateInputType | true
    _avg?: MealIngredientAvgAggregateInputType
    _sum?: MealIngredientSumAggregateInputType
    _min?: MealIngredientMinAggregateInputType
    _max?: MealIngredientMaxAggregateInputType
  }

  export type MealIngredientGroupByOutputType = {
    id: string
    mealId: string
    ingredientId: string
    amount: number
    unit: string
    notes: string | null
    _count: MealIngredientCountAggregateOutputType | null
    _avg: MealIngredientAvgAggregateOutputType | null
    _sum: MealIngredientSumAggregateOutputType | null
    _min: MealIngredientMinAggregateOutputType | null
    _max: MealIngredientMaxAggregateOutputType | null
  }

  type GetMealIngredientGroupByPayload<T extends MealIngredientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealIngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealIngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealIngredientGroupByOutputType[P]>
            : GetScalarType<T[P], MealIngredientGroupByOutputType[P]>
        }
      >
    >


  export type MealIngredientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    ingredientId?: boolean
    amount?: boolean
    unit?: boolean
    notes?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealIngredient"]>

  export type MealIngredientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    ingredientId?: boolean
    amount?: boolean
    unit?: boolean
    notes?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealIngredient"]>

  export type MealIngredientSelectScalar = {
    id?: boolean
    mealId?: boolean
    ingredientId?: boolean
    amount?: boolean
    unit?: boolean
    notes?: boolean
  }

  export type MealIngredientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }
  export type MealIngredientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }

  export type $MealIngredientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MealIngredient"
    objects: {
      meal: Prisma.$MealPayload<ExtArgs>
      ingredient: Prisma.$IngredientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mealId: string
      ingredientId: string
      amount: number
      unit: string
      notes: string | null
    }, ExtArgs["result"]["mealIngredient"]>
    composites: {}
  }

  type MealIngredientGetPayload<S extends boolean | null | undefined | MealIngredientDefaultArgs> = $Result.GetResult<Prisma.$MealIngredientPayload, S>

  type MealIngredientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MealIngredientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MealIngredientCountAggregateInputType | true
    }

  export interface MealIngredientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MealIngredient'], meta: { name: 'MealIngredient' } }
    /**
     * Find zero or one MealIngredient that matches the filter.
     * @param {MealIngredientFindUniqueArgs} args - Arguments to find a MealIngredient
     * @example
     * // Get one MealIngredient
     * const mealIngredient = await prisma.mealIngredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MealIngredientFindUniqueArgs>(args: SelectSubset<T, MealIngredientFindUniqueArgs<ExtArgs>>): Prisma__MealIngredientClient<$Result.GetResult<Prisma.$MealIngredientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MealIngredient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MealIngredientFindUniqueOrThrowArgs} args - Arguments to find a MealIngredient
     * @example
     * // Get one MealIngredient
     * const mealIngredient = await prisma.mealIngredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MealIngredientFindUniqueOrThrowArgs>(args: SelectSubset<T, MealIngredientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MealIngredientClient<$Result.GetResult<Prisma.$MealIngredientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MealIngredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealIngredientFindFirstArgs} args - Arguments to find a MealIngredient
     * @example
     * // Get one MealIngredient
     * const mealIngredient = await prisma.mealIngredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MealIngredientFindFirstArgs>(args?: SelectSubset<T, MealIngredientFindFirstArgs<ExtArgs>>): Prisma__MealIngredientClient<$Result.GetResult<Prisma.$MealIngredientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MealIngredient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealIngredientFindFirstOrThrowArgs} args - Arguments to find a MealIngredient
     * @example
     * // Get one MealIngredient
     * const mealIngredient = await prisma.mealIngredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MealIngredientFindFirstOrThrowArgs>(args?: SelectSubset<T, MealIngredientFindFirstOrThrowArgs<ExtArgs>>): Prisma__MealIngredientClient<$Result.GetResult<Prisma.$MealIngredientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MealIngredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealIngredientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MealIngredients
     * const mealIngredients = await prisma.mealIngredient.findMany()
     * 
     * // Get first 10 MealIngredients
     * const mealIngredients = await prisma.mealIngredient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealIngredientWithIdOnly = await prisma.mealIngredient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MealIngredientFindManyArgs>(args?: SelectSubset<T, MealIngredientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealIngredientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MealIngredient.
     * @param {MealIngredientCreateArgs} args - Arguments to create a MealIngredient.
     * @example
     * // Create one MealIngredient
     * const MealIngredient = await prisma.mealIngredient.create({
     *   data: {
     *     // ... data to create a MealIngredient
     *   }
     * })
     * 
     */
    create<T extends MealIngredientCreateArgs>(args: SelectSubset<T, MealIngredientCreateArgs<ExtArgs>>): Prisma__MealIngredientClient<$Result.GetResult<Prisma.$MealIngredientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MealIngredients.
     * @param {MealIngredientCreateManyArgs} args - Arguments to create many MealIngredients.
     * @example
     * // Create many MealIngredients
     * const mealIngredient = await prisma.mealIngredient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MealIngredientCreateManyArgs>(args?: SelectSubset<T, MealIngredientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MealIngredients and returns the data saved in the database.
     * @param {MealIngredientCreateManyAndReturnArgs} args - Arguments to create many MealIngredients.
     * @example
     * // Create many MealIngredients
     * const mealIngredient = await prisma.mealIngredient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MealIngredients and only return the `id`
     * const mealIngredientWithIdOnly = await prisma.mealIngredient.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MealIngredientCreateManyAndReturnArgs>(args?: SelectSubset<T, MealIngredientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealIngredientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MealIngredient.
     * @param {MealIngredientDeleteArgs} args - Arguments to delete one MealIngredient.
     * @example
     * // Delete one MealIngredient
     * const MealIngredient = await prisma.mealIngredient.delete({
     *   where: {
     *     // ... filter to delete one MealIngredient
     *   }
     * })
     * 
     */
    delete<T extends MealIngredientDeleteArgs>(args: SelectSubset<T, MealIngredientDeleteArgs<ExtArgs>>): Prisma__MealIngredientClient<$Result.GetResult<Prisma.$MealIngredientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MealIngredient.
     * @param {MealIngredientUpdateArgs} args - Arguments to update one MealIngredient.
     * @example
     * // Update one MealIngredient
     * const mealIngredient = await prisma.mealIngredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MealIngredientUpdateArgs>(args: SelectSubset<T, MealIngredientUpdateArgs<ExtArgs>>): Prisma__MealIngredientClient<$Result.GetResult<Prisma.$MealIngredientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MealIngredients.
     * @param {MealIngredientDeleteManyArgs} args - Arguments to filter MealIngredients to delete.
     * @example
     * // Delete a few MealIngredients
     * const { count } = await prisma.mealIngredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MealIngredientDeleteManyArgs>(args?: SelectSubset<T, MealIngredientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealIngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MealIngredients
     * const mealIngredient = await prisma.mealIngredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MealIngredientUpdateManyArgs>(args: SelectSubset<T, MealIngredientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MealIngredient.
     * @param {MealIngredientUpsertArgs} args - Arguments to update or create a MealIngredient.
     * @example
     * // Update or create a MealIngredient
     * const mealIngredient = await prisma.mealIngredient.upsert({
     *   create: {
     *     // ... data to create a MealIngredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MealIngredient we want to update
     *   }
     * })
     */
    upsert<T extends MealIngredientUpsertArgs>(args: SelectSubset<T, MealIngredientUpsertArgs<ExtArgs>>): Prisma__MealIngredientClient<$Result.GetResult<Prisma.$MealIngredientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MealIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealIngredientCountArgs} args - Arguments to filter MealIngredients to count.
     * @example
     * // Count the number of MealIngredients
     * const count = await prisma.mealIngredient.count({
     *   where: {
     *     // ... the filter for the MealIngredients we want to count
     *   }
     * })
    **/
    count<T extends MealIngredientCountArgs>(
      args?: Subset<T, MealIngredientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealIngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MealIngredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealIngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealIngredientAggregateArgs>(args: Subset<T, MealIngredientAggregateArgs>): Prisma.PrismaPromise<GetMealIngredientAggregateType<T>>

    /**
     * Group by MealIngredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealIngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealIngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealIngredientGroupByArgs['orderBy'] }
        : { orderBy?: MealIngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealIngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealIngredientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MealIngredient model
   */
  readonly fields: MealIngredientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MealIngredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealIngredientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meal<T extends MealDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MealDefaultArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    ingredient<T extends IngredientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IngredientDefaultArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MealIngredient model
   */ 
  interface MealIngredientFieldRefs {
    readonly id: FieldRef<"MealIngredient", 'String'>
    readonly mealId: FieldRef<"MealIngredient", 'String'>
    readonly ingredientId: FieldRef<"MealIngredient", 'String'>
    readonly amount: FieldRef<"MealIngredient", 'Float'>
    readonly unit: FieldRef<"MealIngredient", 'String'>
    readonly notes: FieldRef<"MealIngredient", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MealIngredient findUnique
   */
  export type MealIngredientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealIngredient
     */
    select?: MealIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIngredientInclude<ExtArgs> | null
    /**
     * Filter, which MealIngredient to fetch.
     */
    where: MealIngredientWhereUniqueInput
  }

  /**
   * MealIngredient findUniqueOrThrow
   */
  export type MealIngredientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealIngredient
     */
    select?: MealIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIngredientInclude<ExtArgs> | null
    /**
     * Filter, which MealIngredient to fetch.
     */
    where: MealIngredientWhereUniqueInput
  }

  /**
   * MealIngredient findFirst
   */
  export type MealIngredientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealIngredient
     */
    select?: MealIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIngredientInclude<ExtArgs> | null
    /**
     * Filter, which MealIngredient to fetch.
     */
    where?: MealIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealIngredients to fetch.
     */
    orderBy?: MealIngredientOrderByWithRelationInput | MealIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealIngredients.
     */
    cursor?: MealIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealIngredients.
     */
    distinct?: MealIngredientScalarFieldEnum | MealIngredientScalarFieldEnum[]
  }

  /**
   * MealIngredient findFirstOrThrow
   */
  export type MealIngredientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealIngredient
     */
    select?: MealIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIngredientInclude<ExtArgs> | null
    /**
     * Filter, which MealIngredient to fetch.
     */
    where?: MealIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealIngredients to fetch.
     */
    orderBy?: MealIngredientOrderByWithRelationInput | MealIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealIngredients.
     */
    cursor?: MealIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealIngredients.
     */
    distinct?: MealIngredientScalarFieldEnum | MealIngredientScalarFieldEnum[]
  }

  /**
   * MealIngredient findMany
   */
  export type MealIngredientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealIngredient
     */
    select?: MealIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIngredientInclude<ExtArgs> | null
    /**
     * Filter, which MealIngredients to fetch.
     */
    where?: MealIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealIngredients to fetch.
     */
    orderBy?: MealIngredientOrderByWithRelationInput | MealIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MealIngredients.
     */
    cursor?: MealIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealIngredients.
     */
    skip?: number
    distinct?: MealIngredientScalarFieldEnum | MealIngredientScalarFieldEnum[]
  }

  /**
   * MealIngredient create
   */
  export type MealIngredientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealIngredient
     */
    select?: MealIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIngredientInclude<ExtArgs> | null
    /**
     * The data needed to create a MealIngredient.
     */
    data: XOR<MealIngredientCreateInput, MealIngredientUncheckedCreateInput>
  }

  /**
   * MealIngredient createMany
   */
  export type MealIngredientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MealIngredients.
     */
    data: MealIngredientCreateManyInput | MealIngredientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MealIngredient createManyAndReturn
   */
  export type MealIngredientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealIngredient
     */
    select?: MealIngredientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MealIngredients.
     */
    data: MealIngredientCreateManyInput | MealIngredientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIngredientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MealIngredient update
   */
  export type MealIngredientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealIngredient
     */
    select?: MealIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIngredientInclude<ExtArgs> | null
    /**
     * The data needed to update a MealIngredient.
     */
    data: XOR<MealIngredientUpdateInput, MealIngredientUncheckedUpdateInput>
    /**
     * Choose, which MealIngredient to update.
     */
    where: MealIngredientWhereUniqueInput
  }

  /**
   * MealIngredient updateMany
   */
  export type MealIngredientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MealIngredients.
     */
    data: XOR<MealIngredientUpdateManyMutationInput, MealIngredientUncheckedUpdateManyInput>
    /**
     * Filter which MealIngredients to update
     */
    where?: MealIngredientWhereInput
  }

  /**
   * MealIngredient upsert
   */
  export type MealIngredientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealIngredient
     */
    select?: MealIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIngredientInclude<ExtArgs> | null
    /**
     * The filter to search for the MealIngredient to update in case it exists.
     */
    where: MealIngredientWhereUniqueInput
    /**
     * In case the MealIngredient found by the `where` argument doesn't exist, create a new MealIngredient with this data.
     */
    create: XOR<MealIngredientCreateInput, MealIngredientUncheckedCreateInput>
    /**
     * In case the MealIngredient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealIngredientUpdateInput, MealIngredientUncheckedUpdateInput>
  }

  /**
   * MealIngredient delete
   */
  export type MealIngredientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealIngredient
     */
    select?: MealIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIngredientInclude<ExtArgs> | null
    /**
     * Filter which MealIngredient to delete.
     */
    where: MealIngredientWhereUniqueInput
  }

  /**
   * MealIngredient deleteMany
   */
  export type MealIngredientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealIngredients to delete
     */
    where?: MealIngredientWhereInput
  }

  /**
   * MealIngredient without action
   */
  export type MealIngredientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealIngredient
     */
    select?: MealIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealIngredientInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meals?: boolean | Category$mealsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meals?: boolean | Category$mealsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      meals: Prisma.$MealCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meals<T extends Category$mealsArgs<ExtArgs> = {}>(args?: Subset<T, Category$mealsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.meals
   */
  export type Category$mealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCategory
     */
    select?: MealCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealCategoryInclude<ExtArgs> | null
    where?: MealCategoryWhereInput
    orderBy?: MealCategoryOrderByWithRelationInput | MealCategoryOrderByWithRelationInput[]
    cursor?: MealCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealCategoryScalarFieldEnum | MealCategoryScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model MealCategory
   */

  export type AggregateMealCategory = {
    _count: MealCategoryCountAggregateOutputType | null
    _min: MealCategoryMinAggregateOutputType | null
    _max: MealCategoryMaxAggregateOutputType | null
  }

  export type MealCategoryMinAggregateOutputType = {
    id: string | null
    mealId: string | null
    categoryId: string | null
  }

  export type MealCategoryMaxAggregateOutputType = {
    id: string | null
    mealId: string | null
    categoryId: string | null
  }

  export type MealCategoryCountAggregateOutputType = {
    id: number
    mealId: number
    categoryId: number
    _all: number
  }


  export type MealCategoryMinAggregateInputType = {
    id?: true
    mealId?: true
    categoryId?: true
  }

  export type MealCategoryMaxAggregateInputType = {
    id?: true
    mealId?: true
    categoryId?: true
  }

  export type MealCategoryCountAggregateInputType = {
    id?: true
    mealId?: true
    categoryId?: true
    _all?: true
  }

  export type MealCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealCategory to aggregate.
     */
    where?: MealCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealCategories to fetch.
     */
    orderBy?: MealCategoryOrderByWithRelationInput | MealCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MealCategories
    **/
    _count?: true | MealCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealCategoryMaxAggregateInputType
  }

  export type GetMealCategoryAggregateType<T extends MealCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateMealCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMealCategory[P]>
      : GetScalarType<T[P], AggregateMealCategory[P]>
  }




  export type MealCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealCategoryWhereInput
    orderBy?: MealCategoryOrderByWithAggregationInput | MealCategoryOrderByWithAggregationInput[]
    by: MealCategoryScalarFieldEnum[] | MealCategoryScalarFieldEnum
    having?: MealCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealCategoryCountAggregateInputType | true
    _min?: MealCategoryMinAggregateInputType
    _max?: MealCategoryMaxAggregateInputType
  }

  export type MealCategoryGroupByOutputType = {
    id: string
    mealId: string
    categoryId: string
    _count: MealCategoryCountAggregateOutputType | null
    _min: MealCategoryMinAggregateOutputType | null
    _max: MealCategoryMaxAggregateOutputType | null
  }

  type GetMealCategoryGroupByPayload<T extends MealCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], MealCategoryGroupByOutputType[P]>
        }
      >
    >


  export type MealCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    categoryId?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealCategory"]>

  export type MealCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    categoryId?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealCategory"]>

  export type MealCategorySelectScalar = {
    id?: boolean
    mealId?: boolean
    categoryId?: boolean
  }

  export type MealCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type MealCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $MealCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MealCategory"
    objects: {
      meal: Prisma.$MealPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mealId: string
      categoryId: string
    }, ExtArgs["result"]["mealCategory"]>
    composites: {}
  }

  type MealCategoryGetPayload<S extends boolean | null | undefined | MealCategoryDefaultArgs> = $Result.GetResult<Prisma.$MealCategoryPayload, S>

  type MealCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MealCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MealCategoryCountAggregateInputType | true
    }

  export interface MealCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MealCategory'], meta: { name: 'MealCategory' } }
    /**
     * Find zero or one MealCategory that matches the filter.
     * @param {MealCategoryFindUniqueArgs} args - Arguments to find a MealCategory
     * @example
     * // Get one MealCategory
     * const mealCategory = await prisma.mealCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MealCategoryFindUniqueArgs>(args: SelectSubset<T, MealCategoryFindUniqueArgs<ExtArgs>>): Prisma__MealCategoryClient<$Result.GetResult<Prisma.$MealCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MealCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MealCategoryFindUniqueOrThrowArgs} args - Arguments to find a MealCategory
     * @example
     * // Get one MealCategory
     * const mealCategory = await prisma.mealCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MealCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, MealCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MealCategoryClient<$Result.GetResult<Prisma.$MealCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MealCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealCategoryFindFirstArgs} args - Arguments to find a MealCategory
     * @example
     * // Get one MealCategory
     * const mealCategory = await prisma.mealCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MealCategoryFindFirstArgs>(args?: SelectSubset<T, MealCategoryFindFirstArgs<ExtArgs>>): Prisma__MealCategoryClient<$Result.GetResult<Prisma.$MealCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MealCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealCategoryFindFirstOrThrowArgs} args - Arguments to find a MealCategory
     * @example
     * // Get one MealCategory
     * const mealCategory = await prisma.mealCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MealCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, MealCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__MealCategoryClient<$Result.GetResult<Prisma.$MealCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MealCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MealCategories
     * const mealCategories = await prisma.mealCategory.findMany()
     * 
     * // Get first 10 MealCategories
     * const mealCategories = await prisma.mealCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealCategoryWithIdOnly = await prisma.mealCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MealCategoryFindManyArgs>(args?: SelectSubset<T, MealCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MealCategory.
     * @param {MealCategoryCreateArgs} args - Arguments to create a MealCategory.
     * @example
     * // Create one MealCategory
     * const MealCategory = await prisma.mealCategory.create({
     *   data: {
     *     // ... data to create a MealCategory
     *   }
     * })
     * 
     */
    create<T extends MealCategoryCreateArgs>(args: SelectSubset<T, MealCategoryCreateArgs<ExtArgs>>): Prisma__MealCategoryClient<$Result.GetResult<Prisma.$MealCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MealCategories.
     * @param {MealCategoryCreateManyArgs} args - Arguments to create many MealCategories.
     * @example
     * // Create many MealCategories
     * const mealCategory = await prisma.mealCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MealCategoryCreateManyArgs>(args?: SelectSubset<T, MealCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MealCategories and returns the data saved in the database.
     * @param {MealCategoryCreateManyAndReturnArgs} args - Arguments to create many MealCategories.
     * @example
     * // Create many MealCategories
     * const mealCategory = await prisma.mealCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MealCategories and only return the `id`
     * const mealCategoryWithIdOnly = await prisma.mealCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MealCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, MealCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MealCategory.
     * @param {MealCategoryDeleteArgs} args - Arguments to delete one MealCategory.
     * @example
     * // Delete one MealCategory
     * const MealCategory = await prisma.mealCategory.delete({
     *   where: {
     *     // ... filter to delete one MealCategory
     *   }
     * })
     * 
     */
    delete<T extends MealCategoryDeleteArgs>(args: SelectSubset<T, MealCategoryDeleteArgs<ExtArgs>>): Prisma__MealCategoryClient<$Result.GetResult<Prisma.$MealCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MealCategory.
     * @param {MealCategoryUpdateArgs} args - Arguments to update one MealCategory.
     * @example
     * // Update one MealCategory
     * const mealCategory = await prisma.mealCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MealCategoryUpdateArgs>(args: SelectSubset<T, MealCategoryUpdateArgs<ExtArgs>>): Prisma__MealCategoryClient<$Result.GetResult<Prisma.$MealCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MealCategories.
     * @param {MealCategoryDeleteManyArgs} args - Arguments to filter MealCategories to delete.
     * @example
     * // Delete a few MealCategories
     * const { count } = await prisma.mealCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MealCategoryDeleteManyArgs>(args?: SelectSubset<T, MealCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MealCategories
     * const mealCategory = await prisma.mealCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MealCategoryUpdateManyArgs>(args: SelectSubset<T, MealCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MealCategory.
     * @param {MealCategoryUpsertArgs} args - Arguments to update or create a MealCategory.
     * @example
     * // Update or create a MealCategory
     * const mealCategory = await prisma.mealCategory.upsert({
     *   create: {
     *     // ... data to create a MealCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MealCategory we want to update
     *   }
     * })
     */
    upsert<T extends MealCategoryUpsertArgs>(args: SelectSubset<T, MealCategoryUpsertArgs<ExtArgs>>): Prisma__MealCategoryClient<$Result.GetResult<Prisma.$MealCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MealCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealCategoryCountArgs} args - Arguments to filter MealCategories to count.
     * @example
     * // Count the number of MealCategories
     * const count = await prisma.mealCategory.count({
     *   where: {
     *     // ... the filter for the MealCategories we want to count
     *   }
     * })
    **/
    count<T extends MealCategoryCountArgs>(
      args?: Subset<T, MealCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MealCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealCategoryAggregateArgs>(args: Subset<T, MealCategoryAggregateArgs>): Prisma.PrismaPromise<GetMealCategoryAggregateType<T>>

    /**
     * Group by MealCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealCategoryGroupByArgs['orderBy'] }
        : { orderBy?: MealCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MealCategory model
   */
  readonly fields: MealCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MealCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meal<T extends MealDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MealDefaultArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MealCategory model
   */ 
  interface MealCategoryFieldRefs {
    readonly id: FieldRef<"MealCategory", 'String'>
    readonly mealId: FieldRef<"MealCategory", 'String'>
    readonly categoryId: FieldRef<"MealCategory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MealCategory findUnique
   */
  export type MealCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCategory
     */
    select?: MealCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MealCategory to fetch.
     */
    where: MealCategoryWhereUniqueInput
  }

  /**
   * MealCategory findUniqueOrThrow
   */
  export type MealCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCategory
     */
    select?: MealCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MealCategory to fetch.
     */
    where: MealCategoryWhereUniqueInput
  }

  /**
   * MealCategory findFirst
   */
  export type MealCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCategory
     */
    select?: MealCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MealCategory to fetch.
     */
    where?: MealCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealCategories to fetch.
     */
    orderBy?: MealCategoryOrderByWithRelationInput | MealCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealCategories.
     */
    cursor?: MealCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealCategories.
     */
    distinct?: MealCategoryScalarFieldEnum | MealCategoryScalarFieldEnum[]
  }

  /**
   * MealCategory findFirstOrThrow
   */
  export type MealCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCategory
     */
    select?: MealCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MealCategory to fetch.
     */
    where?: MealCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealCategories to fetch.
     */
    orderBy?: MealCategoryOrderByWithRelationInput | MealCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealCategories.
     */
    cursor?: MealCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealCategories.
     */
    distinct?: MealCategoryScalarFieldEnum | MealCategoryScalarFieldEnum[]
  }

  /**
   * MealCategory findMany
   */
  export type MealCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCategory
     */
    select?: MealCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MealCategories to fetch.
     */
    where?: MealCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealCategories to fetch.
     */
    orderBy?: MealCategoryOrderByWithRelationInput | MealCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MealCategories.
     */
    cursor?: MealCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealCategories.
     */
    skip?: number
    distinct?: MealCategoryScalarFieldEnum | MealCategoryScalarFieldEnum[]
  }

  /**
   * MealCategory create
   */
  export type MealCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCategory
     */
    select?: MealCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a MealCategory.
     */
    data: XOR<MealCategoryCreateInput, MealCategoryUncheckedCreateInput>
  }

  /**
   * MealCategory createMany
   */
  export type MealCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MealCategories.
     */
    data: MealCategoryCreateManyInput | MealCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MealCategory createManyAndReturn
   */
  export type MealCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCategory
     */
    select?: MealCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MealCategories.
     */
    data: MealCategoryCreateManyInput | MealCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MealCategory update
   */
  export type MealCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCategory
     */
    select?: MealCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a MealCategory.
     */
    data: XOR<MealCategoryUpdateInput, MealCategoryUncheckedUpdateInput>
    /**
     * Choose, which MealCategory to update.
     */
    where: MealCategoryWhereUniqueInput
  }

  /**
   * MealCategory updateMany
   */
  export type MealCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MealCategories.
     */
    data: XOR<MealCategoryUpdateManyMutationInput, MealCategoryUncheckedUpdateManyInput>
    /**
     * Filter which MealCategories to update
     */
    where?: MealCategoryWhereInput
  }

  /**
   * MealCategory upsert
   */
  export type MealCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCategory
     */
    select?: MealCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the MealCategory to update in case it exists.
     */
    where: MealCategoryWhereUniqueInput
    /**
     * In case the MealCategory found by the `where` argument doesn't exist, create a new MealCategory with this data.
     */
    create: XOR<MealCategoryCreateInput, MealCategoryUncheckedCreateInput>
    /**
     * In case the MealCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealCategoryUpdateInput, MealCategoryUncheckedUpdateInput>
  }

  /**
   * MealCategory delete
   */
  export type MealCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCategory
     */
    select?: MealCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealCategoryInclude<ExtArgs> | null
    /**
     * Filter which MealCategory to delete.
     */
    where: MealCategoryWhereUniqueInput
  }

  /**
   * MealCategory deleteMany
   */
  export type MealCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealCategories to delete
     */
    where?: MealCategoryWhereInput
  }

  /**
   * MealCategory without action
   */
  export type MealCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealCategory
     */
    select?: MealCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meals?: boolean | Tag$mealsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meals?: boolean | Tag$mealsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      meals: Prisma.$MealTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meals<T extends Tag$mealsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$mealsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealTagPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */ 
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly name: FieldRef<"Tag", 'String'>
    readonly description: FieldRef<"Tag", 'String'>
    readonly createdAt: FieldRef<"Tag", 'DateTime'>
    readonly updatedAt: FieldRef<"Tag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }

  /**
   * Tag.meals
   */
  export type Tag$mealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealTag
     */
    select?: MealTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealTagInclude<ExtArgs> | null
    where?: MealTagWhereInput
    orderBy?: MealTagOrderByWithRelationInput | MealTagOrderByWithRelationInput[]
    cursor?: MealTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealTagScalarFieldEnum | MealTagScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model MealTag
   */

  export type AggregateMealTag = {
    _count: MealTagCountAggregateOutputType | null
    _min: MealTagMinAggregateOutputType | null
    _max: MealTagMaxAggregateOutputType | null
  }

  export type MealTagMinAggregateOutputType = {
    id: string | null
    mealId: string | null
    tagId: string | null
  }

  export type MealTagMaxAggregateOutputType = {
    id: string | null
    mealId: string | null
    tagId: string | null
  }

  export type MealTagCountAggregateOutputType = {
    id: number
    mealId: number
    tagId: number
    _all: number
  }


  export type MealTagMinAggregateInputType = {
    id?: true
    mealId?: true
    tagId?: true
  }

  export type MealTagMaxAggregateInputType = {
    id?: true
    mealId?: true
    tagId?: true
  }

  export type MealTagCountAggregateInputType = {
    id?: true
    mealId?: true
    tagId?: true
    _all?: true
  }

  export type MealTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealTag to aggregate.
     */
    where?: MealTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealTags to fetch.
     */
    orderBy?: MealTagOrderByWithRelationInput | MealTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MealTags
    **/
    _count?: true | MealTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealTagMaxAggregateInputType
  }

  export type GetMealTagAggregateType<T extends MealTagAggregateArgs> = {
        [P in keyof T & keyof AggregateMealTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMealTag[P]>
      : GetScalarType<T[P], AggregateMealTag[P]>
  }




  export type MealTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealTagWhereInput
    orderBy?: MealTagOrderByWithAggregationInput | MealTagOrderByWithAggregationInput[]
    by: MealTagScalarFieldEnum[] | MealTagScalarFieldEnum
    having?: MealTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealTagCountAggregateInputType | true
    _min?: MealTagMinAggregateInputType
    _max?: MealTagMaxAggregateInputType
  }

  export type MealTagGroupByOutputType = {
    id: string
    mealId: string
    tagId: string
    _count: MealTagCountAggregateOutputType | null
    _min: MealTagMinAggregateOutputType | null
    _max: MealTagMaxAggregateOutputType | null
  }

  type GetMealTagGroupByPayload<T extends MealTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealTagGroupByOutputType[P]>
            : GetScalarType<T[P], MealTagGroupByOutputType[P]>
        }
      >
    >


  export type MealTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    tagId?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealTag"]>

  export type MealTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealId?: boolean
    tagId?: boolean
    meal?: boolean | MealDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealTag"]>

  export type MealTagSelectScalar = {
    id?: boolean
    mealId?: boolean
    tagId?: boolean
  }

  export type MealTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type MealTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meal?: boolean | MealDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $MealTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MealTag"
    objects: {
      meal: Prisma.$MealPayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mealId: string
      tagId: string
    }, ExtArgs["result"]["mealTag"]>
    composites: {}
  }

  type MealTagGetPayload<S extends boolean | null | undefined | MealTagDefaultArgs> = $Result.GetResult<Prisma.$MealTagPayload, S>

  type MealTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MealTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MealTagCountAggregateInputType | true
    }

  export interface MealTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MealTag'], meta: { name: 'MealTag' } }
    /**
     * Find zero or one MealTag that matches the filter.
     * @param {MealTagFindUniqueArgs} args - Arguments to find a MealTag
     * @example
     * // Get one MealTag
     * const mealTag = await prisma.mealTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MealTagFindUniqueArgs>(args: SelectSubset<T, MealTagFindUniqueArgs<ExtArgs>>): Prisma__MealTagClient<$Result.GetResult<Prisma.$MealTagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MealTag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MealTagFindUniqueOrThrowArgs} args - Arguments to find a MealTag
     * @example
     * // Get one MealTag
     * const mealTag = await prisma.mealTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MealTagFindUniqueOrThrowArgs>(args: SelectSubset<T, MealTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MealTagClient<$Result.GetResult<Prisma.$MealTagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MealTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealTagFindFirstArgs} args - Arguments to find a MealTag
     * @example
     * // Get one MealTag
     * const mealTag = await prisma.mealTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MealTagFindFirstArgs>(args?: SelectSubset<T, MealTagFindFirstArgs<ExtArgs>>): Prisma__MealTagClient<$Result.GetResult<Prisma.$MealTagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MealTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealTagFindFirstOrThrowArgs} args - Arguments to find a MealTag
     * @example
     * // Get one MealTag
     * const mealTag = await prisma.mealTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MealTagFindFirstOrThrowArgs>(args?: SelectSubset<T, MealTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__MealTagClient<$Result.GetResult<Prisma.$MealTagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MealTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MealTags
     * const mealTags = await prisma.mealTag.findMany()
     * 
     * // Get first 10 MealTags
     * const mealTags = await prisma.mealTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealTagWithIdOnly = await prisma.mealTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MealTagFindManyArgs>(args?: SelectSubset<T, MealTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealTagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MealTag.
     * @param {MealTagCreateArgs} args - Arguments to create a MealTag.
     * @example
     * // Create one MealTag
     * const MealTag = await prisma.mealTag.create({
     *   data: {
     *     // ... data to create a MealTag
     *   }
     * })
     * 
     */
    create<T extends MealTagCreateArgs>(args: SelectSubset<T, MealTagCreateArgs<ExtArgs>>): Prisma__MealTagClient<$Result.GetResult<Prisma.$MealTagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MealTags.
     * @param {MealTagCreateManyArgs} args - Arguments to create many MealTags.
     * @example
     * // Create many MealTags
     * const mealTag = await prisma.mealTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MealTagCreateManyArgs>(args?: SelectSubset<T, MealTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MealTags and returns the data saved in the database.
     * @param {MealTagCreateManyAndReturnArgs} args - Arguments to create many MealTags.
     * @example
     * // Create many MealTags
     * const mealTag = await prisma.mealTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MealTags and only return the `id`
     * const mealTagWithIdOnly = await prisma.mealTag.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MealTagCreateManyAndReturnArgs>(args?: SelectSubset<T, MealTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealTagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MealTag.
     * @param {MealTagDeleteArgs} args - Arguments to delete one MealTag.
     * @example
     * // Delete one MealTag
     * const MealTag = await prisma.mealTag.delete({
     *   where: {
     *     // ... filter to delete one MealTag
     *   }
     * })
     * 
     */
    delete<T extends MealTagDeleteArgs>(args: SelectSubset<T, MealTagDeleteArgs<ExtArgs>>): Prisma__MealTagClient<$Result.GetResult<Prisma.$MealTagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MealTag.
     * @param {MealTagUpdateArgs} args - Arguments to update one MealTag.
     * @example
     * // Update one MealTag
     * const mealTag = await prisma.mealTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MealTagUpdateArgs>(args: SelectSubset<T, MealTagUpdateArgs<ExtArgs>>): Prisma__MealTagClient<$Result.GetResult<Prisma.$MealTagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MealTags.
     * @param {MealTagDeleteManyArgs} args - Arguments to filter MealTags to delete.
     * @example
     * // Delete a few MealTags
     * const { count } = await prisma.mealTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MealTagDeleteManyArgs>(args?: SelectSubset<T, MealTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MealTags
     * const mealTag = await prisma.mealTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MealTagUpdateManyArgs>(args: SelectSubset<T, MealTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MealTag.
     * @param {MealTagUpsertArgs} args - Arguments to update or create a MealTag.
     * @example
     * // Update or create a MealTag
     * const mealTag = await prisma.mealTag.upsert({
     *   create: {
     *     // ... data to create a MealTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MealTag we want to update
     *   }
     * })
     */
    upsert<T extends MealTagUpsertArgs>(args: SelectSubset<T, MealTagUpsertArgs<ExtArgs>>): Prisma__MealTagClient<$Result.GetResult<Prisma.$MealTagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MealTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealTagCountArgs} args - Arguments to filter MealTags to count.
     * @example
     * // Count the number of MealTags
     * const count = await prisma.mealTag.count({
     *   where: {
     *     // ... the filter for the MealTags we want to count
     *   }
     * })
    **/
    count<T extends MealTagCountArgs>(
      args?: Subset<T, MealTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MealTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealTagAggregateArgs>(args: Subset<T, MealTagAggregateArgs>): Prisma.PrismaPromise<GetMealTagAggregateType<T>>

    /**
     * Group by MealTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealTagGroupByArgs['orderBy'] }
        : { orderBy?: MealTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MealTag model
   */
  readonly fields: MealTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MealTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meal<T extends MealDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MealDefaultArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MealTag model
   */ 
  interface MealTagFieldRefs {
    readonly id: FieldRef<"MealTag", 'String'>
    readonly mealId: FieldRef<"MealTag", 'String'>
    readonly tagId: FieldRef<"MealTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MealTag findUnique
   */
  export type MealTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealTag
     */
    select?: MealTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealTagInclude<ExtArgs> | null
    /**
     * Filter, which MealTag to fetch.
     */
    where: MealTagWhereUniqueInput
  }

  /**
   * MealTag findUniqueOrThrow
   */
  export type MealTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealTag
     */
    select?: MealTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealTagInclude<ExtArgs> | null
    /**
     * Filter, which MealTag to fetch.
     */
    where: MealTagWhereUniqueInput
  }

  /**
   * MealTag findFirst
   */
  export type MealTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealTag
     */
    select?: MealTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealTagInclude<ExtArgs> | null
    /**
     * Filter, which MealTag to fetch.
     */
    where?: MealTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealTags to fetch.
     */
    orderBy?: MealTagOrderByWithRelationInput | MealTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealTags.
     */
    cursor?: MealTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealTags.
     */
    distinct?: MealTagScalarFieldEnum | MealTagScalarFieldEnum[]
  }

  /**
   * MealTag findFirstOrThrow
   */
  export type MealTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealTag
     */
    select?: MealTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealTagInclude<ExtArgs> | null
    /**
     * Filter, which MealTag to fetch.
     */
    where?: MealTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealTags to fetch.
     */
    orderBy?: MealTagOrderByWithRelationInput | MealTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealTags.
     */
    cursor?: MealTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealTags.
     */
    distinct?: MealTagScalarFieldEnum | MealTagScalarFieldEnum[]
  }

  /**
   * MealTag findMany
   */
  export type MealTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealTag
     */
    select?: MealTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealTagInclude<ExtArgs> | null
    /**
     * Filter, which MealTags to fetch.
     */
    where?: MealTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealTags to fetch.
     */
    orderBy?: MealTagOrderByWithRelationInput | MealTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MealTags.
     */
    cursor?: MealTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealTags.
     */
    skip?: number
    distinct?: MealTagScalarFieldEnum | MealTagScalarFieldEnum[]
  }

  /**
   * MealTag create
   */
  export type MealTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealTag
     */
    select?: MealTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealTagInclude<ExtArgs> | null
    /**
     * The data needed to create a MealTag.
     */
    data: XOR<MealTagCreateInput, MealTagUncheckedCreateInput>
  }

  /**
   * MealTag createMany
   */
  export type MealTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MealTags.
     */
    data: MealTagCreateManyInput | MealTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MealTag createManyAndReturn
   */
  export type MealTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealTag
     */
    select?: MealTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MealTags.
     */
    data: MealTagCreateManyInput | MealTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MealTag update
   */
  export type MealTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealTag
     */
    select?: MealTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealTagInclude<ExtArgs> | null
    /**
     * The data needed to update a MealTag.
     */
    data: XOR<MealTagUpdateInput, MealTagUncheckedUpdateInput>
    /**
     * Choose, which MealTag to update.
     */
    where: MealTagWhereUniqueInput
  }

  /**
   * MealTag updateMany
   */
  export type MealTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MealTags.
     */
    data: XOR<MealTagUpdateManyMutationInput, MealTagUncheckedUpdateManyInput>
    /**
     * Filter which MealTags to update
     */
    where?: MealTagWhereInput
  }

  /**
   * MealTag upsert
   */
  export type MealTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealTag
     */
    select?: MealTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealTagInclude<ExtArgs> | null
    /**
     * The filter to search for the MealTag to update in case it exists.
     */
    where: MealTagWhereUniqueInput
    /**
     * In case the MealTag found by the `where` argument doesn't exist, create a new MealTag with this data.
     */
    create: XOR<MealTagCreateInput, MealTagUncheckedCreateInput>
    /**
     * In case the MealTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealTagUpdateInput, MealTagUncheckedUpdateInput>
  }

  /**
   * MealTag delete
   */
  export type MealTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealTag
     */
    select?: MealTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealTagInclude<ExtArgs> | null
    /**
     * Filter which MealTag to delete.
     */
    where: MealTagWhereUniqueInput
  }

  /**
   * MealTag deleteMany
   */
  export type MealTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealTags to delete
     */
    where?: MealTagWhereInput
  }

  /**
   * MealTag without action
   */
  export type MealTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealTag
     */
    select?: MealTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealTagInclude<ExtArgs> | null
  }


  /**
   * Model FavoriteMeal
   */

  export type AggregateFavoriteMeal = {
    _count: FavoriteMealCountAggregateOutputType | null
    _min: FavoriteMealMinAggregateOutputType | null
    _max: FavoriteMealMaxAggregateOutputType | null
  }

  export type FavoriteMealMinAggregateOutputType = {
    id: string | null
    userId: string | null
    mealId: string | null
    createdAt: Date | null
  }

  export type FavoriteMealMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    mealId: string | null
    createdAt: Date | null
  }

  export type FavoriteMealCountAggregateOutputType = {
    id: number
    userId: number
    mealId: number
    createdAt: number
    _all: number
  }


  export type FavoriteMealMinAggregateInputType = {
    id?: true
    userId?: true
    mealId?: true
    createdAt?: true
  }

  export type FavoriteMealMaxAggregateInputType = {
    id?: true
    userId?: true
    mealId?: true
    createdAt?: true
  }

  export type FavoriteMealCountAggregateInputType = {
    id?: true
    userId?: true
    mealId?: true
    createdAt?: true
    _all?: true
  }

  export type FavoriteMealAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteMeal to aggregate.
     */
    where?: FavoriteMealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteMeals to fetch.
     */
    orderBy?: FavoriteMealOrderByWithRelationInput | FavoriteMealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteMealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteMeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteMeals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FavoriteMeals
    **/
    _count?: true | FavoriteMealCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteMealMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteMealMaxAggregateInputType
  }

  export type GetFavoriteMealAggregateType<T extends FavoriteMealAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoriteMeal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoriteMeal[P]>
      : GetScalarType<T[P], AggregateFavoriteMeal[P]>
  }




  export type FavoriteMealGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteMealWhereInput
    orderBy?: FavoriteMealOrderByWithAggregationInput | FavoriteMealOrderByWithAggregationInput[]
    by: FavoriteMealScalarFieldEnum[] | FavoriteMealScalarFieldEnum
    having?: FavoriteMealScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteMealCountAggregateInputType | true
    _min?: FavoriteMealMinAggregateInputType
    _max?: FavoriteMealMaxAggregateInputType
  }

  export type FavoriteMealGroupByOutputType = {
    id: string
    userId: string
    mealId: string
    createdAt: Date
    _count: FavoriteMealCountAggregateOutputType | null
    _min: FavoriteMealMinAggregateOutputType | null
    _max: FavoriteMealMaxAggregateOutputType | null
  }

  type GetFavoriteMealGroupByPayload<T extends FavoriteMealGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteMealGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteMealGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteMealGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteMealGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteMealSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    mealId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    meal?: boolean | MealDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteMeal"]>

  export type FavoriteMealSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    mealId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    meal?: boolean | MealDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteMeal"]>

  export type FavoriteMealSelectScalar = {
    id?: boolean
    userId?: boolean
    mealId?: boolean
    createdAt?: boolean
  }

  export type FavoriteMealInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    meal?: boolean | MealDefaultArgs<ExtArgs>
  }
  export type FavoriteMealIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    meal?: boolean | MealDefaultArgs<ExtArgs>
  }

  export type $FavoriteMealPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FavoriteMeal"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      meal: Prisma.$MealPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      mealId: string
      createdAt: Date
    }, ExtArgs["result"]["favoriteMeal"]>
    composites: {}
  }

  type FavoriteMealGetPayload<S extends boolean | null | undefined | FavoriteMealDefaultArgs> = $Result.GetResult<Prisma.$FavoriteMealPayload, S>

  type FavoriteMealCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavoriteMealFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavoriteMealCountAggregateInputType | true
    }

  export interface FavoriteMealDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FavoriteMeal'], meta: { name: 'FavoriteMeal' } }
    /**
     * Find zero or one FavoriteMeal that matches the filter.
     * @param {FavoriteMealFindUniqueArgs} args - Arguments to find a FavoriteMeal
     * @example
     * // Get one FavoriteMeal
     * const favoriteMeal = await prisma.favoriteMeal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteMealFindUniqueArgs>(args: SelectSubset<T, FavoriteMealFindUniqueArgs<ExtArgs>>): Prisma__FavoriteMealClient<$Result.GetResult<Prisma.$FavoriteMealPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FavoriteMeal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FavoriteMealFindUniqueOrThrowArgs} args - Arguments to find a FavoriteMeal
     * @example
     * // Get one FavoriteMeal
     * const favoriteMeal = await prisma.favoriteMeal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteMealFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteMealFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteMealClient<$Result.GetResult<Prisma.$FavoriteMealPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FavoriteMeal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMealFindFirstArgs} args - Arguments to find a FavoriteMeal
     * @example
     * // Get one FavoriteMeal
     * const favoriteMeal = await prisma.favoriteMeal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteMealFindFirstArgs>(args?: SelectSubset<T, FavoriteMealFindFirstArgs<ExtArgs>>): Prisma__FavoriteMealClient<$Result.GetResult<Prisma.$FavoriteMealPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FavoriteMeal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMealFindFirstOrThrowArgs} args - Arguments to find a FavoriteMeal
     * @example
     * // Get one FavoriteMeal
     * const favoriteMeal = await prisma.favoriteMeal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteMealFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteMealFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteMealClient<$Result.GetResult<Prisma.$FavoriteMealPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FavoriteMeals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMealFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavoriteMeals
     * const favoriteMeals = await prisma.favoriteMeal.findMany()
     * 
     * // Get first 10 FavoriteMeals
     * const favoriteMeals = await prisma.favoriteMeal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteMealWithIdOnly = await prisma.favoriteMeal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FavoriteMealFindManyArgs>(args?: SelectSubset<T, FavoriteMealFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteMealPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FavoriteMeal.
     * @param {FavoriteMealCreateArgs} args - Arguments to create a FavoriteMeal.
     * @example
     * // Create one FavoriteMeal
     * const FavoriteMeal = await prisma.favoriteMeal.create({
     *   data: {
     *     // ... data to create a FavoriteMeal
     *   }
     * })
     * 
     */
    create<T extends FavoriteMealCreateArgs>(args: SelectSubset<T, FavoriteMealCreateArgs<ExtArgs>>): Prisma__FavoriteMealClient<$Result.GetResult<Prisma.$FavoriteMealPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FavoriteMeals.
     * @param {FavoriteMealCreateManyArgs} args - Arguments to create many FavoriteMeals.
     * @example
     * // Create many FavoriteMeals
     * const favoriteMeal = await prisma.favoriteMeal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteMealCreateManyArgs>(args?: SelectSubset<T, FavoriteMealCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FavoriteMeals and returns the data saved in the database.
     * @param {FavoriteMealCreateManyAndReturnArgs} args - Arguments to create many FavoriteMeals.
     * @example
     * // Create many FavoriteMeals
     * const favoriteMeal = await prisma.favoriteMeal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FavoriteMeals and only return the `id`
     * const favoriteMealWithIdOnly = await prisma.favoriteMeal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteMealCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteMealCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteMealPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FavoriteMeal.
     * @param {FavoriteMealDeleteArgs} args - Arguments to delete one FavoriteMeal.
     * @example
     * // Delete one FavoriteMeal
     * const FavoriteMeal = await prisma.favoriteMeal.delete({
     *   where: {
     *     // ... filter to delete one FavoriteMeal
     *   }
     * })
     * 
     */
    delete<T extends FavoriteMealDeleteArgs>(args: SelectSubset<T, FavoriteMealDeleteArgs<ExtArgs>>): Prisma__FavoriteMealClient<$Result.GetResult<Prisma.$FavoriteMealPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FavoriteMeal.
     * @param {FavoriteMealUpdateArgs} args - Arguments to update one FavoriteMeal.
     * @example
     * // Update one FavoriteMeal
     * const favoriteMeal = await prisma.favoriteMeal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteMealUpdateArgs>(args: SelectSubset<T, FavoriteMealUpdateArgs<ExtArgs>>): Prisma__FavoriteMealClient<$Result.GetResult<Prisma.$FavoriteMealPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FavoriteMeals.
     * @param {FavoriteMealDeleteManyArgs} args - Arguments to filter FavoriteMeals to delete.
     * @example
     * // Delete a few FavoriteMeals
     * const { count } = await prisma.favoriteMeal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteMealDeleteManyArgs>(args?: SelectSubset<T, FavoriteMealDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoriteMeals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMealUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavoriteMeals
     * const favoriteMeal = await prisma.favoriteMeal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteMealUpdateManyArgs>(args: SelectSubset<T, FavoriteMealUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FavoriteMeal.
     * @param {FavoriteMealUpsertArgs} args - Arguments to update or create a FavoriteMeal.
     * @example
     * // Update or create a FavoriteMeal
     * const favoriteMeal = await prisma.favoriteMeal.upsert({
     *   create: {
     *     // ... data to create a FavoriteMeal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavoriteMeal we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteMealUpsertArgs>(args: SelectSubset<T, FavoriteMealUpsertArgs<ExtArgs>>): Prisma__FavoriteMealClient<$Result.GetResult<Prisma.$FavoriteMealPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FavoriteMeals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMealCountArgs} args - Arguments to filter FavoriteMeals to count.
     * @example
     * // Count the number of FavoriteMeals
     * const count = await prisma.favoriteMeal.count({
     *   where: {
     *     // ... the filter for the FavoriteMeals we want to count
     *   }
     * })
    **/
    count<T extends FavoriteMealCountArgs>(
      args?: Subset<T, FavoriteMealCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteMealCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavoriteMeal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMealAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteMealAggregateArgs>(args: Subset<T, FavoriteMealAggregateArgs>): Prisma.PrismaPromise<GetFavoriteMealAggregateType<T>>

    /**
     * Group by FavoriteMeal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMealGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteMealGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteMealGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteMealGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteMealGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteMealGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FavoriteMeal model
   */
  readonly fields: FavoriteMealFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FavoriteMeal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteMealClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    meal<T extends MealDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MealDefaultArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FavoriteMeal model
   */ 
  interface FavoriteMealFieldRefs {
    readonly id: FieldRef<"FavoriteMeal", 'String'>
    readonly userId: FieldRef<"FavoriteMeal", 'String'>
    readonly mealId: FieldRef<"FavoriteMeal", 'String'>
    readonly createdAt: FieldRef<"FavoriteMeal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FavoriteMeal findUnique
   */
  export type FavoriteMealFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeal
     */
    select?: FavoriteMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMealInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteMeal to fetch.
     */
    where: FavoriteMealWhereUniqueInput
  }

  /**
   * FavoriteMeal findUniqueOrThrow
   */
  export type FavoriteMealFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeal
     */
    select?: FavoriteMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMealInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteMeal to fetch.
     */
    where: FavoriteMealWhereUniqueInput
  }

  /**
   * FavoriteMeal findFirst
   */
  export type FavoriteMealFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeal
     */
    select?: FavoriteMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMealInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteMeal to fetch.
     */
    where?: FavoriteMealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteMeals to fetch.
     */
    orderBy?: FavoriteMealOrderByWithRelationInput | FavoriteMealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteMeals.
     */
    cursor?: FavoriteMealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteMeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteMeals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteMeals.
     */
    distinct?: FavoriteMealScalarFieldEnum | FavoriteMealScalarFieldEnum[]
  }

  /**
   * FavoriteMeal findFirstOrThrow
   */
  export type FavoriteMealFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeal
     */
    select?: FavoriteMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMealInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteMeal to fetch.
     */
    where?: FavoriteMealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteMeals to fetch.
     */
    orderBy?: FavoriteMealOrderByWithRelationInput | FavoriteMealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteMeals.
     */
    cursor?: FavoriteMealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteMeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteMeals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteMeals.
     */
    distinct?: FavoriteMealScalarFieldEnum | FavoriteMealScalarFieldEnum[]
  }

  /**
   * FavoriteMeal findMany
   */
  export type FavoriteMealFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeal
     */
    select?: FavoriteMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMealInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteMeals to fetch.
     */
    where?: FavoriteMealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteMeals to fetch.
     */
    orderBy?: FavoriteMealOrderByWithRelationInput | FavoriteMealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FavoriteMeals.
     */
    cursor?: FavoriteMealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteMeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteMeals.
     */
    skip?: number
    distinct?: FavoriteMealScalarFieldEnum | FavoriteMealScalarFieldEnum[]
  }

  /**
   * FavoriteMeal create
   */
  export type FavoriteMealCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeal
     */
    select?: FavoriteMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMealInclude<ExtArgs> | null
    /**
     * The data needed to create a FavoriteMeal.
     */
    data: XOR<FavoriteMealCreateInput, FavoriteMealUncheckedCreateInput>
  }

  /**
   * FavoriteMeal createMany
   */
  export type FavoriteMealCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FavoriteMeals.
     */
    data: FavoriteMealCreateManyInput | FavoriteMealCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FavoriteMeal createManyAndReturn
   */
  export type FavoriteMealCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeal
     */
    select?: FavoriteMealSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FavoriteMeals.
     */
    data: FavoriteMealCreateManyInput | FavoriteMealCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMealIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FavoriteMeal update
   */
  export type FavoriteMealUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeal
     */
    select?: FavoriteMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMealInclude<ExtArgs> | null
    /**
     * The data needed to update a FavoriteMeal.
     */
    data: XOR<FavoriteMealUpdateInput, FavoriteMealUncheckedUpdateInput>
    /**
     * Choose, which FavoriteMeal to update.
     */
    where: FavoriteMealWhereUniqueInput
  }

  /**
   * FavoriteMeal updateMany
   */
  export type FavoriteMealUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FavoriteMeals.
     */
    data: XOR<FavoriteMealUpdateManyMutationInput, FavoriteMealUncheckedUpdateManyInput>
    /**
     * Filter which FavoriteMeals to update
     */
    where?: FavoriteMealWhereInput
  }

  /**
   * FavoriteMeal upsert
   */
  export type FavoriteMealUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeal
     */
    select?: FavoriteMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMealInclude<ExtArgs> | null
    /**
     * The filter to search for the FavoriteMeal to update in case it exists.
     */
    where: FavoriteMealWhereUniqueInput
    /**
     * In case the FavoriteMeal found by the `where` argument doesn't exist, create a new FavoriteMeal with this data.
     */
    create: XOR<FavoriteMealCreateInput, FavoriteMealUncheckedCreateInput>
    /**
     * In case the FavoriteMeal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteMealUpdateInput, FavoriteMealUncheckedUpdateInput>
  }

  /**
   * FavoriteMeal delete
   */
  export type FavoriteMealDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeal
     */
    select?: FavoriteMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMealInclude<ExtArgs> | null
    /**
     * Filter which FavoriteMeal to delete.
     */
    where: FavoriteMealWhereUniqueInput
  }

  /**
   * FavoriteMeal deleteMany
   */
  export type FavoriteMealDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteMeals to delete
     */
    where?: FavoriteMealWhereInput
  }

  /**
   * FavoriteMeal without action
   */
  export type FavoriteMealDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeal
     */
    select?: FavoriteMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMealInclude<ExtArgs> | null
  }


  /**
   * Model Plan
   */

  export type AggregatePlan = {
    _count: PlanCountAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  export type PlanMinAggregateOutputType = {
    id: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    notes: string | null
  }

  export type PlanMaxAggregateOutputType = {
    id: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    notes: string | null
  }

  export type PlanCountAggregateOutputType = {
    id: number
    name: number
    startDate: number
    endDate: number
    userId: number
    createdAt: number
    updatedAt: number
    notes: number
    _all: number
  }


  export type PlanMinAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
  }

  export type PlanMaxAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
  }

  export type PlanCountAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
    _all?: true
  }

  export type PlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plan to aggregate.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plans
    **/
    _count?: true | PlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanMaxAggregateInputType
  }

  export type GetPlanAggregateType<T extends PlanAggregateArgs> = {
        [P in keyof T & keyof AggregatePlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlan[P]>
      : GetScalarType<T[P], AggregatePlan[P]>
  }




  export type PlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanWhereInput
    orderBy?: PlanOrderByWithAggregationInput | PlanOrderByWithAggregationInput[]
    by: PlanScalarFieldEnum[] | PlanScalarFieldEnum
    having?: PlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanCountAggregateInputType | true
    _min?: PlanMinAggregateInputType
    _max?: PlanMaxAggregateInputType
  }

  export type PlanGroupByOutputType = {
    id: string
    name: string
    startDate: Date
    endDate: Date
    userId: string
    createdAt: Date
    updatedAt: Date
    notes: string | null
    _count: PlanCountAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  type GetPlanGroupByPayload<T extends PlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanGroupByOutputType[P]>
            : GetScalarType<T[P], PlanGroupByOutputType[P]>
        }
      >
    >


  export type PlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    planMeals?: boolean | Plan$planMealsArgs<ExtArgs>
    _count?: boolean | PlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectScalar = {
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
  }

  export type PlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    planMeals?: boolean | Plan$planMealsArgs<ExtArgs>
    _count?: boolean | PlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plan"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      planMeals: Prisma.$PlanMealPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      startDate: Date
      endDate: Date
      userId: string
      createdAt: Date
      updatedAt: Date
      notes: string | null
    }, ExtArgs["result"]["plan"]>
    composites: {}
  }

  type PlanGetPayload<S extends boolean | null | undefined | PlanDefaultArgs> = $Result.GetResult<Prisma.$PlanPayload, S>

  type PlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlanCountAggregateInputType | true
    }

  export interface PlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plan'], meta: { name: 'Plan' } }
    /**
     * Find zero or one Plan that matches the filter.
     * @param {PlanFindUniqueArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlanFindUniqueArgs>(args: SelectSubset<T, PlanFindUniqueArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Plan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlanFindUniqueOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlanFindUniqueOrThrowArgs>(args: SelectSubset<T, PlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Plan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlanFindFirstArgs>(args?: SelectSubset<T, PlanFindFirstArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Plan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlanFindFirstOrThrowArgs>(args?: SelectSubset<T, PlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Plans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plans
     * const plans = await prisma.plan.findMany()
     * 
     * // Get first 10 Plans
     * const plans = await prisma.plan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planWithIdOnly = await prisma.plan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlanFindManyArgs>(args?: SelectSubset<T, PlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Plan.
     * @param {PlanCreateArgs} args - Arguments to create a Plan.
     * @example
     * // Create one Plan
     * const Plan = await prisma.plan.create({
     *   data: {
     *     // ... data to create a Plan
     *   }
     * })
     * 
     */
    create<T extends PlanCreateArgs>(args: SelectSubset<T, PlanCreateArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Plans.
     * @param {PlanCreateManyArgs} args - Arguments to create many Plans.
     * @example
     * // Create many Plans
     * const plan = await prisma.plan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlanCreateManyArgs>(args?: SelectSubset<T, PlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Plans and returns the data saved in the database.
     * @param {PlanCreateManyAndReturnArgs} args - Arguments to create many Plans.
     * @example
     * // Create many Plans
     * const plan = await prisma.plan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Plans and only return the `id`
     * const planWithIdOnly = await prisma.plan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlanCreateManyAndReturnArgs>(args?: SelectSubset<T, PlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Plan.
     * @param {PlanDeleteArgs} args - Arguments to delete one Plan.
     * @example
     * // Delete one Plan
     * const Plan = await prisma.plan.delete({
     *   where: {
     *     // ... filter to delete one Plan
     *   }
     * })
     * 
     */
    delete<T extends PlanDeleteArgs>(args: SelectSubset<T, PlanDeleteArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Plan.
     * @param {PlanUpdateArgs} args - Arguments to update one Plan.
     * @example
     * // Update one Plan
     * const plan = await prisma.plan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlanUpdateArgs>(args: SelectSubset<T, PlanUpdateArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Plans.
     * @param {PlanDeleteManyArgs} args - Arguments to filter Plans to delete.
     * @example
     * // Delete a few Plans
     * const { count } = await prisma.plan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlanDeleteManyArgs>(args?: SelectSubset<T, PlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plans
     * const plan = await prisma.plan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlanUpdateManyArgs>(args: SelectSubset<T, PlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Plan.
     * @param {PlanUpsertArgs} args - Arguments to update or create a Plan.
     * @example
     * // Update or create a Plan
     * const plan = await prisma.plan.upsert({
     *   create: {
     *     // ... data to create a Plan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plan we want to update
     *   }
     * })
     */
    upsert<T extends PlanUpsertArgs>(args: SelectSubset<T, PlanUpsertArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCountArgs} args - Arguments to filter Plans to count.
     * @example
     * // Count the number of Plans
     * const count = await prisma.plan.count({
     *   where: {
     *     // ... the filter for the Plans we want to count
     *   }
     * })
    **/
    count<T extends PlanCountArgs>(
      args?: Subset<T, PlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanAggregateArgs>(args: Subset<T, PlanAggregateArgs>): Prisma.PrismaPromise<GetPlanAggregateType<T>>

    /**
     * Group by Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanGroupByArgs['orderBy'] }
        : { orderBy?: PlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plan model
   */
  readonly fields: PlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    planMeals<T extends Plan$planMealsArgs<ExtArgs> = {}>(args?: Subset<T, Plan$planMealsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanMealPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Plan model
   */ 
  interface PlanFieldRefs {
    readonly id: FieldRef<"Plan", 'String'>
    readonly name: FieldRef<"Plan", 'String'>
    readonly startDate: FieldRef<"Plan", 'DateTime'>
    readonly endDate: FieldRef<"Plan", 'DateTime'>
    readonly userId: FieldRef<"Plan", 'String'>
    readonly createdAt: FieldRef<"Plan", 'DateTime'>
    readonly updatedAt: FieldRef<"Plan", 'DateTime'>
    readonly notes: FieldRef<"Plan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Plan findUnique
   */
  export type PlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan findUniqueOrThrow
   */
  export type PlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan findFirst
   */
  export type PlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan findFirstOrThrow
   */
  export type PlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan findMany
   */
  export type PlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plans to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan create
   */
  export type PlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The data needed to create a Plan.
     */
    data: XOR<PlanCreateInput, PlanUncheckedCreateInput>
  }

  /**
   * Plan createMany
   */
  export type PlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Plans.
     */
    data: PlanCreateManyInput | PlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plan createManyAndReturn
   */
  export type PlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Plans.
     */
    data: PlanCreateManyInput | PlanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Plan update
   */
  export type PlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The data needed to update a Plan.
     */
    data: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
    /**
     * Choose, which Plan to update.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan updateMany
   */
  export type PlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Plans.
     */
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyInput>
    /**
     * Filter which Plans to update
     */
    where?: PlanWhereInput
  }

  /**
   * Plan upsert
   */
  export type PlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The filter to search for the Plan to update in case it exists.
     */
    where: PlanWhereUniqueInput
    /**
     * In case the Plan found by the `where` argument doesn't exist, create a new Plan with this data.
     */
    create: XOR<PlanCreateInput, PlanUncheckedCreateInput>
    /**
     * In case the Plan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
  }

  /**
   * Plan delete
   */
  export type PlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter which Plan to delete.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan deleteMany
   */
  export type PlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plans to delete
     */
    where?: PlanWhereInput
  }

  /**
   * Plan.planMeals
   */
  export type Plan$planMealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMeal
     */
    select?: PlanMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMealInclude<ExtArgs> | null
    where?: PlanMealWhereInput
    orderBy?: PlanMealOrderByWithRelationInput | PlanMealOrderByWithRelationInput[]
    cursor?: PlanMealWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanMealScalarFieldEnum | PlanMealScalarFieldEnum[]
  }

  /**
   * Plan without action
   */
  export type PlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
  }


  /**
   * Model PlanMeal
   */

  export type AggregatePlanMeal = {
    _count: PlanMealCountAggregateOutputType | null
    _avg: PlanMealAvgAggregateOutputType | null
    _sum: PlanMealSumAggregateOutputType | null
    _min: PlanMealMinAggregateOutputType | null
    _max: PlanMealMaxAggregateOutputType | null
  }

  export type PlanMealAvgAggregateOutputType = {
    servings: number | null
  }

  export type PlanMealSumAggregateOutputType = {
    servings: number | null
  }

  export type PlanMealMinAggregateOutputType = {
    id: string | null
    planId: string | null
    mealId: string | null
    date: Date | null
    mealTime: string | null
    servings: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlanMealMaxAggregateOutputType = {
    id: string | null
    planId: string | null
    mealId: string | null
    date: Date | null
    mealTime: string | null
    servings: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlanMealCountAggregateOutputType = {
    id: number
    planId: number
    mealId: number
    date: number
    mealTime: number
    servings: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlanMealAvgAggregateInputType = {
    servings?: true
  }

  export type PlanMealSumAggregateInputType = {
    servings?: true
  }

  export type PlanMealMinAggregateInputType = {
    id?: true
    planId?: true
    mealId?: true
    date?: true
    mealTime?: true
    servings?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlanMealMaxAggregateInputType = {
    id?: true
    planId?: true
    mealId?: true
    date?: true
    mealTime?: true
    servings?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlanMealCountAggregateInputType = {
    id?: true
    planId?: true
    mealId?: true
    date?: true
    mealTime?: true
    servings?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlanMealAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanMeal to aggregate.
     */
    where?: PlanMealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanMeals to fetch.
     */
    orderBy?: PlanMealOrderByWithRelationInput | PlanMealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanMealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanMeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanMeals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlanMeals
    **/
    _count?: true | PlanMealCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanMealAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanMealSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanMealMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanMealMaxAggregateInputType
  }

  export type GetPlanMealAggregateType<T extends PlanMealAggregateArgs> = {
        [P in keyof T & keyof AggregatePlanMeal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlanMeal[P]>
      : GetScalarType<T[P], AggregatePlanMeal[P]>
  }




  export type PlanMealGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanMealWhereInput
    orderBy?: PlanMealOrderByWithAggregationInput | PlanMealOrderByWithAggregationInput[]
    by: PlanMealScalarFieldEnum[] | PlanMealScalarFieldEnum
    having?: PlanMealScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanMealCountAggregateInputType | true
    _avg?: PlanMealAvgAggregateInputType
    _sum?: PlanMealSumAggregateInputType
    _min?: PlanMealMinAggregateInputType
    _max?: PlanMealMaxAggregateInputType
  }

  export type PlanMealGroupByOutputType = {
    id: string
    planId: string
    mealId: string
    date: Date
    mealTime: string
    servings: number
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: PlanMealCountAggregateOutputType | null
    _avg: PlanMealAvgAggregateOutputType | null
    _sum: PlanMealSumAggregateOutputType | null
    _min: PlanMealMinAggregateOutputType | null
    _max: PlanMealMaxAggregateOutputType | null
  }

  type GetPlanMealGroupByPayload<T extends PlanMealGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanMealGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanMealGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanMealGroupByOutputType[P]>
            : GetScalarType<T[P], PlanMealGroupByOutputType[P]>
        }
      >
    >


  export type PlanMealSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    mealId?: boolean
    date?: boolean
    mealTime?: boolean
    servings?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    meal?: boolean | MealDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planMeal"]>

  export type PlanMealSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    mealId?: boolean
    date?: boolean
    mealTime?: boolean
    servings?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    meal?: boolean | MealDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planMeal"]>

  export type PlanMealSelectScalar = {
    id?: boolean
    planId?: boolean
    mealId?: boolean
    date?: boolean
    mealTime?: boolean
    servings?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlanMealInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    meal?: boolean | MealDefaultArgs<ExtArgs>
  }
  export type PlanMealIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    meal?: boolean | MealDefaultArgs<ExtArgs>
  }

  export type $PlanMealPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlanMeal"
    objects: {
      plan: Prisma.$PlanPayload<ExtArgs>
      meal: Prisma.$MealPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      planId: string
      mealId: string
      date: Date
      mealTime: string
      servings: number
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["planMeal"]>
    composites: {}
  }

  type PlanMealGetPayload<S extends boolean | null | undefined | PlanMealDefaultArgs> = $Result.GetResult<Prisma.$PlanMealPayload, S>

  type PlanMealCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlanMealFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlanMealCountAggregateInputType | true
    }

  export interface PlanMealDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlanMeal'], meta: { name: 'PlanMeal' } }
    /**
     * Find zero or one PlanMeal that matches the filter.
     * @param {PlanMealFindUniqueArgs} args - Arguments to find a PlanMeal
     * @example
     * // Get one PlanMeal
     * const planMeal = await prisma.planMeal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlanMealFindUniqueArgs>(args: SelectSubset<T, PlanMealFindUniqueArgs<ExtArgs>>): Prisma__PlanMealClient<$Result.GetResult<Prisma.$PlanMealPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PlanMeal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlanMealFindUniqueOrThrowArgs} args - Arguments to find a PlanMeal
     * @example
     * // Get one PlanMeal
     * const planMeal = await prisma.planMeal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlanMealFindUniqueOrThrowArgs>(args: SelectSubset<T, PlanMealFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlanMealClient<$Result.GetResult<Prisma.$PlanMealPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PlanMeal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMealFindFirstArgs} args - Arguments to find a PlanMeal
     * @example
     * // Get one PlanMeal
     * const planMeal = await prisma.planMeal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlanMealFindFirstArgs>(args?: SelectSubset<T, PlanMealFindFirstArgs<ExtArgs>>): Prisma__PlanMealClient<$Result.GetResult<Prisma.$PlanMealPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PlanMeal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMealFindFirstOrThrowArgs} args - Arguments to find a PlanMeal
     * @example
     * // Get one PlanMeal
     * const planMeal = await prisma.planMeal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlanMealFindFirstOrThrowArgs>(args?: SelectSubset<T, PlanMealFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlanMealClient<$Result.GetResult<Prisma.$PlanMealPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PlanMeals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMealFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlanMeals
     * const planMeals = await prisma.planMeal.findMany()
     * 
     * // Get first 10 PlanMeals
     * const planMeals = await prisma.planMeal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planMealWithIdOnly = await prisma.planMeal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlanMealFindManyArgs>(args?: SelectSubset<T, PlanMealFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanMealPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PlanMeal.
     * @param {PlanMealCreateArgs} args - Arguments to create a PlanMeal.
     * @example
     * // Create one PlanMeal
     * const PlanMeal = await prisma.planMeal.create({
     *   data: {
     *     // ... data to create a PlanMeal
     *   }
     * })
     * 
     */
    create<T extends PlanMealCreateArgs>(args: SelectSubset<T, PlanMealCreateArgs<ExtArgs>>): Prisma__PlanMealClient<$Result.GetResult<Prisma.$PlanMealPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PlanMeals.
     * @param {PlanMealCreateManyArgs} args - Arguments to create many PlanMeals.
     * @example
     * // Create many PlanMeals
     * const planMeal = await prisma.planMeal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlanMealCreateManyArgs>(args?: SelectSubset<T, PlanMealCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlanMeals and returns the data saved in the database.
     * @param {PlanMealCreateManyAndReturnArgs} args - Arguments to create many PlanMeals.
     * @example
     * // Create many PlanMeals
     * const planMeal = await prisma.planMeal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlanMeals and only return the `id`
     * const planMealWithIdOnly = await prisma.planMeal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlanMealCreateManyAndReturnArgs>(args?: SelectSubset<T, PlanMealCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanMealPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PlanMeal.
     * @param {PlanMealDeleteArgs} args - Arguments to delete one PlanMeal.
     * @example
     * // Delete one PlanMeal
     * const PlanMeal = await prisma.planMeal.delete({
     *   where: {
     *     // ... filter to delete one PlanMeal
     *   }
     * })
     * 
     */
    delete<T extends PlanMealDeleteArgs>(args: SelectSubset<T, PlanMealDeleteArgs<ExtArgs>>): Prisma__PlanMealClient<$Result.GetResult<Prisma.$PlanMealPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PlanMeal.
     * @param {PlanMealUpdateArgs} args - Arguments to update one PlanMeal.
     * @example
     * // Update one PlanMeal
     * const planMeal = await prisma.planMeal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlanMealUpdateArgs>(args: SelectSubset<T, PlanMealUpdateArgs<ExtArgs>>): Prisma__PlanMealClient<$Result.GetResult<Prisma.$PlanMealPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PlanMeals.
     * @param {PlanMealDeleteManyArgs} args - Arguments to filter PlanMeals to delete.
     * @example
     * // Delete a few PlanMeals
     * const { count } = await prisma.planMeal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlanMealDeleteManyArgs>(args?: SelectSubset<T, PlanMealDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlanMeals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMealUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlanMeals
     * const planMeal = await prisma.planMeal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlanMealUpdateManyArgs>(args: SelectSubset<T, PlanMealUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlanMeal.
     * @param {PlanMealUpsertArgs} args - Arguments to update or create a PlanMeal.
     * @example
     * // Update or create a PlanMeal
     * const planMeal = await prisma.planMeal.upsert({
     *   create: {
     *     // ... data to create a PlanMeal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlanMeal we want to update
     *   }
     * })
     */
    upsert<T extends PlanMealUpsertArgs>(args: SelectSubset<T, PlanMealUpsertArgs<ExtArgs>>): Prisma__PlanMealClient<$Result.GetResult<Prisma.$PlanMealPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PlanMeals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMealCountArgs} args - Arguments to filter PlanMeals to count.
     * @example
     * // Count the number of PlanMeals
     * const count = await prisma.planMeal.count({
     *   where: {
     *     // ... the filter for the PlanMeals we want to count
     *   }
     * })
    **/
    count<T extends PlanMealCountArgs>(
      args?: Subset<T, PlanMealCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanMealCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlanMeal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMealAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanMealAggregateArgs>(args: Subset<T, PlanMealAggregateArgs>): Prisma.PrismaPromise<GetPlanMealAggregateType<T>>

    /**
     * Group by PlanMeal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMealGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanMealGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanMealGroupByArgs['orderBy'] }
        : { orderBy?: PlanMealGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanMealGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanMealGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlanMeal model
   */
  readonly fields: PlanMealFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlanMeal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanMealClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plan<T extends PlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanDefaultArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    meal<T extends MealDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MealDefaultArgs<ExtArgs>>): Prisma__MealClient<$Result.GetResult<Prisma.$MealPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlanMeal model
   */ 
  interface PlanMealFieldRefs {
    readonly id: FieldRef<"PlanMeal", 'String'>
    readonly planId: FieldRef<"PlanMeal", 'String'>
    readonly mealId: FieldRef<"PlanMeal", 'String'>
    readonly date: FieldRef<"PlanMeal", 'DateTime'>
    readonly mealTime: FieldRef<"PlanMeal", 'String'>
    readonly servings: FieldRef<"PlanMeal", 'Int'>
    readonly notes: FieldRef<"PlanMeal", 'String'>
    readonly createdAt: FieldRef<"PlanMeal", 'DateTime'>
    readonly updatedAt: FieldRef<"PlanMeal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlanMeal findUnique
   */
  export type PlanMealFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMeal
     */
    select?: PlanMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMealInclude<ExtArgs> | null
    /**
     * Filter, which PlanMeal to fetch.
     */
    where: PlanMealWhereUniqueInput
  }

  /**
   * PlanMeal findUniqueOrThrow
   */
  export type PlanMealFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMeal
     */
    select?: PlanMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMealInclude<ExtArgs> | null
    /**
     * Filter, which PlanMeal to fetch.
     */
    where: PlanMealWhereUniqueInput
  }

  /**
   * PlanMeal findFirst
   */
  export type PlanMealFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMeal
     */
    select?: PlanMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMealInclude<ExtArgs> | null
    /**
     * Filter, which PlanMeal to fetch.
     */
    where?: PlanMealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanMeals to fetch.
     */
    orderBy?: PlanMealOrderByWithRelationInput | PlanMealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanMeals.
     */
    cursor?: PlanMealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanMeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanMeals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanMeals.
     */
    distinct?: PlanMealScalarFieldEnum | PlanMealScalarFieldEnum[]
  }

  /**
   * PlanMeal findFirstOrThrow
   */
  export type PlanMealFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMeal
     */
    select?: PlanMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMealInclude<ExtArgs> | null
    /**
     * Filter, which PlanMeal to fetch.
     */
    where?: PlanMealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanMeals to fetch.
     */
    orderBy?: PlanMealOrderByWithRelationInput | PlanMealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanMeals.
     */
    cursor?: PlanMealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanMeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanMeals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanMeals.
     */
    distinct?: PlanMealScalarFieldEnum | PlanMealScalarFieldEnum[]
  }

  /**
   * PlanMeal findMany
   */
  export type PlanMealFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMeal
     */
    select?: PlanMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMealInclude<ExtArgs> | null
    /**
     * Filter, which PlanMeals to fetch.
     */
    where?: PlanMealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanMeals to fetch.
     */
    orderBy?: PlanMealOrderByWithRelationInput | PlanMealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlanMeals.
     */
    cursor?: PlanMealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanMeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanMeals.
     */
    skip?: number
    distinct?: PlanMealScalarFieldEnum | PlanMealScalarFieldEnum[]
  }

  /**
   * PlanMeal create
   */
  export type PlanMealCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMeal
     */
    select?: PlanMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMealInclude<ExtArgs> | null
    /**
     * The data needed to create a PlanMeal.
     */
    data: XOR<PlanMealCreateInput, PlanMealUncheckedCreateInput>
  }

  /**
   * PlanMeal createMany
   */
  export type PlanMealCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlanMeals.
     */
    data: PlanMealCreateManyInput | PlanMealCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlanMeal createManyAndReturn
   */
  export type PlanMealCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMeal
     */
    select?: PlanMealSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PlanMeals.
     */
    data: PlanMealCreateManyInput | PlanMealCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMealIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlanMeal update
   */
  export type PlanMealUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMeal
     */
    select?: PlanMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMealInclude<ExtArgs> | null
    /**
     * The data needed to update a PlanMeal.
     */
    data: XOR<PlanMealUpdateInput, PlanMealUncheckedUpdateInput>
    /**
     * Choose, which PlanMeal to update.
     */
    where: PlanMealWhereUniqueInput
  }

  /**
   * PlanMeal updateMany
   */
  export type PlanMealUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlanMeals.
     */
    data: XOR<PlanMealUpdateManyMutationInput, PlanMealUncheckedUpdateManyInput>
    /**
     * Filter which PlanMeals to update
     */
    where?: PlanMealWhereInput
  }

  /**
   * PlanMeal upsert
   */
  export type PlanMealUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMeal
     */
    select?: PlanMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMealInclude<ExtArgs> | null
    /**
     * The filter to search for the PlanMeal to update in case it exists.
     */
    where: PlanMealWhereUniqueInput
    /**
     * In case the PlanMeal found by the `where` argument doesn't exist, create a new PlanMeal with this data.
     */
    create: XOR<PlanMealCreateInput, PlanMealUncheckedCreateInput>
    /**
     * In case the PlanMeal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanMealUpdateInput, PlanMealUncheckedUpdateInput>
  }

  /**
   * PlanMeal delete
   */
  export type PlanMealDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMeal
     */
    select?: PlanMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMealInclude<ExtArgs> | null
    /**
     * Filter which PlanMeal to delete.
     */
    where: PlanMealWhereUniqueInput
  }

  /**
   * PlanMeal deleteMany
   */
  export type PlanMealDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanMeals to delete
     */
    where?: PlanMealWhereInput
  }

  /**
   * PlanMeal without action
   */
  export type PlanMealDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMeal
     */
    select?: PlanMealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMealInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
  }

  export type ProfileSumAggregateOutputType = {
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    name: string | null
    isActive: boolean | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dietaryNeeds: string | null
    activityLevel: string | null
    weightGoal: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    isActive: boolean | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dietaryNeeds: string | null
    activityLevel: string | null
    weightGoal: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    name: number
    isActive: number
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: number
    createdAt: number
    updatedAt: number
    dietaryNeeds: number
    activityLevel: number
    weightGoal: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
  }

  export type ProfileSumAggregateInputType = {
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    dietaryNeeds?: true
    activityLevel?: true
    weightGoal?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    dietaryNeeds?: true
    activityLevel?: true
    weightGoal?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    dietaryNeeds?: true
    activityLevel?: true
    weightGoal?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    name: string
    isActive: boolean
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: string
    createdAt: Date
    updatedAt: Date
    dietaryNeeds: string | null
    activityLevel: string | null
    weightGoal: string | null
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dietaryNeeds?: boolean
    activityLevel?: boolean
    weightGoal?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    macroHistory?: boolean | Profile$macroHistoryArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dietaryNeeds?: boolean
    activityLevel?: boolean
    weightGoal?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    name?: boolean
    isActive?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dietaryNeeds?: boolean
    activityLevel?: boolean
    weightGoal?: boolean
  }

  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    macroHistory?: boolean | Profile$macroHistoryArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      macroHistory: Prisma.$MacroHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      isActive: boolean
      calories: number
      protein: number
      carbs: number
      fat: number
      userId: string
      createdAt: Date
      updatedAt: Date
      dietaryNeeds: string | null
      activityLevel: string | null
      weightGoal: string | null
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    macroHistory<T extends Profile$macroHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Profile$macroHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MacroHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */ 
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly name: FieldRef<"Profile", 'String'>
    readonly isActive: FieldRef<"Profile", 'Boolean'>
    readonly calories: FieldRef<"Profile", 'Int'>
    readonly protein: FieldRef<"Profile", 'Float'>
    readonly carbs: FieldRef<"Profile", 'Float'>
    readonly fat: FieldRef<"Profile", 'Float'>
    readonly userId: FieldRef<"Profile", 'String'>
    readonly createdAt: FieldRef<"Profile", 'DateTime'>
    readonly updatedAt: FieldRef<"Profile", 'DateTime'>
    readonly dietaryNeeds: FieldRef<"Profile", 'String'>
    readonly activityLevel: FieldRef<"Profile", 'String'>
    readonly weightGoal: FieldRef<"Profile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile.macroHistory
   */
  export type Profile$macroHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MacroHistory
     */
    select?: MacroHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MacroHistoryInclude<ExtArgs> | null
    where?: MacroHistoryWhereInput
    orderBy?: MacroHistoryOrderByWithRelationInput | MacroHistoryOrderByWithRelationInput[]
    cursor?: MacroHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MacroHistoryScalarFieldEnum | MacroHistoryScalarFieldEnum[]
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model MacroHistory
   */

  export type AggregateMacroHistory = {
    _count: MacroHistoryCountAggregateOutputType | null
    _avg: MacroHistoryAvgAggregateOutputType | null
    _sum: MacroHistorySumAggregateOutputType | null
    _min: MacroHistoryMinAggregateOutputType | null
    _max: MacroHistoryMaxAggregateOutputType | null
  }

  export type MacroHistoryAvgAggregateOutputType = {
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    weight: number | null
  }

  export type MacroHistorySumAggregateOutputType = {
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    weight: number | null
  }

  export type MacroHistoryMinAggregateOutputType = {
    id: string | null
    date: Date | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    weight: number | null
    notes: string | null
    profileId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MacroHistoryMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    weight: number | null
    notes: string | null
    profileId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MacroHistoryCountAggregateOutputType = {
    id: number
    date: number
    calories: number
    protein: number
    carbs: number
    fat: number
    weight: number
    notes: number
    profileId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MacroHistoryAvgAggregateInputType = {
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    weight?: true
  }

  export type MacroHistorySumAggregateInputType = {
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    weight?: true
  }

  export type MacroHistoryMinAggregateInputType = {
    id?: true
    date?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    weight?: true
    notes?: true
    profileId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MacroHistoryMaxAggregateInputType = {
    id?: true
    date?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    weight?: true
    notes?: true
    profileId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MacroHistoryCountAggregateInputType = {
    id?: true
    date?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    weight?: true
    notes?: true
    profileId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MacroHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MacroHistory to aggregate.
     */
    where?: MacroHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MacroHistories to fetch.
     */
    orderBy?: MacroHistoryOrderByWithRelationInput | MacroHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MacroHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MacroHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MacroHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MacroHistories
    **/
    _count?: true | MacroHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MacroHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MacroHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MacroHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MacroHistoryMaxAggregateInputType
  }

  export type GetMacroHistoryAggregateType<T extends MacroHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateMacroHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMacroHistory[P]>
      : GetScalarType<T[P], AggregateMacroHistory[P]>
  }




  export type MacroHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MacroHistoryWhereInput
    orderBy?: MacroHistoryOrderByWithAggregationInput | MacroHistoryOrderByWithAggregationInput[]
    by: MacroHistoryScalarFieldEnum[] | MacroHistoryScalarFieldEnum
    having?: MacroHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MacroHistoryCountAggregateInputType | true
    _avg?: MacroHistoryAvgAggregateInputType
    _sum?: MacroHistorySumAggregateInputType
    _min?: MacroHistoryMinAggregateInputType
    _max?: MacroHistoryMaxAggregateInputType
  }

  export type MacroHistoryGroupByOutputType = {
    id: string
    date: Date
    calories: number
    protein: number
    carbs: number
    fat: number
    weight: number | null
    notes: string | null
    profileId: string
    createdAt: Date
    updatedAt: Date
    _count: MacroHistoryCountAggregateOutputType | null
    _avg: MacroHistoryAvgAggregateOutputType | null
    _sum: MacroHistorySumAggregateOutputType | null
    _min: MacroHistoryMinAggregateOutputType | null
    _max: MacroHistoryMaxAggregateOutputType | null
  }

  type GetMacroHistoryGroupByPayload<T extends MacroHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MacroHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MacroHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MacroHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], MacroHistoryGroupByOutputType[P]>
        }
      >
    >


  export type MacroHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    weight?: boolean
    notes?: boolean
    profileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["macroHistory"]>

  export type MacroHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    weight?: boolean
    notes?: boolean
    profileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["macroHistory"]>

  export type MacroHistorySelectScalar = {
    id?: boolean
    date?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    weight?: boolean
    notes?: boolean
    profileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MacroHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type MacroHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $MacroHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MacroHistory"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      calories: number
      protein: number
      carbs: number
      fat: number
      weight: number | null
      notes: string | null
      profileId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["macroHistory"]>
    composites: {}
  }

  type MacroHistoryGetPayload<S extends boolean | null | undefined | MacroHistoryDefaultArgs> = $Result.GetResult<Prisma.$MacroHistoryPayload, S>

  type MacroHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MacroHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MacroHistoryCountAggregateInputType | true
    }

  export interface MacroHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MacroHistory'], meta: { name: 'MacroHistory' } }
    /**
     * Find zero or one MacroHistory that matches the filter.
     * @param {MacroHistoryFindUniqueArgs} args - Arguments to find a MacroHistory
     * @example
     * // Get one MacroHistory
     * const macroHistory = await prisma.macroHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MacroHistoryFindUniqueArgs>(args: SelectSubset<T, MacroHistoryFindUniqueArgs<ExtArgs>>): Prisma__MacroHistoryClient<$Result.GetResult<Prisma.$MacroHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MacroHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MacroHistoryFindUniqueOrThrowArgs} args - Arguments to find a MacroHistory
     * @example
     * // Get one MacroHistory
     * const macroHistory = await prisma.macroHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MacroHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, MacroHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MacroHistoryClient<$Result.GetResult<Prisma.$MacroHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MacroHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacroHistoryFindFirstArgs} args - Arguments to find a MacroHistory
     * @example
     * // Get one MacroHistory
     * const macroHistory = await prisma.macroHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MacroHistoryFindFirstArgs>(args?: SelectSubset<T, MacroHistoryFindFirstArgs<ExtArgs>>): Prisma__MacroHistoryClient<$Result.GetResult<Prisma.$MacroHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MacroHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacroHistoryFindFirstOrThrowArgs} args - Arguments to find a MacroHistory
     * @example
     * // Get one MacroHistory
     * const macroHistory = await prisma.macroHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MacroHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, MacroHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__MacroHistoryClient<$Result.GetResult<Prisma.$MacroHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MacroHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacroHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MacroHistories
     * const macroHistories = await prisma.macroHistory.findMany()
     * 
     * // Get first 10 MacroHistories
     * const macroHistories = await prisma.macroHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const macroHistoryWithIdOnly = await prisma.macroHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MacroHistoryFindManyArgs>(args?: SelectSubset<T, MacroHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MacroHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MacroHistory.
     * @param {MacroHistoryCreateArgs} args - Arguments to create a MacroHistory.
     * @example
     * // Create one MacroHistory
     * const MacroHistory = await prisma.macroHistory.create({
     *   data: {
     *     // ... data to create a MacroHistory
     *   }
     * })
     * 
     */
    create<T extends MacroHistoryCreateArgs>(args: SelectSubset<T, MacroHistoryCreateArgs<ExtArgs>>): Prisma__MacroHistoryClient<$Result.GetResult<Prisma.$MacroHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MacroHistories.
     * @param {MacroHistoryCreateManyArgs} args - Arguments to create many MacroHistories.
     * @example
     * // Create many MacroHistories
     * const macroHistory = await prisma.macroHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MacroHistoryCreateManyArgs>(args?: SelectSubset<T, MacroHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MacroHistories and returns the data saved in the database.
     * @param {MacroHistoryCreateManyAndReturnArgs} args - Arguments to create many MacroHistories.
     * @example
     * // Create many MacroHistories
     * const macroHistory = await prisma.macroHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MacroHistories and only return the `id`
     * const macroHistoryWithIdOnly = await prisma.macroHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MacroHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, MacroHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MacroHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MacroHistory.
     * @param {MacroHistoryDeleteArgs} args - Arguments to delete one MacroHistory.
     * @example
     * // Delete one MacroHistory
     * const MacroHistory = await prisma.macroHistory.delete({
     *   where: {
     *     // ... filter to delete one MacroHistory
     *   }
     * })
     * 
     */
    delete<T extends MacroHistoryDeleteArgs>(args: SelectSubset<T, MacroHistoryDeleteArgs<ExtArgs>>): Prisma__MacroHistoryClient<$Result.GetResult<Prisma.$MacroHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MacroHistory.
     * @param {MacroHistoryUpdateArgs} args - Arguments to update one MacroHistory.
     * @example
     * // Update one MacroHistory
     * const macroHistory = await prisma.macroHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MacroHistoryUpdateArgs>(args: SelectSubset<T, MacroHistoryUpdateArgs<ExtArgs>>): Prisma__MacroHistoryClient<$Result.GetResult<Prisma.$MacroHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MacroHistories.
     * @param {MacroHistoryDeleteManyArgs} args - Arguments to filter MacroHistories to delete.
     * @example
     * // Delete a few MacroHistories
     * const { count } = await prisma.macroHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MacroHistoryDeleteManyArgs>(args?: SelectSubset<T, MacroHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MacroHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacroHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MacroHistories
     * const macroHistory = await prisma.macroHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MacroHistoryUpdateManyArgs>(args: SelectSubset<T, MacroHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MacroHistory.
     * @param {MacroHistoryUpsertArgs} args - Arguments to update or create a MacroHistory.
     * @example
     * // Update or create a MacroHistory
     * const macroHistory = await prisma.macroHistory.upsert({
     *   create: {
     *     // ... data to create a MacroHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MacroHistory we want to update
     *   }
     * })
     */
    upsert<T extends MacroHistoryUpsertArgs>(args: SelectSubset<T, MacroHistoryUpsertArgs<ExtArgs>>): Prisma__MacroHistoryClient<$Result.GetResult<Prisma.$MacroHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MacroHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacroHistoryCountArgs} args - Arguments to filter MacroHistories to count.
     * @example
     * // Count the number of MacroHistories
     * const count = await prisma.macroHistory.count({
     *   where: {
     *     // ... the filter for the MacroHistories we want to count
     *   }
     * })
    **/
    count<T extends MacroHistoryCountArgs>(
      args?: Subset<T, MacroHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MacroHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MacroHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacroHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MacroHistoryAggregateArgs>(args: Subset<T, MacroHistoryAggregateArgs>): Prisma.PrismaPromise<GetMacroHistoryAggregateType<T>>

    /**
     * Group by MacroHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MacroHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MacroHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MacroHistoryGroupByArgs['orderBy'] }
        : { orderBy?: MacroHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MacroHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMacroHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MacroHistory model
   */
  readonly fields: MacroHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MacroHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MacroHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MacroHistory model
   */ 
  interface MacroHistoryFieldRefs {
    readonly id: FieldRef<"MacroHistory", 'String'>
    readonly date: FieldRef<"MacroHistory", 'DateTime'>
    readonly calories: FieldRef<"MacroHistory", 'Int'>
    readonly protein: FieldRef<"MacroHistory", 'Float'>
    readonly carbs: FieldRef<"MacroHistory", 'Float'>
    readonly fat: FieldRef<"MacroHistory", 'Float'>
    readonly weight: FieldRef<"MacroHistory", 'Float'>
    readonly notes: FieldRef<"MacroHistory", 'String'>
    readonly profileId: FieldRef<"MacroHistory", 'String'>
    readonly createdAt: FieldRef<"MacroHistory", 'DateTime'>
    readonly updatedAt: FieldRef<"MacroHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MacroHistory findUnique
   */
  export type MacroHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MacroHistory
     */
    select?: MacroHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MacroHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MacroHistory to fetch.
     */
    where: MacroHistoryWhereUniqueInput
  }

  /**
   * MacroHistory findUniqueOrThrow
   */
  export type MacroHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MacroHistory
     */
    select?: MacroHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MacroHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MacroHistory to fetch.
     */
    where: MacroHistoryWhereUniqueInput
  }

  /**
   * MacroHistory findFirst
   */
  export type MacroHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MacroHistory
     */
    select?: MacroHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MacroHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MacroHistory to fetch.
     */
    where?: MacroHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MacroHistories to fetch.
     */
    orderBy?: MacroHistoryOrderByWithRelationInput | MacroHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MacroHistories.
     */
    cursor?: MacroHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MacroHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MacroHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MacroHistories.
     */
    distinct?: MacroHistoryScalarFieldEnum | MacroHistoryScalarFieldEnum[]
  }

  /**
   * MacroHistory findFirstOrThrow
   */
  export type MacroHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MacroHistory
     */
    select?: MacroHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MacroHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MacroHistory to fetch.
     */
    where?: MacroHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MacroHistories to fetch.
     */
    orderBy?: MacroHistoryOrderByWithRelationInput | MacroHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MacroHistories.
     */
    cursor?: MacroHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MacroHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MacroHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MacroHistories.
     */
    distinct?: MacroHistoryScalarFieldEnum | MacroHistoryScalarFieldEnum[]
  }

  /**
   * MacroHistory findMany
   */
  export type MacroHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MacroHistory
     */
    select?: MacroHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MacroHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MacroHistories to fetch.
     */
    where?: MacroHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MacroHistories to fetch.
     */
    orderBy?: MacroHistoryOrderByWithRelationInput | MacroHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MacroHistories.
     */
    cursor?: MacroHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MacroHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MacroHistories.
     */
    skip?: number
    distinct?: MacroHistoryScalarFieldEnum | MacroHistoryScalarFieldEnum[]
  }

  /**
   * MacroHistory create
   */
  export type MacroHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MacroHistory
     */
    select?: MacroHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MacroHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a MacroHistory.
     */
    data: XOR<MacroHistoryCreateInput, MacroHistoryUncheckedCreateInput>
  }

  /**
   * MacroHistory createMany
   */
  export type MacroHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MacroHistories.
     */
    data: MacroHistoryCreateManyInput | MacroHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MacroHistory createManyAndReturn
   */
  export type MacroHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MacroHistory
     */
    select?: MacroHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MacroHistories.
     */
    data: MacroHistoryCreateManyInput | MacroHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MacroHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MacroHistory update
   */
  export type MacroHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MacroHistory
     */
    select?: MacroHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MacroHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a MacroHistory.
     */
    data: XOR<MacroHistoryUpdateInput, MacroHistoryUncheckedUpdateInput>
    /**
     * Choose, which MacroHistory to update.
     */
    where: MacroHistoryWhereUniqueInput
  }

  /**
   * MacroHistory updateMany
   */
  export type MacroHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MacroHistories.
     */
    data: XOR<MacroHistoryUpdateManyMutationInput, MacroHistoryUncheckedUpdateManyInput>
    /**
     * Filter which MacroHistories to update
     */
    where?: MacroHistoryWhereInput
  }

  /**
   * MacroHistory upsert
   */
  export type MacroHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MacroHistory
     */
    select?: MacroHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MacroHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the MacroHistory to update in case it exists.
     */
    where: MacroHistoryWhereUniqueInput
    /**
     * In case the MacroHistory found by the `where` argument doesn't exist, create a new MacroHistory with this data.
     */
    create: XOR<MacroHistoryCreateInput, MacroHistoryUncheckedCreateInput>
    /**
     * In case the MacroHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MacroHistoryUpdateInput, MacroHistoryUncheckedUpdateInput>
  }

  /**
   * MacroHistory delete
   */
  export type MacroHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MacroHistory
     */
    select?: MacroHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MacroHistoryInclude<ExtArgs> | null
    /**
     * Filter which MacroHistory to delete.
     */
    where: MacroHistoryWhereUniqueInput
  }

  /**
   * MacroHistory deleteMany
   */
  export type MacroHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MacroHistories to delete
     */
    where?: MacroHistoryWhereInput
  }

  /**
   * MacroHistory without action
   */
  export type MacroHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MacroHistory
     */
    select?: MacroHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MacroHistoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    b2cId: 'b2cId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MealScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    instructions: 'instructions',
    prepTime: 'prepTime',
    cookTime: 'cookTime',
    servings: 'servings',
    servingSize: 'servingSize',
    difficulty: 'difficulty',
    calories: 'calories',
    protein: 'protein',
    carbs: 'carbs',
    fat: 'fat',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    notes: 'notes'
  };

  export type MealScalarFieldEnum = (typeof MealScalarFieldEnum)[keyof typeof MealScalarFieldEnum]


  export const IngredientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    calories: 'calories',
    protein: 'protein',
    carbs: 'carbs',
    fat: 'fat',
    unit: 'unit',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type IngredientScalarFieldEnum = (typeof IngredientScalarFieldEnum)[keyof typeof IngredientScalarFieldEnum]


  export const MealIngredientScalarFieldEnum: {
    id: 'id',
    mealId: 'mealId',
    ingredientId: 'ingredientId',
    amount: 'amount',
    unit: 'unit',
    notes: 'notes'
  };

  export type MealIngredientScalarFieldEnum = (typeof MealIngredientScalarFieldEnum)[keyof typeof MealIngredientScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const MealCategoryScalarFieldEnum: {
    id: 'id',
    mealId: 'mealId',
    categoryId: 'categoryId'
  };

  export type MealCategoryScalarFieldEnum = (typeof MealCategoryScalarFieldEnum)[keyof typeof MealCategoryScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const MealTagScalarFieldEnum: {
    id: 'id',
    mealId: 'mealId',
    tagId: 'tagId'
  };

  export type MealTagScalarFieldEnum = (typeof MealTagScalarFieldEnum)[keyof typeof MealTagScalarFieldEnum]


  export const FavoriteMealScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    mealId: 'mealId',
    createdAt: 'createdAt'
  };

  export type FavoriteMealScalarFieldEnum = (typeof FavoriteMealScalarFieldEnum)[keyof typeof FavoriteMealScalarFieldEnum]


  export const PlanScalarFieldEnum: {
    id: 'id',
    name: 'name',
    startDate: 'startDate',
    endDate: 'endDate',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    notes: 'notes'
  };

  export type PlanScalarFieldEnum = (typeof PlanScalarFieldEnum)[keyof typeof PlanScalarFieldEnum]


  export const PlanMealScalarFieldEnum: {
    id: 'id',
    planId: 'planId',
    mealId: 'mealId',
    date: 'date',
    mealTime: 'mealTime',
    servings: 'servings',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlanMealScalarFieldEnum = (typeof PlanMealScalarFieldEnum)[keyof typeof PlanMealScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    isActive: 'isActive',
    calories: 'calories',
    protein: 'protein',
    carbs: 'carbs',
    fat: 'fat',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    dietaryNeeds: 'dietaryNeeds',
    activityLevel: 'activityLevel',
    weightGoal: 'weightGoal'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const MacroHistoryScalarFieldEnum: {
    id: 'id',
    date: 'date',
    calories: 'calories',
    protein: 'protein',
    carbs: 'carbs',
    fat: 'fat',
    weight: 'weight',
    notes: 'notes',
    profileId: 'profileId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MacroHistoryScalarFieldEnum = (typeof MacroHistoryScalarFieldEnum)[keyof typeof MacroHistoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    b2cId?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    meals?: MealListRelationFilter
    plans?: PlanListRelationFilter
    profiles?: ProfileListRelationFilter
    favorites?: FavoriteMealListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    b2cId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meals?: MealOrderByRelationAggregateInput
    plans?: PlanOrderByRelationAggregateInput
    profiles?: ProfileOrderByRelationAggregateInput
    favorites?: FavoriteMealOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    b2cId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    meals?: MealListRelationFilter
    plans?: PlanListRelationFilter
    profiles?: ProfileListRelationFilter
    favorites?: FavoriteMealListRelationFilter
  }, "id" | "email" | "b2cId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    b2cId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    b2cId?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type MealWhereInput = {
    AND?: MealWhereInput | MealWhereInput[]
    OR?: MealWhereInput[]
    NOT?: MealWhereInput | MealWhereInput[]
    id?: StringFilter<"Meal"> | string
    name?: StringFilter<"Meal"> | string
    description?: StringNullableFilter<"Meal"> | string | null
    instructions?: StringNullableFilter<"Meal"> | string | null
    prepTime?: IntFilter<"Meal"> | number
    cookTime?: IntFilter<"Meal"> | number
    servings?: IntFilter<"Meal"> | number
    servingSize?: StringFilter<"Meal"> | string
    difficulty?: StringFilter<"Meal"> | string
    calories?: IntFilter<"Meal"> | number
    protein?: FloatFilter<"Meal"> | number
    carbs?: FloatFilter<"Meal"> | number
    fat?: FloatFilter<"Meal"> | number
    userId?: StringFilter<"Meal"> | string
    createdAt?: DateTimeFilter<"Meal"> | Date | string
    updatedAt?: DateTimeFilter<"Meal"> | Date | string
    notes?: StringNullableFilter<"Meal"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    planMeals?: PlanMealListRelationFilter
    ingredients?: MealIngredientListRelationFilter
    categories?: MealCategoryListRelationFilter
    tags?: MealTagListRelationFilter
    favorited?: FavoriteMealListRelationFilter
  }

  export type MealOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    instructions?: SortOrderInput | SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    servingSize?: SortOrder
    difficulty?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    planMeals?: PlanMealOrderByRelationAggregateInput
    ingredients?: MealIngredientOrderByRelationAggregateInput
    categories?: MealCategoryOrderByRelationAggregateInput
    tags?: MealTagOrderByRelationAggregateInput
    favorited?: FavoriteMealOrderByRelationAggregateInput
  }

  export type MealWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MealWhereInput | MealWhereInput[]
    OR?: MealWhereInput[]
    NOT?: MealWhereInput | MealWhereInput[]
    name?: StringFilter<"Meal"> | string
    description?: StringNullableFilter<"Meal"> | string | null
    instructions?: StringNullableFilter<"Meal"> | string | null
    prepTime?: IntFilter<"Meal"> | number
    cookTime?: IntFilter<"Meal"> | number
    servings?: IntFilter<"Meal"> | number
    servingSize?: StringFilter<"Meal"> | string
    difficulty?: StringFilter<"Meal"> | string
    calories?: IntFilter<"Meal"> | number
    protein?: FloatFilter<"Meal"> | number
    carbs?: FloatFilter<"Meal"> | number
    fat?: FloatFilter<"Meal"> | number
    userId?: StringFilter<"Meal"> | string
    createdAt?: DateTimeFilter<"Meal"> | Date | string
    updatedAt?: DateTimeFilter<"Meal"> | Date | string
    notes?: StringNullableFilter<"Meal"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    planMeals?: PlanMealListRelationFilter
    ingredients?: MealIngredientListRelationFilter
    categories?: MealCategoryListRelationFilter
    tags?: MealTagListRelationFilter
    favorited?: FavoriteMealListRelationFilter
  }, "id">

  export type MealOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    instructions?: SortOrderInput | SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    servingSize?: SortOrder
    difficulty?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: MealCountOrderByAggregateInput
    _avg?: MealAvgOrderByAggregateInput
    _max?: MealMaxOrderByAggregateInput
    _min?: MealMinOrderByAggregateInput
    _sum?: MealSumOrderByAggregateInput
  }

  export type MealScalarWhereWithAggregatesInput = {
    AND?: MealScalarWhereWithAggregatesInput | MealScalarWhereWithAggregatesInput[]
    OR?: MealScalarWhereWithAggregatesInput[]
    NOT?: MealScalarWhereWithAggregatesInput | MealScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Meal"> | string
    name?: StringWithAggregatesFilter<"Meal"> | string
    description?: StringNullableWithAggregatesFilter<"Meal"> | string | null
    instructions?: StringNullableWithAggregatesFilter<"Meal"> | string | null
    prepTime?: IntWithAggregatesFilter<"Meal"> | number
    cookTime?: IntWithAggregatesFilter<"Meal"> | number
    servings?: IntWithAggregatesFilter<"Meal"> | number
    servingSize?: StringWithAggregatesFilter<"Meal"> | string
    difficulty?: StringWithAggregatesFilter<"Meal"> | string
    calories?: IntWithAggregatesFilter<"Meal"> | number
    protein?: FloatWithAggregatesFilter<"Meal"> | number
    carbs?: FloatWithAggregatesFilter<"Meal"> | number
    fat?: FloatWithAggregatesFilter<"Meal"> | number
    userId?: StringWithAggregatesFilter<"Meal"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Meal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Meal"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"Meal"> | string | null
  }

  export type IngredientWhereInput = {
    AND?: IngredientWhereInput | IngredientWhereInput[]
    OR?: IngredientWhereInput[]
    NOT?: IngredientWhereInput | IngredientWhereInput[]
    id?: StringFilter<"Ingredient"> | string
    name?: StringFilter<"Ingredient"> | string
    calories?: IntFilter<"Ingredient"> | number
    protein?: FloatFilter<"Ingredient"> | number
    carbs?: FloatFilter<"Ingredient"> | number
    fat?: FloatFilter<"Ingredient"> | number
    unit?: StringFilter<"Ingredient"> | string
    createdAt?: DateTimeFilter<"Ingredient"> | Date | string
    updatedAt?: DateTimeFilter<"Ingredient"> | Date | string
    meals?: MealIngredientListRelationFilter
  }

  export type IngredientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meals?: MealIngredientOrderByRelationAggregateInput
  }

  export type IngredientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: IngredientWhereInput | IngredientWhereInput[]
    OR?: IngredientWhereInput[]
    NOT?: IngredientWhereInput | IngredientWhereInput[]
    calories?: IntFilter<"Ingredient"> | number
    protein?: FloatFilter<"Ingredient"> | number
    carbs?: FloatFilter<"Ingredient"> | number
    fat?: FloatFilter<"Ingredient"> | number
    unit?: StringFilter<"Ingredient"> | string
    createdAt?: DateTimeFilter<"Ingredient"> | Date | string
    updatedAt?: DateTimeFilter<"Ingredient"> | Date | string
    meals?: MealIngredientListRelationFilter
  }, "id" | "name">

  export type IngredientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: IngredientCountOrderByAggregateInput
    _avg?: IngredientAvgOrderByAggregateInput
    _max?: IngredientMaxOrderByAggregateInput
    _min?: IngredientMinOrderByAggregateInput
    _sum?: IngredientSumOrderByAggregateInput
  }

  export type IngredientScalarWhereWithAggregatesInput = {
    AND?: IngredientScalarWhereWithAggregatesInput | IngredientScalarWhereWithAggregatesInput[]
    OR?: IngredientScalarWhereWithAggregatesInput[]
    NOT?: IngredientScalarWhereWithAggregatesInput | IngredientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ingredient"> | string
    name?: StringWithAggregatesFilter<"Ingredient"> | string
    calories?: IntWithAggregatesFilter<"Ingredient"> | number
    protein?: FloatWithAggregatesFilter<"Ingredient"> | number
    carbs?: FloatWithAggregatesFilter<"Ingredient"> | number
    fat?: FloatWithAggregatesFilter<"Ingredient"> | number
    unit?: StringWithAggregatesFilter<"Ingredient"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Ingredient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Ingredient"> | Date | string
  }

  export type MealIngredientWhereInput = {
    AND?: MealIngredientWhereInput | MealIngredientWhereInput[]
    OR?: MealIngredientWhereInput[]
    NOT?: MealIngredientWhereInput | MealIngredientWhereInput[]
    id?: StringFilter<"MealIngredient"> | string
    mealId?: StringFilter<"MealIngredient"> | string
    ingredientId?: StringFilter<"MealIngredient"> | string
    amount?: FloatFilter<"MealIngredient"> | number
    unit?: StringFilter<"MealIngredient"> | string
    notes?: StringNullableFilter<"MealIngredient"> | string | null
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
    ingredient?: XOR<IngredientScalarRelationFilter, IngredientWhereInput>
  }

  export type MealIngredientOrderByWithRelationInput = {
    id?: SortOrder
    mealId?: SortOrder
    ingredientId?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    notes?: SortOrderInput | SortOrder
    meal?: MealOrderByWithRelationInput
    ingredient?: IngredientOrderByWithRelationInput
  }

  export type MealIngredientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    mealId_ingredientId?: MealIngredientMealIdIngredientIdCompoundUniqueInput
    AND?: MealIngredientWhereInput | MealIngredientWhereInput[]
    OR?: MealIngredientWhereInput[]
    NOT?: MealIngredientWhereInput | MealIngredientWhereInput[]
    mealId?: StringFilter<"MealIngredient"> | string
    ingredientId?: StringFilter<"MealIngredient"> | string
    amount?: FloatFilter<"MealIngredient"> | number
    unit?: StringFilter<"MealIngredient"> | string
    notes?: StringNullableFilter<"MealIngredient"> | string | null
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
    ingredient?: XOR<IngredientScalarRelationFilter, IngredientWhereInput>
  }, "id" | "mealId_ingredientId">

  export type MealIngredientOrderByWithAggregationInput = {
    id?: SortOrder
    mealId?: SortOrder
    ingredientId?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: MealIngredientCountOrderByAggregateInput
    _avg?: MealIngredientAvgOrderByAggregateInput
    _max?: MealIngredientMaxOrderByAggregateInput
    _min?: MealIngredientMinOrderByAggregateInput
    _sum?: MealIngredientSumOrderByAggregateInput
  }

  export type MealIngredientScalarWhereWithAggregatesInput = {
    AND?: MealIngredientScalarWhereWithAggregatesInput | MealIngredientScalarWhereWithAggregatesInput[]
    OR?: MealIngredientScalarWhereWithAggregatesInput[]
    NOT?: MealIngredientScalarWhereWithAggregatesInput | MealIngredientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MealIngredient"> | string
    mealId?: StringWithAggregatesFilter<"MealIngredient"> | string
    ingredientId?: StringWithAggregatesFilter<"MealIngredient"> | string
    amount?: FloatWithAggregatesFilter<"MealIngredient"> | number
    unit?: StringWithAggregatesFilter<"MealIngredient"> | string
    notes?: StringNullableWithAggregatesFilter<"MealIngredient"> | string | null
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    meals?: MealCategoryListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meals?: MealCategoryOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    description?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    meals?: MealCategoryListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type MealCategoryWhereInput = {
    AND?: MealCategoryWhereInput | MealCategoryWhereInput[]
    OR?: MealCategoryWhereInput[]
    NOT?: MealCategoryWhereInput | MealCategoryWhereInput[]
    id?: StringFilter<"MealCategory"> | string
    mealId?: StringFilter<"MealCategory"> | string
    categoryId?: StringFilter<"MealCategory"> | string
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }

  export type MealCategoryOrderByWithRelationInput = {
    id?: SortOrder
    mealId?: SortOrder
    categoryId?: SortOrder
    meal?: MealOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
  }

  export type MealCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    mealId_categoryId?: MealCategoryMealIdCategoryIdCompoundUniqueInput
    AND?: MealCategoryWhereInput | MealCategoryWhereInput[]
    OR?: MealCategoryWhereInput[]
    NOT?: MealCategoryWhereInput | MealCategoryWhereInput[]
    mealId?: StringFilter<"MealCategory"> | string
    categoryId?: StringFilter<"MealCategory"> | string
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }, "id" | "mealId_categoryId">

  export type MealCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    mealId?: SortOrder
    categoryId?: SortOrder
    _count?: MealCategoryCountOrderByAggregateInput
    _max?: MealCategoryMaxOrderByAggregateInput
    _min?: MealCategoryMinOrderByAggregateInput
  }

  export type MealCategoryScalarWhereWithAggregatesInput = {
    AND?: MealCategoryScalarWhereWithAggregatesInput | MealCategoryScalarWhereWithAggregatesInput[]
    OR?: MealCategoryScalarWhereWithAggregatesInput[]
    NOT?: MealCategoryScalarWhereWithAggregatesInput | MealCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MealCategory"> | string
    mealId?: StringWithAggregatesFilter<"MealCategory"> | string
    categoryId?: StringWithAggregatesFilter<"MealCategory"> | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    description?: StringNullableFilter<"Tag"> | string | null
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    meals?: MealTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meals?: MealTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    description?: StringNullableFilter<"Tag"> | string | null
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    meals?: MealTagListRelationFilter
  }, "id" | "name">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    name?: StringWithAggregatesFilter<"Tag"> | string
    description?: StringNullableWithAggregatesFilter<"Tag"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
  }

  export type MealTagWhereInput = {
    AND?: MealTagWhereInput | MealTagWhereInput[]
    OR?: MealTagWhereInput[]
    NOT?: MealTagWhereInput | MealTagWhereInput[]
    id?: StringFilter<"MealTag"> | string
    mealId?: StringFilter<"MealTag"> | string
    tagId?: StringFilter<"MealTag"> | string
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }

  export type MealTagOrderByWithRelationInput = {
    id?: SortOrder
    mealId?: SortOrder
    tagId?: SortOrder
    meal?: MealOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type MealTagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    mealId_tagId?: MealTagMealIdTagIdCompoundUniqueInput
    AND?: MealTagWhereInput | MealTagWhereInput[]
    OR?: MealTagWhereInput[]
    NOT?: MealTagWhereInput | MealTagWhereInput[]
    mealId?: StringFilter<"MealTag"> | string
    tagId?: StringFilter<"MealTag"> | string
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }, "id" | "mealId_tagId">

  export type MealTagOrderByWithAggregationInput = {
    id?: SortOrder
    mealId?: SortOrder
    tagId?: SortOrder
    _count?: MealTagCountOrderByAggregateInput
    _max?: MealTagMaxOrderByAggregateInput
    _min?: MealTagMinOrderByAggregateInput
  }

  export type MealTagScalarWhereWithAggregatesInput = {
    AND?: MealTagScalarWhereWithAggregatesInput | MealTagScalarWhereWithAggregatesInput[]
    OR?: MealTagScalarWhereWithAggregatesInput[]
    NOT?: MealTagScalarWhereWithAggregatesInput | MealTagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MealTag"> | string
    mealId?: StringWithAggregatesFilter<"MealTag"> | string
    tagId?: StringWithAggregatesFilter<"MealTag"> | string
  }

  export type FavoriteMealWhereInput = {
    AND?: FavoriteMealWhereInput | FavoriteMealWhereInput[]
    OR?: FavoriteMealWhereInput[]
    NOT?: FavoriteMealWhereInput | FavoriteMealWhereInput[]
    id?: StringFilter<"FavoriteMeal"> | string
    userId?: StringFilter<"FavoriteMeal"> | string
    mealId?: StringFilter<"FavoriteMeal"> | string
    createdAt?: DateTimeFilter<"FavoriteMeal"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
  }

  export type FavoriteMealOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    mealId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    meal?: MealOrderByWithRelationInput
  }

  export type FavoriteMealWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_mealId?: FavoriteMealUserIdMealIdCompoundUniqueInput
    AND?: FavoriteMealWhereInput | FavoriteMealWhereInput[]
    OR?: FavoriteMealWhereInput[]
    NOT?: FavoriteMealWhereInput | FavoriteMealWhereInput[]
    userId?: StringFilter<"FavoriteMeal"> | string
    mealId?: StringFilter<"FavoriteMeal"> | string
    createdAt?: DateTimeFilter<"FavoriteMeal"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
  }, "id" | "userId_mealId">

  export type FavoriteMealOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    mealId?: SortOrder
    createdAt?: SortOrder
    _count?: FavoriteMealCountOrderByAggregateInput
    _max?: FavoriteMealMaxOrderByAggregateInput
    _min?: FavoriteMealMinOrderByAggregateInput
  }

  export type FavoriteMealScalarWhereWithAggregatesInput = {
    AND?: FavoriteMealScalarWhereWithAggregatesInput | FavoriteMealScalarWhereWithAggregatesInput[]
    OR?: FavoriteMealScalarWhereWithAggregatesInput[]
    NOT?: FavoriteMealScalarWhereWithAggregatesInput | FavoriteMealScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FavoriteMeal"> | string
    userId?: StringWithAggregatesFilter<"FavoriteMeal"> | string
    mealId?: StringWithAggregatesFilter<"FavoriteMeal"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FavoriteMeal"> | Date | string
  }

  export type PlanWhereInput = {
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    id?: StringFilter<"Plan"> | string
    name?: StringFilter<"Plan"> | string
    startDate?: DateTimeFilter<"Plan"> | Date | string
    endDate?: DateTimeFilter<"Plan"> | Date | string
    userId?: StringFilter<"Plan"> | string
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    updatedAt?: DateTimeFilter<"Plan"> | Date | string
    notes?: StringNullableFilter<"Plan"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    planMeals?: PlanMealListRelationFilter
  }

  export type PlanOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    planMeals?: PlanMealOrderByRelationAggregateInput
  }

  export type PlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    name?: StringFilter<"Plan"> | string
    startDate?: DateTimeFilter<"Plan"> | Date | string
    endDate?: DateTimeFilter<"Plan"> | Date | string
    userId?: StringFilter<"Plan"> | string
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    updatedAt?: DateTimeFilter<"Plan"> | Date | string
    notes?: StringNullableFilter<"Plan"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    planMeals?: PlanMealListRelationFilter
  }, "id">

  export type PlanOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: PlanCountOrderByAggregateInput
    _max?: PlanMaxOrderByAggregateInput
    _min?: PlanMinOrderByAggregateInput
  }

  export type PlanScalarWhereWithAggregatesInput = {
    AND?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    OR?: PlanScalarWhereWithAggregatesInput[]
    NOT?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Plan"> | string
    name?: StringWithAggregatesFilter<"Plan"> | string
    startDate?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
    userId?: StringWithAggregatesFilter<"Plan"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"Plan"> | string | null
  }

  export type PlanMealWhereInput = {
    AND?: PlanMealWhereInput | PlanMealWhereInput[]
    OR?: PlanMealWhereInput[]
    NOT?: PlanMealWhereInput | PlanMealWhereInput[]
    id?: StringFilter<"PlanMeal"> | string
    planId?: StringFilter<"PlanMeal"> | string
    mealId?: StringFilter<"PlanMeal"> | string
    date?: DateTimeFilter<"PlanMeal"> | Date | string
    mealTime?: StringFilter<"PlanMeal"> | string
    servings?: IntFilter<"PlanMeal"> | number
    notes?: StringNullableFilter<"PlanMeal"> | string | null
    createdAt?: DateTimeFilter<"PlanMeal"> | Date | string
    updatedAt?: DateTimeFilter<"PlanMeal"> | Date | string
    plan?: XOR<PlanScalarRelationFilter, PlanWhereInput>
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
  }

  export type PlanMealOrderByWithRelationInput = {
    id?: SortOrder
    planId?: SortOrder
    mealId?: SortOrder
    date?: SortOrder
    mealTime?: SortOrder
    servings?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    plan?: PlanOrderByWithRelationInput
    meal?: MealOrderByWithRelationInput
  }

  export type PlanMealWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlanMealWhereInput | PlanMealWhereInput[]
    OR?: PlanMealWhereInput[]
    NOT?: PlanMealWhereInput | PlanMealWhereInput[]
    planId?: StringFilter<"PlanMeal"> | string
    mealId?: StringFilter<"PlanMeal"> | string
    date?: DateTimeFilter<"PlanMeal"> | Date | string
    mealTime?: StringFilter<"PlanMeal"> | string
    servings?: IntFilter<"PlanMeal"> | number
    notes?: StringNullableFilter<"PlanMeal"> | string | null
    createdAt?: DateTimeFilter<"PlanMeal"> | Date | string
    updatedAt?: DateTimeFilter<"PlanMeal"> | Date | string
    plan?: XOR<PlanScalarRelationFilter, PlanWhereInput>
    meal?: XOR<MealScalarRelationFilter, MealWhereInput>
  }, "id">

  export type PlanMealOrderByWithAggregationInput = {
    id?: SortOrder
    planId?: SortOrder
    mealId?: SortOrder
    date?: SortOrder
    mealTime?: SortOrder
    servings?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlanMealCountOrderByAggregateInput
    _avg?: PlanMealAvgOrderByAggregateInput
    _max?: PlanMealMaxOrderByAggregateInput
    _min?: PlanMealMinOrderByAggregateInput
    _sum?: PlanMealSumOrderByAggregateInput
  }

  export type PlanMealScalarWhereWithAggregatesInput = {
    AND?: PlanMealScalarWhereWithAggregatesInput | PlanMealScalarWhereWithAggregatesInput[]
    OR?: PlanMealScalarWhereWithAggregatesInput[]
    NOT?: PlanMealScalarWhereWithAggregatesInput | PlanMealScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlanMeal"> | string
    planId?: StringWithAggregatesFilter<"PlanMeal"> | string
    mealId?: StringWithAggregatesFilter<"PlanMeal"> | string
    date?: DateTimeWithAggregatesFilter<"PlanMeal"> | Date | string
    mealTime?: StringWithAggregatesFilter<"PlanMeal"> | string
    servings?: IntWithAggregatesFilter<"PlanMeal"> | number
    notes?: StringNullableWithAggregatesFilter<"PlanMeal"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PlanMeal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PlanMeal"> | Date | string
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: StringFilter<"Profile"> | string
    name?: StringFilter<"Profile"> | string
    isActive?: BoolFilter<"Profile"> | boolean
    calories?: IntFilter<"Profile"> | number
    protein?: FloatFilter<"Profile"> | number
    carbs?: FloatFilter<"Profile"> | number
    fat?: FloatFilter<"Profile"> | number
    userId?: StringFilter<"Profile"> | string
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    dietaryNeeds?: StringNullableFilter<"Profile"> | string | null
    activityLevel?: StringNullableFilter<"Profile"> | string | null
    weightGoal?: StringNullableFilter<"Profile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    macroHistory?: MacroHistoryListRelationFilter
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dietaryNeeds?: SortOrderInput | SortOrder
    activityLevel?: SortOrderInput | SortOrder
    weightGoal?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    macroHistory?: MacroHistoryOrderByRelationAggregateInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    name?: StringFilter<"Profile"> | string
    isActive?: BoolFilter<"Profile"> | boolean
    calories?: IntFilter<"Profile"> | number
    protein?: FloatFilter<"Profile"> | number
    carbs?: FloatFilter<"Profile"> | number
    fat?: FloatFilter<"Profile"> | number
    userId?: StringFilter<"Profile"> | string
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    dietaryNeeds?: StringNullableFilter<"Profile"> | string | null
    activityLevel?: StringNullableFilter<"Profile"> | string | null
    weightGoal?: StringNullableFilter<"Profile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    macroHistory?: MacroHistoryListRelationFilter
  }, "id">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dietaryNeeds?: SortOrderInput | SortOrder
    activityLevel?: SortOrderInput | SortOrder
    weightGoal?: SortOrderInput | SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profile"> | string
    name?: StringWithAggregatesFilter<"Profile"> | string
    isActive?: BoolWithAggregatesFilter<"Profile"> | boolean
    calories?: IntWithAggregatesFilter<"Profile"> | number
    protein?: FloatWithAggregatesFilter<"Profile"> | number
    carbs?: FloatWithAggregatesFilter<"Profile"> | number
    fat?: FloatWithAggregatesFilter<"Profile"> | number
    userId?: StringWithAggregatesFilter<"Profile"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    dietaryNeeds?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    activityLevel?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    weightGoal?: StringNullableWithAggregatesFilter<"Profile"> | string | null
  }

  export type MacroHistoryWhereInput = {
    AND?: MacroHistoryWhereInput | MacroHistoryWhereInput[]
    OR?: MacroHistoryWhereInput[]
    NOT?: MacroHistoryWhereInput | MacroHistoryWhereInput[]
    id?: StringFilter<"MacroHistory"> | string
    date?: DateTimeFilter<"MacroHistory"> | Date | string
    calories?: IntFilter<"MacroHistory"> | number
    protein?: FloatFilter<"MacroHistory"> | number
    carbs?: FloatFilter<"MacroHistory"> | number
    fat?: FloatFilter<"MacroHistory"> | number
    weight?: FloatNullableFilter<"MacroHistory"> | number | null
    notes?: StringNullableFilter<"MacroHistory"> | string | null
    profileId?: StringFilter<"MacroHistory"> | string
    createdAt?: DateTimeFilter<"MacroHistory"> | Date | string
    updatedAt?: DateTimeFilter<"MacroHistory"> | Date | string
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }

  export type MacroHistoryOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    weight?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    profileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: ProfileOrderByWithRelationInput
  }

  export type MacroHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MacroHistoryWhereInput | MacroHistoryWhereInput[]
    OR?: MacroHistoryWhereInput[]
    NOT?: MacroHistoryWhereInput | MacroHistoryWhereInput[]
    date?: DateTimeFilter<"MacroHistory"> | Date | string
    calories?: IntFilter<"MacroHistory"> | number
    protein?: FloatFilter<"MacroHistory"> | number
    carbs?: FloatFilter<"MacroHistory"> | number
    fat?: FloatFilter<"MacroHistory"> | number
    weight?: FloatNullableFilter<"MacroHistory"> | number | null
    notes?: StringNullableFilter<"MacroHistory"> | string | null
    profileId?: StringFilter<"MacroHistory"> | string
    createdAt?: DateTimeFilter<"MacroHistory"> | Date | string
    updatedAt?: DateTimeFilter<"MacroHistory"> | Date | string
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }, "id">

  export type MacroHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    weight?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    profileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MacroHistoryCountOrderByAggregateInput
    _avg?: MacroHistoryAvgOrderByAggregateInput
    _max?: MacroHistoryMaxOrderByAggregateInput
    _min?: MacroHistoryMinOrderByAggregateInput
    _sum?: MacroHistorySumOrderByAggregateInput
  }

  export type MacroHistoryScalarWhereWithAggregatesInput = {
    AND?: MacroHistoryScalarWhereWithAggregatesInput | MacroHistoryScalarWhereWithAggregatesInput[]
    OR?: MacroHistoryScalarWhereWithAggregatesInput[]
    NOT?: MacroHistoryScalarWhereWithAggregatesInput | MacroHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MacroHistory"> | string
    date?: DateTimeWithAggregatesFilter<"MacroHistory"> | Date | string
    calories?: IntWithAggregatesFilter<"MacroHistory"> | number
    protein?: FloatWithAggregatesFilter<"MacroHistory"> | number
    carbs?: FloatWithAggregatesFilter<"MacroHistory"> | number
    fat?: FloatWithAggregatesFilter<"MacroHistory"> | number
    weight?: FloatNullableWithAggregatesFilter<"MacroHistory"> | number | null
    notes?: StringNullableWithAggregatesFilter<"MacroHistory"> | string | null
    profileId?: StringWithAggregatesFilter<"MacroHistory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MacroHistory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MacroHistory"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    b2cId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    profiles?: ProfileCreateNestedManyWithoutUserInput
    favorites?: FavoriteMealCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    b2cId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteMealUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    b2cId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    profiles?: ProfileUpdateManyWithoutUserNestedInput
    favorites?: FavoriteMealUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    b2cId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteMealUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    b2cId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    b2cId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    b2cId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealCreateInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    user: UserCreateNestedOneWithoutMealsInput
    planMeals?: PlanMealCreateNestedManyWithoutMealInput
    ingredients?: MealIngredientCreateNestedManyWithoutMealInput
    categories?: MealCategoryCreateNestedManyWithoutMealInput
    tags?: MealTagCreateNestedManyWithoutMealInput
    favorited?: FavoriteMealCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    planMeals?: PlanMealUncheckedCreateNestedManyWithoutMealInput
    ingredients?: MealIngredientUncheckedCreateNestedManyWithoutMealInput
    categories?: MealCategoryUncheckedCreateNestedManyWithoutMealInput
    tags?: MealTagUncheckedCreateNestedManyWithoutMealInput
    favorited?: FavoriteMealUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutMealsNestedInput
    planMeals?: PlanMealUpdateManyWithoutMealNestedInput
    ingredients?: MealIngredientUpdateManyWithoutMealNestedInput
    categories?: MealCategoryUpdateManyWithoutMealNestedInput
    tags?: MealTagUpdateManyWithoutMealNestedInput
    favorited?: FavoriteMealUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    planMeals?: PlanMealUncheckedUpdateManyWithoutMealNestedInput
    ingredients?: MealIngredientUncheckedUpdateManyWithoutMealNestedInput
    categories?: MealCategoryUncheckedUpdateManyWithoutMealNestedInput
    tags?: MealTagUncheckedUpdateManyWithoutMealNestedInput
    favorited?: FavoriteMealUncheckedUpdateManyWithoutMealNestedInput
  }

  export type MealCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
  }

  export type MealUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MealUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IngredientCreateInput = {
    id?: string
    name: string
    calories: number
    protein: number
    carbs: number
    fat: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealIngredientCreateNestedManyWithoutIngredientInput
  }

  export type IngredientUncheckedCreateInput = {
    id?: string
    name: string
    calories: number
    protein: number
    carbs: number
    fat: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealIngredientUncheckedCreateNestedManyWithoutIngredientInput
  }

  export type IngredientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealIngredientUpdateManyWithoutIngredientNestedInput
  }

  export type IngredientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealIngredientUncheckedUpdateManyWithoutIngredientNestedInput
  }

  export type IngredientCreateManyInput = {
    id?: string
    name: string
    calories: number
    protein: number
    carbs: number
    fat: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngredientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngredientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealIngredientCreateInput = {
    id?: string
    amount: number
    unit: string
    notes?: string | null
    meal: MealCreateNestedOneWithoutIngredientsInput
    ingredient: IngredientCreateNestedOneWithoutMealsInput
  }

  export type MealIngredientUncheckedCreateInput = {
    id?: string
    mealId: string
    ingredientId: string
    amount: number
    unit: string
    notes?: string | null
  }

  export type MealIngredientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meal?: MealUpdateOneRequiredWithoutIngredientsNestedInput
    ingredient?: IngredientUpdateOneRequiredWithoutMealsNestedInput
  }

  export type MealIngredientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    ingredientId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MealIngredientCreateManyInput = {
    id?: string
    mealId: string
    ingredientId: string
    amount: number
    unit: string
    notes?: string | null
  }

  export type MealIngredientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MealIngredientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    ingredientId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealCategoryCreateInput = {
    id?: string
    meal: MealCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutMealsInput
  }

  export type MealCategoryUncheckedCreateInput = {
    id?: string
    mealId: string
    categoryId: string
  }

  export type MealCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    meal?: MealUpdateOneRequiredWithoutCategoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutMealsNestedInput
  }

  export type MealCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type MealCategoryCreateManyInput = {
    id?: string
    mealId: string
    categoryId: string
  }

  export type MealCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type MealCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type TagCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealTagCreateInput = {
    id?: string
    meal: MealCreateNestedOneWithoutTagsInput
    tag: TagCreateNestedOneWithoutMealsInput
  }

  export type MealTagUncheckedCreateInput = {
    id?: string
    mealId: string
    tagId: string
  }

  export type MealTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    meal?: MealUpdateOneRequiredWithoutTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutMealsNestedInput
  }

  export type MealTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type MealTagCreateManyInput = {
    id?: string
    mealId: string
    tagId: string
  }

  export type MealTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type MealTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type FavoriteMealCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoritesInput
    meal: MealCreateNestedOneWithoutFavoritedInput
  }

  export type FavoriteMealUncheckedCreateInput = {
    id?: string
    userId: string
    mealId: string
    createdAt?: Date | string
  }

  export type FavoriteMealUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoritesNestedInput
    meal?: MealUpdateOneRequiredWithoutFavoritedNestedInput
  }

  export type FavoriteMealUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteMealCreateManyInput = {
    id?: string
    userId: string
    mealId: string
    createdAt?: Date | string
  }

  export type FavoriteMealUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteMealUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanCreateInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    user: UserCreateNestedOneWithoutPlansInput
    planMeals?: PlanMealCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    planMeals?: PlanMealUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPlansNestedInput
    planMeals?: PlanMealUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    planMeals?: PlanMealUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type PlanCreateManyInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
  }

  export type PlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlanMealCreateInput = {
    id?: string
    date: Date | string
    mealTime: string
    servings: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    plan: PlanCreateNestedOneWithoutPlanMealsInput
    meal: MealCreateNestedOneWithoutPlanMealsInput
  }

  export type PlanMealUncheckedCreateInput = {
    id?: string
    planId: string
    mealId: string
    date: Date | string
    mealTime: string
    servings: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlanMealUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealTime?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: PlanUpdateOneRequiredWithoutPlanMealsNestedInput
    meal?: MealUpdateOneRequiredWithoutPlanMealsNestedInput
  }

  export type PlanMealUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealTime?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanMealCreateManyInput = {
    id?: string
    planId: string
    mealId: string
    date: Date | string
    mealTime: string
    servings: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlanMealUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealTime?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanMealUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealTime?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateInput = {
    id?: string
    name: string
    isActive?: boolean
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dietaryNeeds?: string | null
    activityLevel?: string | null
    weightGoal?: string | null
    user: UserCreateNestedOneWithoutProfilesInput
    macroHistory?: MacroHistoryCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    name: string
    isActive?: boolean
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dietaryNeeds?: string | null
    activityLevel?: string | null
    weightGoal?: string | null
    macroHistory?: MacroHistoryUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dietaryNeeds?: NullableStringFieldUpdateOperationsInput | string | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    weightGoal?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfilesNestedInput
    macroHistory?: MacroHistoryUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dietaryNeeds?: NullableStringFieldUpdateOperationsInput | string | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    weightGoal?: NullableStringFieldUpdateOperationsInput | string | null
    macroHistory?: MacroHistoryUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileCreateManyInput = {
    id?: string
    name: string
    isActive?: boolean
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dietaryNeeds?: string | null
    activityLevel?: string | null
    weightGoal?: string | null
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dietaryNeeds?: NullableStringFieldUpdateOperationsInput | string | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    weightGoal?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dietaryNeeds?: NullableStringFieldUpdateOperationsInput | string | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    weightGoal?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MacroHistoryCreateInput = {
    id?: string
    date?: Date | string
    calories: number
    protein: number
    carbs: number
    fat: number
    weight?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile: ProfileCreateNestedOneWithoutMacroHistoryInput
  }

  export type MacroHistoryUncheckedCreateInput = {
    id?: string
    date?: Date | string
    calories: number
    protein: number
    carbs: number
    fat: number
    weight?: number | null
    notes?: string | null
    profileId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MacroHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutMacroHistoryNestedInput
  }

  export type MacroHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    profileId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MacroHistoryCreateManyInput = {
    id?: string
    date?: Date | string
    calories: number
    protein: number
    carbs: number
    fat: number
    weight?: number | null
    notes?: string | null
    profileId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MacroHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MacroHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    profileId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MealListRelationFilter = {
    every?: MealWhereInput
    some?: MealWhereInput
    none?: MealWhereInput
  }

  export type PlanListRelationFilter = {
    every?: PlanWhereInput
    some?: PlanWhereInput
    none?: PlanWhereInput
  }

  export type ProfileListRelationFilter = {
    every?: ProfileWhereInput
    some?: ProfileWhereInput
    none?: ProfileWhereInput
  }

  export type FavoriteMealListRelationFilter = {
    every?: FavoriteMealWhereInput
    some?: FavoriteMealWhereInput
    none?: FavoriteMealWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MealOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteMealOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    b2cId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    b2cId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    b2cId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PlanMealListRelationFilter = {
    every?: PlanMealWhereInput
    some?: PlanMealWhereInput
    none?: PlanMealWhereInput
  }

  export type MealIngredientListRelationFilter = {
    every?: MealIngredientWhereInput
    some?: MealIngredientWhereInput
    none?: MealIngredientWhereInput
  }

  export type MealCategoryListRelationFilter = {
    every?: MealCategoryWhereInput
    some?: MealCategoryWhereInput
    none?: MealCategoryWhereInput
  }

  export type MealTagListRelationFilter = {
    every?: MealTagWhereInput
    some?: MealTagWhereInput
    none?: MealTagWhereInput
  }

  export type PlanMealOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MealIngredientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MealCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MealTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MealCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    servingSize?: SortOrder
    difficulty?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
  }

  export type MealAvgOrderByAggregateInput = {
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
  }

  export type MealMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    servingSize?: SortOrder
    difficulty?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
  }

  export type MealMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    servingSize?: SortOrder
    difficulty?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
  }

  export type MealSumOrderByAggregateInput = {
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IngredientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IngredientAvgOrderByAggregateInput = {
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
  }

  export type IngredientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IngredientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IngredientSumOrderByAggregateInput = {
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
  }

  export type MealScalarRelationFilter = {
    is?: MealWhereInput
    isNot?: MealWhereInput
  }

  export type IngredientScalarRelationFilter = {
    is?: IngredientWhereInput
    isNot?: IngredientWhereInput
  }

  export type MealIngredientMealIdIngredientIdCompoundUniqueInput = {
    mealId: string
    ingredientId: string
  }

  export type MealIngredientCountOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    ingredientId?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    notes?: SortOrder
  }

  export type MealIngredientAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type MealIngredientMaxOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    ingredientId?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    notes?: SortOrder
  }

  export type MealIngredientMinOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    ingredientId?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    notes?: SortOrder
  }

  export type MealIngredientSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type MealCategoryMealIdCategoryIdCompoundUniqueInput = {
    mealId: string
    categoryId: string
  }

  export type MealCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    categoryId?: SortOrder
  }

  export type MealCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    categoryId?: SortOrder
  }

  export type MealCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    categoryId?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagScalarRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type MealTagMealIdTagIdCompoundUniqueInput = {
    mealId: string
    tagId: string
  }

  export type MealTagCountOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    tagId?: SortOrder
  }

  export type MealTagMaxOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    tagId?: SortOrder
  }

  export type MealTagMinOrderByAggregateInput = {
    id?: SortOrder
    mealId?: SortOrder
    tagId?: SortOrder
  }

  export type FavoriteMealUserIdMealIdCompoundUniqueInput = {
    userId: string
    mealId: string
  }

  export type FavoriteMealCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mealId?: SortOrder
    createdAt?: SortOrder
  }

  export type FavoriteMealMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mealId?: SortOrder
    createdAt?: SortOrder
  }

  export type FavoriteMealMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mealId?: SortOrder
    createdAt?: SortOrder
  }

  export type PlanCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
  }

  export type PlanMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
  }

  export type PlanMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
  }

  export type PlanScalarRelationFilter = {
    is?: PlanWhereInput
    isNot?: PlanWhereInput
  }

  export type PlanMealCountOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    mealId?: SortOrder
    date?: SortOrder
    mealTime?: SortOrder
    servings?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanMealAvgOrderByAggregateInput = {
    servings?: SortOrder
  }

  export type PlanMealMaxOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    mealId?: SortOrder
    date?: SortOrder
    mealTime?: SortOrder
    servings?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanMealMinOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    mealId?: SortOrder
    date?: SortOrder
    mealTime?: SortOrder
    servings?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanMealSumOrderByAggregateInput = {
    servings?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MacroHistoryListRelationFilter = {
    every?: MacroHistoryWhereInput
    some?: MacroHistoryWhereInput
    none?: MacroHistoryWhereInput
  }

  export type MacroHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dietaryNeeds?: SortOrder
    activityLevel?: SortOrder
    weightGoal?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dietaryNeeds?: SortOrder
    activityLevel?: SortOrder
    weightGoal?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dietaryNeeds?: SortOrder
    activityLevel?: SortOrder
    weightGoal?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ProfileScalarRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type MacroHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    weight?: SortOrder
    notes?: SortOrder
    profileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MacroHistoryAvgOrderByAggregateInput = {
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    weight?: SortOrder
  }

  export type MacroHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    weight?: SortOrder
    notes?: SortOrder
    profileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MacroHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    weight?: SortOrder
    notes?: SortOrder
    profileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MacroHistorySumOrderByAggregateInput = {
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    weight?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type MealCreateNestedManyWithoutUserInput = {
    create?: XOR<MealCreateWithoutUserInput, MealUncheckedCreateWithoutUserInput> | MealCreateWithoutUserInput[] | MealUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MealCreateOrConnectWithoutUserInput | MealCreateOrConnectWithoutUserInput[]
    createMany?: MealCreateManyUserInputEnvelope
    connect?: MealWhereUniqueInput | MealWhereUniqueInput[]
  }

  export type PlanCreateNestedManyWithoutUserInput = {
    create?: XOR<PlanCreateWithoutUserInput, PlanUncheckedCreateWithoutUserInput> | PlanCreateWithoutUserInput[] | PlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutUserInput | PlanCreateOrConnectWithoutUserInput[]
    createMany?: PlanCreateManyUserInputEnvelope
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
  }

  export type ProfileCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type FavoriteMealCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteMealCreateWithoutUserInput, FavoriteMealUncheckedCreateWithoutUserInput> | FavoriteMealCreateWithoutUserInput[] | FavoriteMealUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteMealCreateOrConnectWithoutUserInput | FavoriteMealCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteMealCreateManyUserInputEnvelope
    connect?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
  }

  export type MealUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MealCreateWithoutUserInput, MealUncheckedCreateWithoutUserInput> | MealCreateWithoutUserInput[] | MealUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MealCreateOrConnectWithoutUserInput | MealCreateOrConnectWithoutUserInput[]
    createMany?: MealCreateManyUserInputEnvelope
    connect?: MealWhereUniqueInput | MealWhereUniqueInput[]
  }

  export type PlanUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PlanCreateWithoutUserInput, PlanUncheckedCreateWithoutUserInput> | PlanCreateWithoutUserInput[] | PlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutUserInput | PlanCreateOrConnectWithoutUserInput[]
    createMany?: PlanCreateManyUserInputEnvelope
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type FavoriteMealUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteMealCreateWithoutUserInput, FavoriteMealUncheckedCreateWithoutUserInput> | FavoriteMealCreateWithoutUserInput[] | FavoriteMealUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteMealCreateOrConnectWithoutUserInput | FavoriteMealCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteMealCreateManyUserInputEnvelope
    connect?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MealUpdateManyWithoutUserNestedInput = {
    create?: XOR<MealCreateWithoutUserInput, MealUncheckedCreateWithoutUserInput> | MealCreateWithoutUserInput[] | MealUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MealCreateOrConnectWithoutUserInput | MealCreateOrConnectWithoutUserInput[]
    upsert?: MealUpsertWithWhereUniqueWithoutUserInput | MealUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MealCreateManyUserInputEnvelope
    set?: MealWhereUniqueInput | MealWhereUniqueInput[]
    disconnect?: MealWhereUniqueInput | MealWhereUniqueInput[]
    delete?: MealWhereUniqueInput | MealWhereUniqueInput[]
    connect?: MealWhereUniqueInput | MealWhereUniqueInput[]
    update?: MealUpdateWithWhereUniqueWithoutUserInput | MealUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MealUpdateManyWithWhereWithoutUserInput | MealUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MealScalarWhereInput | MealScalarWhereInput[]
  }

  export type PlanUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlanCreateWithoutUserInput, PlanUncheckedCreateWithoutUserInput> | PlanCreateWithoutUserInput[] | PlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutUserInput | PlanCreateOrConnectWithoutUserInput[]
    upsert?: PlanUpsertWithWhereUniqueWithoutUserInput | PlanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlanCreateManyUserInputEnvelope
    set?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    disconnect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    delete?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    update?: PlanUpdateWithWhereUniqueWithoutUserInput | PlanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlanUpdateManyWithWhereWithoutUserInput | PlanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlanScalarWhereInput | PlanScalarWhereInput[]
  }

  export type ProfileUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUserInput | ProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUserInput | ProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUserInput | ProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type FavoriteMealUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteMealCreateWithoutUserInput, FavoriteMealUncheckedCreateWithoutUserInput> | FavoriteMealCreateWithoutUserInput[] | FavoriteMealUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteMealCreateOrConnectWithoutUserInput | FavoriteMealCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteMealUpsertWithWhereUniqueWithoutUserInput | FavoriteMealUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteMealCreateManyUserInputEnvelope
    set?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    disconnect?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    delete?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    connect?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    update?: FavoriteMealUpdateWithWhereUniqueWithoutUserInput | FavoriteMealUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteMealUpdateManyWithWhereWithoutUserInput | FavoriteMealUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteMealScalarWhereInput | FavoriteMealScalarWhereInput[]
  }

  export type MealUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MealCreateWithoutUserInput, MealUncheckedCreateWithoutUserInput> | MealCreateWithoutUserInput[] | MealUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MealCreateOrConnectWithoutUserInput | MealCreateOrConnectWithoutUserInput[]
    upsert?: MealUpsertWithWhereUniqueWithoutUserInput | MealUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MealCreateManyUserInputEnvelope
    set?: MealWhereUniqueInput | MealWhereUniqueInput[]
    disconnect?: MealWhereUniqueInput | MealWhereUniqueInput[]
    delete?: MealWhereUniqueInput | MealWhereUniqueInput[]
    connect?: MealWhereUniqueInput | MealWhereUniqueInput[]
    update?: MealUpdateWithWhereUniqueWithoutUserInput | MealUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MealUpdateManyWithWhereWithoutUserInput | MealUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MealScalarWhereInput | MealScalarWhereInput[]
  }

  export type PlanUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlanCreateWithoutUserInput, PlanUncheckedCreateWithoutUserInput> | PlanCreateWithoutUserInput[] | PlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutUserInput | PlanCreateOrConnectWithoutUserInput[]
    upsert?: PlanUpsertWithWhereUniqueWithoutUserInput | PlanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlanCreateManyUserInputEnvelope
    set?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    disconnect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    delete?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    update?: PlanUpdateWithWhereUniqueWithoutUserInput | PlanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlanUpdateManyWithWhereWithoutUserInput | PlanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlanScalarWhereInput | PlanScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUserInput | ProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUserInput | ProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUserInput | ProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type FavoriteMealUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteMealCreateWithoutUserInput, FavoriteMealUncheckedCreateWithoutUserInput> | FavoriteMealCreateWithoutUserInput[] | FavoriteMealUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteMealCreateOrConnectWithoutUserInput | FavoriteMealCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteMealUpsertWithWhereUniqueWithoutUserInput | FavoriteMealUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteMealCreateManyUserInputEnvelope
    set?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    disconnect?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    delete?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    connect?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    update?: FavoriteMealUpdateWithWhereUniqueWithoutUserInput | FavoriteMealUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteMealUpdateManyWithWhereWithoutUserInput | FavoriteMealUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteMealScalarWhereInput | FavoriteMealScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMealsInput = {
    create?: XOR<UserCreateWithoutMealsInput, UserUncheckedCreateWithoutMealsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMealsInput
    connect?: UserWhereUniqueInput
  }

  export type PlanMealCreateNestedManyWithoutMealInput = {
    create?: XOR<PlanMealCreateWithoutMealInput, PlanMealUncheckedCreateWithoutMealInput> | PlanMealCreateWithoutMealInput[] | PlanMealUncheckedCreateWithoutMealInput[]
    connectOrCreate?: PlanMealCreateOrConnectWithoutMealInput | PlanMealCreateOrConnectWithoutMealInput[]
    createMany?: PlanMealCreateManyMealInputEnvelope
    connect?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
  }

  export type MealIngredientCreateNestedManyWithoutMealInput = {
    create?: XOR<MealIngredientCreateWithoutMealInput, MealIngredientUncheckedCreateWithoutMealInput> | MealIngredientCreateWithoutMealInput[] | MealIngredientUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealIngredientCreateOrConnectWithoutMealInput | MealIngredientCreateOrConnectWithoutMealInput[]
    createMany?: MealIngredientCreateManyMealInputEnvelope
    connect?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
  }

  export type MealCategoryCreateNestedManyWithoutMealInput = {
    create?: XOR<MealCategoryCreateWithoutMealInput, MealCategoryUncheckedCreateWithoutMealInput> | MealCategoryCreateWithoutMealInput[] | MealCategoryUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealCategoryCreateOrConnectWithoutMealInput | MealCategoryCreateOrConnectWithoutMealInput[]
    createMany?: MealCategoryCreateManyMealInputEnvelope
    connect?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
  }

  export type MealTagCreateNestedManyWithoutMealInput = {
    create?: XOR<MealTagCreateWithoutMealInput, MealTagUncheckedCreateWithoutMealInput> | MealTagCreateWithoutMealInput[] | MealTagUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealTagCreateOrConnectWithoutMealInput | MealTagCreateOrConnectWithoutMealInput[]
    createMany?: MealTagCreateManyMealInputEnvelope
    connect?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
  }

  export type FavoriteMealCreateNestedManyWithoutMealInput = {
    create?: XOR<FavoriteMealCreateWithoutMealInput, FavoriteMealUncheckedCreateWithoutMealInput> | FavoriteMealCreateWithoutMealInput[] | FavoriteMealUncheckedCreateWithoutMealInput[]
    connectOrCreate?: FavoriteMealCreateOrConnectWithoutMealInput | FavoriteMealCreateOrConnectWithoutMealInput[]
    createMany?: FavoriteMealCreateManyMealInputEnvelope
    connect?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
  }

  export type PlanMealUncheckedCreateNestedManyWithoutMealInput = {
    create?: XOR<PlanMealCreateWithoutMealInput, PlanMealUncheckedCreateWithoutMealInput> | PlanMealCreateWithoutMealInput[] | PlanMealUncheckedCreateWithoutMealInput[]
    connectOrCreate?: PlanMealCreateOrConnectWithoutMealInput | PlanMealCreateOrConnectWithoutMealInput[]
    createMany?: PlanMealCreateManyMealInputEnvelope
    connect?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
  }

  export type MealIngredientUncheckedCreateNestedManyWithoutMealInput = {
    create?: XOR<MealIngredientCreateWithoutMealInput, MealIngredientUncheckedCreateWithoutMealInput> | MealIngredientCreateWithoutMealInput[] | MealIngredientUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealIngredientCreateOrConnectWithoutMealInput | MealIngredientCreateOrConnectWithoutMealInput[]
    createMany?: MealIngredientCreateManyMealInputEnvelope
    connect?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
  }

  export type MealCategoryUncheckedCreateNestedManyWithoutMealInput = {
    create?: XOR<MealCategoryCreateWithoutMealInput, MealCategoryUncheckedCreateWithoutMealInput> | MealCategoryCreateWithoutMealInput[] | MealCategoryUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealCategoryCreateOrConnectWithoutMealInput | MealCategoryCreateOrConnectWithoutMealInput[]
    createMany?: MealCategoryCreateManyMealInputEnvelope
    connect?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
  }

  export type MealTagUncheckedCreateNestedManyWithoutMealInput = {
    create?: XOR<MealTagCreateWithoutMealInput, MealTagUncheckedCreateWithoutMealInput> | MealTagCreateWithoutMealInput[] | MealTagUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealTagCreateOrConnectWithoutMealInput | MealTagCreateOrConnectWithoutMealInput[]
    createMany?: MealTagCreateManyMealInputEnvelope
    connect?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
  }

  export type FavoriteMealUncheckedCreateNestedManyWithoutMealInput = {
    create?: XOR<FavoriteMealCreateWithoutMealInput, FavoriteMealUncheckedCreateWithoutMealInput> | FavoriteMealCreateWithoutMealInput[] | FavoriteMealUncheckedCreateWithoutMealInput[]
    connectOrCreate?: FavoriteMealCreateOrConnectWithoutMealInput | FavoriteMealCreateOrConnectWithoutMealInput[]
    createMany?: FavoriteMealCreateManyMealInputEnvelope
    connect?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutMealsNestedInput = {
    create?: XOR<UserCreateWithoutMealsInput, UserUncheckedCreateWithoutMealsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMealsInput
    upsert?: UserUpsertWithoutMealsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMealsInput, UserUpdateWithoutMealsInput>, UserUncheckedUpdateWithoutMealsInput>
  }

  export type PlanMealUpdateManyWithoutMealNestedInput = {
    create?: XOR<PlanMealCreateWithoutMealInput, PlanMealUncheckedCreateWithoutMealInput> | PlanMealCreateWithoutMealInput[] | PlanMealUncheckedCreateWithoutMealInput[]
    connectOrCreate?: PlanMealCreateOrConnectWithoutMealInput | PlanMealCreateOrConnectWithoutMealInput[]
    upsert?: PlanMealUpsertWithWhereUniqueWithoutMealInput | PlanMealUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: PlanMealCreateManyMealInputEnvelope
    set?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    disconnect?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    delete?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    connect?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    update?: PlanMealUpdateWithWhereUniqueWithoutMealInput | PlanMealUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: PlanMealUpdateManyWithWhereWithoutMealInput | PlanMealUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: PlanMealScalarWhereInput | PlanMealScalarWhereInput[]
  }

  export type MealIngredientUpdateManyWithoutMealNestedInput = {
    create?: XOR<MealIngredientCreateWithoutMealInput, MealIngredientUncheckedCreateWithoutMealInput> | MealIngredientCreateWithoutMealInput[] | MealIngredientUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealIngredientCreateOrConnectWithoutMealInput | MealIngredientCreateOrConnectWithoutMealInput[]
    upsert?: MealIngredientUpsertWithWhereUniqueWithoutMealInput | MealIngredientUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: MealIngredientCreateManyMealInputEnvelope
    set?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    disconnect?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    delete?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    connect?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    update?: MealIngredientUpdateWithWhereUniqueWithoutMealInput | MealIngredientUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: MealIngredientUpdateManyWithWhereWithoutMealInput | MealIngredientUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: MealIngredientScalarWhereInput | MealIngredientScalarWhereInput[]
  }

  export type MealCategoryUpdateManyWithoutMealNestedInput = {
    create?: XOR<MealCategoryCreateWithoutMealInput, MealCategoryUncheckedCreateWithoutMealInput> | MealCategoryCreateWithoutMealInput[] | MealCategoryUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealCategoryCreateOrConnectWithoutMealInput | MealCategoryCreateOrConnectWithoutMealInput[]
    upsert?: MealCategoryUpsertWithWhereUniqueWithoutMealInput | MealCategoryUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: MealCategoryCreateManyMealInputEnvelope
    set?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    disconnect?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    delete?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    connect?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    update?: MealCategoryUpdateWithWhereUniqueWithoutMealInput | MealCategoryUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: MealCategoryUpdateManyWithWhereWithoutMealInput | MealCategoryUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: MealCategoryScalarWhereInput | MealCategoryScalarWhereInput[]
  }

  export type MealTagUpdateManyWithoutMealNestedInput = {
    create?: XOR<MealTagCreateWithoutMealInput, MealTagUncheckedCreateWithoutMealInput> | MealTagCreateWithoutMealInput[] | MealTagUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealTagCreateOrConnectWithoutMealInput | MealTagCreateOrConnectWithoutMealInput[]
    upsert?: MealTagUpsertWithWhereUniqueWithoutMealInput | MealTagUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: MealTagCreateManyMealInputEnvelope
    set?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    disconnect?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    delete?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    connect?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    update?: MealTagUpdateWithWhereUniqueWithoutMealInput | MealTagUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: MealTagUpdateManyWithWhereWithoutMealInput | MealTagUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: MealTagScalarWhereInput | MealTagScalarWhereInput[]
  }

  export type FavoriteMealUpdateManyWithoutMealNestedInput = {
    create?: XOR<FavoriteMealCreateWithoutMealInput, FavoriteMealUncheckedCreateWithoutMealInput> | FavoriteMealCreateWithoutMealInput[] | FavoriteMealUncheckedCreateWithoutMealInput[]
    connectOrCreate?: FavoriteMealCreateOrConnectWithoutMealInput | FavoriteMealCreateOrConnectWithoutMealInput[]
    upsert?: FavoriteMealUpsertWithWhereUniqueWithoutMealInput | FavoriteMealUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: FavoriteMealCreateManyMealInputEnvelope
    set?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    disconnect?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    delete?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    connect?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    update?: FavoriteMealUpdateWithWhereUniqueWithoutMealInput | FavoriteMealUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: FavoriteMealUpdateManyWithWhereWithoutMealInput | FavoriteMealUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: FavoriteMealScalarWhereInput | FavoriteMealScalarWhereInput[]
  }

  export type PlanMealUncheckedUpdateManyWithoutMealNestedInput = {
    create?: XOR<PlanMealCreateWithoutMealInput, PlanMealUncheckedCreateWithoutMealInput> | PlanMealCreateWithoutMealInput[] | PlanMealUncheckedCreateWithoutMealInput[]
    connectOrCreate?: PlanMealCreateOrConnectWithoutMealInput | PlanMealCreateOrConnectWithoutMealInput[]
    upsert?: PlanMealUpsertWithWhereUniqueWithoutMealInput | PlanMealUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: PlanMealCreateManyMealInputEnvelope
    set?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    disconnect?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    delete?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    connect?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    update?: PlanMealUpdateWithWhereUniqueWithoutMealInput | PlanMealUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: PlanMealUpdateManyWithWhereWithoutMealInput | PlanMealUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: PlanMealScalarWhereInput | PlanMealScalarWhereInput[]
  }

  export type MealIngredientUncheckedUpdateManyWithoutMealNestedInput = {
    create?: XOR<MealIngredientCreateWithoutMealInput, MealIngredientUncheckedCreateWithoutMealInput> | MealIngredientCreateWithoutMealInput[] | MealIngredientUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealIngredientCreateOrConnectWithoutMealInput | MealIngredientCreateOrConnectWithoutMealInput[]
    upsert?: MealIngredientUpsertWithWhereUniqueWithoutMealInput | MealIngredientUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: MealIngredientCreateManyMealInputEnvelope
    set?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    disconnect?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    delete?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    connect?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    update?: MealIngredientUpdateWithWhereUniqueWithoutMealInput | MealIngredientUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: MealIngredientUpdateManyWithWhereWithoutMealInput | MealIngredientUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: MealIngredientScalarWhereInput | MealIngredientScalarWhereInput[]
  }

  export type MealCategoryUncheckedUpdateManyWithoutMealNestedInput = {
    create?: XOR<MealCategoryCreateWithoutMealInput, MealCategoryUncheckedCreateWithoutMealInput> | MealCategoryCreateWithoutMealInput[] | MealCategoryUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealCategoryCreateOrConnectWithoutMealInput | MealCategoryCreateOrConnectWithoutMealInput[]
    upsert?: MealCategoryUpsertWithWhereUniqueWithoutMealInput | MealCategoryUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: MealCategoryCreateManyMealInputEnvelope
    set?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    disconnect?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    delete?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    connect?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    update?: MealCategoryUpdateWithWhereUniqueWithoutMealInput | MealCategoryUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: MealCategoryUpdateManyWithWhereWithoutMealInput | MealCategoryUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: MealCategoryScalarWhereInput | MealCategoryScalarWhereInput[]
  }

  export type MealTagUncheckedUpdateManyWithoutMealNestedInput = {
    create?: XOR<MealTagCreateWithoutMealInput, MealTagUncheckedCreateWithoutMealInput> | MealTagCreateWithoutMealInput[] | MealTagUncheckedCreateWithoutMealInput[]
    connectOrCreate?: MealTagCreateOrConnectWithoutMealInput | MealTagCreateOrConnectWithoutMealInput[]
    upsert?: MealTagUpsertWithWhereUniqueWithoutMealInput | MealTagUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: MealTagCreateManyMealInputEnvelope
    set?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    disconnect?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    delete?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    connect?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    update?: MealTagUpdateWithWhereUniqueWithoutMealInput | MealTagUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: MealTagUpdateManyWithWhereWithoutMealInput | MealTagUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: MealTagScalarWhereInput | MealTagScalarWhereInput[]
  }

  export type FavoriteMealUncheckedUpdateManyWithoutMealNestedInput = {
    create?: XOR<FavoriteMealCreateWithoutMealInput, FavoriteMealUncheckedCreateWithoutMealInput> | FavoriteMealCreateWithoutMealInput[] | FavoriteMealUncheckedCreateWithoutMealInput[]
    connectOrCreate?: FavoriteMealCreateOrConnectWithoutMealInput | FavoriteMealCreateOrConnectWithoutMealInput[]
    upsert?: FavoriteMealUpsertWithWhereUniqueWithoutMealInput | FavoriteMealUpsertWithWhereUniqueWithoutMealInput[]
    createMany?: FavoriteMealCreateManyMealInputEnvelope
    set?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    disconnect?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    delete?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    connect?: FavoriteMealWhereUniqueInput | FavoriteMealWhereUniqueInput[]
    update?: FavoriteMealUpdateWithWhereUniqueWithoutMealInput | FavoriteMealUpdateWithWhereUniqueWithoutMealInput[]
    updateMany?: FavoriteMealUpdateManyWithWhereWithoutMealInput | FavoriteMealUpdateManyWithWhereWithoutMealInput[]
    deleteMany?: FavoriteMealScalarWhereInput | FavoriteMealScalarWhereInput[]
  }

  export type MealIngredientCreateNestedManyWithoutIngredientInput = {
    create?: XOR<MealIngredientCreateWithoutIngredientInput, MealIngredientUncheckedCreateWithoutIngredientInput> | MealIngredientCreateWithoutIngredientInput[] | MealIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: MealIngredientCreateOrConnectWithoutIngredientInput | MealIngredientCreateOrConnectWithoutIngredientInput[]
    createMany?: MealIngredientCreateManyIngredientInputEnvelope
    connect?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
  }

  export type MealIngredientUncheckedCreateNestedManyWithoutIngredientInput = {
    create?: XOR<MealIngredientCreateWithoutIngredientInput, MealIngredientUncheckedCreateWithoutIngredientInput> | MealIngredientCreateWithoutIngredientInput[] | MealIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: MealIngredientCreateOrConnectWithoutIngredientInput | MealIngredientCreateOrConnectWithoutIngredientInput[]
    createMany?: MealIngredientCreateManyIngredientInputEnvelope
    connect?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
  }

  export type MealIngredientUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<MealIngredientCreateWithoutIngredientInput, MealIngredientUncheckedCreateWithoutIngredientInput> | MealIngredientCreateWithoutIngredientInput[] | MealIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: MealIngredientCreateOrConnectWithoutIngredientInput | MealIngredientCreateOrConnectWithoutIngredientInput[]
    upsert?: MealIngredientUpsertWithWhereUniqueWithoutIngredientInput | MealIngredientUpsertWithWhereUniqueWithoutIngredientInput[]
    createMany?: MealIngredientCreateManyIngredientInputEnvelope
    set?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    disconnect?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    delete?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    connect?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    update?: MealIngredientUpdateWithWhereUniqueWithoutIngredientInput | MealIngredientUpdateWithWhereUniqueWithoutIngredientInput[]
    updateMany?: MealIngredientUpdateManyWithWhereWithoutIngredientInput | MealIngredientUpdateManyWithWhereWithoutIngredientInput[]
    deleteMany?: MealIngredientScalarWhereInput | MealIngredientScalarWhereInput[]
  }

  export type MealIngredientUncheckedUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<MealIngredientCreateWithoutIngredientInput, MealIngredientUncheckedCreateWithoutIngredientInput> | MealIngredientCreateWithoutIngredientInput[] | MealIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: MealIngredientCreateOrConnectWithoutIngredientInput | MealIngredientCreateOrConnectWithoutIngredientInput[]
    upsert?: MealIngredientUpsertWithWhereUniqueWithoutIngredientInput | MealIngredientUpsertWithWhereUniqueWithoutIngredientInput[]
    createMany?: MealIngredientCreateManyIngredientInputEnvelope
    set?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    disconnect?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    delete?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    connect?: MealIngredientWhereUniqueInput | MealIngredientWhereUniqueInput[]
    update?: MealIngredientUpdateWithWhereUniqueWithoutIngredientInput | MealIngredientUpdateWithWhereUniqueWithoutIngredientInput[]
    updateMany?: MealIngredientUpdateManyWithWhereWithoutIngredientInput | MealIngredientUpdateManyWithWhereWithoutIngredientInput[]
    deleteMany?: MealIngredientScalarWhereInput | MealIngredientScalarWhereInput[]
  }

  export type MealCreateNestedOneWithoutIngredientsInput = {
    create?: XOR<MealCreateWithoutIngredientsInput, MealUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: MealCreateOrConnectWithoutIngredientsInput
    connect?: MealWhereUniqueInput
  }

  export type IngredientCreateNestedOneWithoutMealsInput = {
    create?: XOR<IngredientCreateWithoutMealsInput, IngredientUncheckedCreateWithoutMealsInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutMealsInput
    connect?: IngredientWhereUniqueInput
  }

  export type MealUpdateOneRequiredWithoutIngredientsNestedInput = {
    create?: XOR<MealCreateWithoutIngredientsInput, MealUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: MealCreateOrConnectWithoutIngredientsInput
    upsert?: MealUpsertWithoutIngredientsInput
    connect?: MealWhereUniqueInput
    update?: XOR<XOR<MealUpdateToOneWithWhereWithoutIngredientsInput, MealUpdateWithoutIngredientsInput>, MealUncheckedUpdateWithoutIngredientsInput>
  }

  export type IngredientUpdateOneRequiredWithoutMealsNestedInput = {
    create?: XOR<IngredientCreateWithoutMealsInput, IngredientUncheckedCreateWithoutMealsInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutMealsInput
    upsert?: IngredientUpsertWithoutMealsInput
    connect?: IngredientWhereUniqueInput
    update?: XOR<XOR<IngredientUpdateToOneWithWhereWithoutMealsInput, IngredientUpdateWithoutMealsInput>, IngredientUncheckedUpdateWithoutMealsInput>
  }

  export type MealCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MealCategoryCreateWithoutCategoryInput, MealCategoryUncheckedCreateWithoutCategoryInput> | MealCategoryCreateWithoutCategoryInput[] | MealCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MealCategoryCreateOrConnectWithoutCategoryInput | MealCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: MealCategoryCreateManyCategoryInputEnvelope
    connect?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
  }

  export type MealCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MealCategoryCreateWithoutCategoryInput, MealCategoryUncheckedCreateWithoutCategoryInput> | MealCategoryCreateWithoutCategoryInput[] | MealCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MealCategoryCreateOrConnectWithoutCategoryInput | MealCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: MealCategoryCreateManyCategoryInputEnvelope
    connect?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
  }

  export type MealCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MealCategoryCreateWithoutCategoryInput, MealCategoryUncheckedCreateWithoutCategoryInput> | MealCategoryCreateWithoutCategoryInput[] | MealCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MealCategoryCreateOrConnectWithoutCategoryInput | MealCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: MealCategoryUpsertWithWhereUniqueWithoutCategoryInput | MealCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MealCategoryCreateManyCategoryInputEnvelope
    set?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    disconnect?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    delete?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    connect?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    update?: MealCategoryUpdateWithWhereUniqueWithoutCategoryInput | MealCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MealCategoryUpdateManyWithWhereWithoutCategoryInput | MealCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MealCategoryScalarWhereInput | MealCategoryScalarWhereInput[]
  }

  export type MealCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MealCategoryCreateWithoutCategoryInput, MealCategoryUncheckedCreateWithoutCategoryInput> | MealCategoryCreateWithoutCategoryInput[] | MealCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MealCategoryCreateOrConnectWithoutCategoryInput | MealCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: MealCategoryUpsertWithWhereUniqueWithoutCategoryInput | MealCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MealCategoryCreateManyCategoryInputEnvelope
    set?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    disconnect?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    delete?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    connect?: MealCategoryWhereUniqueInput | MealCategoryWhereUniqueInput[]
    update?: MealCategoryUpdateWithWhereUniqueWithoutCategoryInput | MealCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MealCategoryUpdateManyWithWhereWithoutCategoryInput | MealCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MealCategoryScalarWhereInput | MealCategoryScalarWhereInput[]
  }

  export type MealCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<MealCreateWithoutCategoriesInput, MealUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: MealCreateOrConnectWithoutCategoriesInput
    connect?: MealWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutMealsInput = {
    create?: XOR<CategoryCreateWithoutMealsInput, CategoryUncheckedCreateWithoutMealsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutMealsInput
    connect?: CategoryWhereUniqueInput
  }

  export type MealUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<MealCreateWithoutCategoriesInput, MealUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: MealCreateOrConnectWithoutCategoriesInput
    upsert?: MealUpsertWithoutCategoriesInput
    connect?: MealWhereUniqueInput
    update?: XOR<XOR<MealUpdateToOneWithWhereWithoutCategoriesInput, MealUpdateWithoutCategoriesInput>, MealUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateOneRequiredWithoutMealsNestedInput = {
    create?: XOR<CategoryCreateWithoutMealsInput, CategoryUncheckedCreateWithoutMealsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutMealsInput
    upsert?: CategoryUpsertWithoutMealsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutMealsInput, CategoryUpdateWithoutMealsInput>, CategoryUncheckedUpdateWithoutMealsInput>
  }

  export type MealTagCreateNestedManyWithoutTagInput = {
    create?: XOR<MealTagCreateWithoutTagInput, MealTagUncheckedCreateWithoutTagInput> | MealTagCreateWithoutTagInput[] | MealTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: MealTagCreateOrConnectWithoutTagInput | MealTagCreateOrConnectWithoutTagInput[]
    createMany?: MealTagCreateManyTagInputEnvelope
    connect?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
  }

  export type MealTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<MealTagCreateWithoutTagInput, MealTagUncheckedCreateWithoutTagInput> | MealTagCreateWithoutTagInput[] | MealTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: MealTagCreateOrConnectWithoutTagInput | MealTagCreateOrConnectWithoutTagInput[]
    createMany?: MealTagCreateManyTagInputEnvelope
    connect?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
  }

  export type MealTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<MealTagCreateWithoutTagInput, MealTagUncheckedCreateWithoutTagInput> | MealTagCreateWithoutTagInput[] | MealTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: MealTagCreateOrConnectWithoutTagInput | MealTagCreateOrConnectWithoutTagInput[]
    upsert?: MealTagUpsertWithWhereUniqueWithoutTagInput | MealTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: MealTagCreateManyTagInputEnvelope
    set?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    disconnect?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    delete?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    connect?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    update?: MealTagUpdateWithWhereUniqueWithoutTagInput | MealTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: MealTagUpdateManyWithWhereWithoutTagInput | MealTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: MealTagScalarWhereInput | MealTagScalarWhereInput[]
  }

  export type MealTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<MealTagCreateWithoutTagInput, MealTagUncheckedCreateWithoutTagInput> | MealTagCreateWithoutTagInput[] | MealTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: MealTagCreateOrConnectWithoutTagInput | MealTagCreateOrConnectWithoutTagInput[]
    upsert?: MealTagUpsertWithWhereUniqueWithoutTagInput | MealTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: MealTagCreateManyTagInputEnvelope
    set?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    disconnect?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    delete?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    connect?: MealTagWhereUniqueInput | MealTagWhereUniqueInput[]
    update?: MealTagUpdateWithWhereUniqueWithoutTagInput | MealTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: MealTagUpdateManyWithWhereWithoutTagInput | MealTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: MealTagScalarWhereInput | MealTagScalarWhereInput[]
  }

  export type MealCreateNestedOneWithoutTagsInput = {
    create?: XOR<MealCreateWithoutTagsInput, MealUncheckedCreateWithoutTagsInput>
    connectOrCreate?: MealCreateOrConnectWithoutTagsInput
    connect?: MealWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutMealsInput = {
    create?: XOR<TagCreateWithoutMealsInput, TagUncheckedCreateWithoutMealsInput>
    connectOrCreate?: TagCreateOrConnectWithoutMealsInput
    connect?: TagWhereUniqueInput
  }

  export type MealUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<MealCreateWithoutTagsInput, MealUncheckedCreateWithoutTagsInput>
    connectOrCreate?: MealCreateOrConnectWithoutTagsInput
    upsert?: MealUpsertWithoutTagsInput
    connect?: MealWhereUniqueInput
    update?: XOR<XOR<MealUpdateToOneWithWhereWithoutTagsInput, MealUpdateWithoutTagsInput>, MealUncheckedUpdateWithoutTagsInput>
  }

  export type TagUpdateOneRequiredWithoutMealsNestedInput = {
    create?: XOR<TagCreateWithoutMealsInput, TagUncheckedCreateWithoutMealsInput>
    connectOrCreate?: TagCreateOrConnectWithoutMealsInput
    upsert?: TagUpsertWithoutMealsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutMealsInput, TagUpdateWithoutMealsInput>, TagUncheckedUpdateWithoutMealsInput>
  }

  export type UserCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    connect?: UserWhereUniqueInput
  }

  export type MealCreateNestedOneWithoutFavoritedInput = {
    create?: XOR<MealCreateWithoutFavoritedInput, MealUncheckedCreateWithoutFavoritedInput>
    connectOrCreate?: MealCreateOrConnectWithoutFavoritedInput
    connect?: MealWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavoritesNestedInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    upsert?: UserUpsertWithoutFavoritesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoritesInput, UserUpdateWithoutFavoritesInput>, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type MealUpdateOneRequiredWithoutFavoritedNestedInput = {
    create?: XOR<MealCreateWithoutFavoritedInput, MealUncheckedCreateWithoutFavoritedInput>
    connectOrCreate?: MealCreateOrConnectWithoutFavoritedInput
    upsert?: MealUpsertWithoutFavoritedInput
    connect?: MealWhereUniqueInput
    update?: XOR<XOR<MealUpdateToOneWithWhereWithoutFavoritedInput, MealUpdateWithoutFavoritedInput>, MealUncheckedUpdateWithoutFavoritedInput>
  }

  export type UserCreateNestedOneWithoutPlansInput = {
    create?: XOR<UserCreateWithoutPlansInput, UserUncheckedCreateWithoutPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlansInput
    connect?: UserWhereUniqueInput
  }

  export type PlanMealCreateNestedManyWithoutPlanInput = {
    create?: XOR<PlanMealCreateWithoutPlanInput, PlanMealUncheckedCreateWithoutPlanInput> | PlanMealCreateWithoutPlanInput[] | PlanMealUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanMealCreateOrConnectWithoutPlanInput | PlanMealCreateOrConnectWithoutPlanInput[]
    createMany?: PlanMealCreateManyPlanInputEnvelope
    connect?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
  }

  export type PlanMealUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<PlanMealCreateWithoutPlanInput, PlanMealUncheckedCreateWithoutPlanInput> | PlanMealCreateWithoutPlanInput[] | PlanMealUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanMealCreateOrConnectWithoutPlanInput | PlanMealCreateOrConnectWithoutPlanInput[]
    createMany?: PlanMealCreateManyPlanInputEnvelope
    connect?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPlansNestedInput = {
    create?: XOR<UserCreateWithoutPlansInput, UserUncheckedCreateWithoutPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlansInput
    upsert?: UserUpsertWithoutPlansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlansInput, UserUpdateWithoutPlansInput>, UserUncheckedUpdateWithoutPlansInput>
  }

  export type PlanMealUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PlanMealCreateWithoutPlanInput, PlanMealUncheckedCreateWithoutPlanInput> | PlanMealCreateWithoutPlanInput[] | PlanMealUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanMealCreateOrConnectWithoutPlanInput | PlanMealCreateOrConnectWithoutPlanInput[]
    upsert?: PlanMealUpsertWithWhereUniqueWithoutPlanInput | PlanMealUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: PlanMealCreateManyPlanInputEnvelope
    set?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    disconnect?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    delete?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    connect?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    update?: PlanMealUpdateWithWhereUniqueWithoutPlanInput | PlanMealUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PlanMealUpdateManyWithWhereWithoutPlanInput | PlanMealUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PlanMealScalarWhereInput | PlanMealScalarWhereInput[]
  }

  export type PlanMealUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PlanMealCreateWithoutPlanInput, PlanMealUncheckedCreateWithoutPlanInput> | PlanMealCreateWithoutPlanInput[] | PlanMealUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanMealCreateOrConnectWithoutPlanInput | PlanMealCreateOrConnectWithoutPlanInput[]
    upsert?: PlanMealUpsertWithWhereUniqueWithoutPlanInput | PlanMealUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: PlanMealCreateManyPlanInputEnvelope
    set?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    disconnect?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    delete?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    connect?: PlanMealWhereUniqueInput | PlanMealWhereUniqueInput[]
    update?: PlanMealUpdateWithWhereUniqueWithoutPlanInput | PlanMealUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PlanMealUpdateManyWithWhereWithoutPlanInput | PlanMealUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PlanMealScalarWhereInput | PlanMealScalarWhereInput[]
  }

  export type PlanCreateNestedOneWithoutPlanMealsInput = {
    create?: XOR<PlanCreateWithoutPlanMealsInput, PlanUncheckedCreateWithoutPlanMealsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutPlanMealsInput
    connect?: PlanWhereUniqueInput
  }

  export type MealCreateNestedOneWithoutPlanMealsInput = {
    create?: XOR<MealCreateWithoutPlanMealsInput, MealUncheckedCreateWithoutPlanMealsInput>
    connectOrCreate?: MealCreateOrConnectWithoutPlanMealsInput
    connect?: MealWhereUniqueInput
  }

  export type PlanUpdateOneRequiredWithoutPlanMealsNestedInput = {
    create?: XOR<PlanCreateWithoutPlanMealsInput, PlanUncheckedCreateWithoutPlanMealsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutPlanMealsInput
    upsert?: PlanUpsertWithoutPlanMealsInput
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutPlanMealsInput, PlanUpdateWithoutPlanMealsInput>, PlanUncheckedUpdateWithoutPlanMealsInput>
  }

  export type MealUpdateOneRequiredWithoutPlanMealsNestedInput = {
    create?: XOR<MealCreateWithoutPlanMealsInput, MealUncheckedCreateWithoutPlanMealsInput>
    connectOrCreate?: MealCreateOrConnectWithoutPlanMealsInput
    upsert?: MealUpsertWithoutPlanMealsInput
    connect?: MealWhereUniqueInput
    update?: XOR<XOR<MealUpdateToOneWithWhereWithoutPlanMealsInput, MealUpdateWithoutPlanMealsInput>, MealUncheckedUpdateWithoutPlanMealsInput>
  }

  export type UserCreateNestedOneWithoutProfilesInput = {
    create?: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilesInput
    connect?: UserWhereUniqueInput
  }

  export type MacroHistoryCreateNestedManyWithoutProfileInput = {
    create?: XOR<MacroHistoryCreateWithoutProfileInput, MacroHistoryUncheckedCreateWithoutProfileInput> | MacroHistoryCreateWithoutProfileInput[] | MacroHistoryUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: MacroHistoryCreateOrConnectWithoutProfileInput | MacroHistoryCreateOrConnectWithoutProfileInput[]
    createMany?: MacroHistoryCreateManyProfileInputEnvelope
    connect?: MacroHistoryWhereUniqueInput | MacroHistoryWhereUniqueInput[]
  }

  export type MacroHistoryUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<MacroHistoryCreateWithoutProfileInput, MacroHistoryUncheckedCreateWithoutProfileInput> | MacroHistoryCreateWithoutProfileInput[] | MacroHistoryUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: MacroHistoryCreateOrConnectWithoutProfileInput | MacroHistoryCreateOrConnectWithoutProfileInput[]
    createMany?: MacroHistoryCreateManyProfileInputEnvelope
    connect?: MacroHistoryWhereUniqueInput | MacroHistoryWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutProfilesNestedInput = {
    create?: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilesInput
    upsert?: UserUpsertWithoutProfilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfilesInput, UserUpdateWithoutProfilesInput>, UserUncheckedUpdateWithoutProfilesInput>
  }

  export type MacroHistoryUpdateManyWithoutProfileNestedInput = {
    create?: XOR<MacroHistoryCreateWithoutProfileInput, MacroHistoryUncheckedCreateWithoutProfileInput> | MacroHistoryCreateWithoutProfileInput[] | MacroHistoryUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: MacroHistoryCreateOrConnectWithoutProfileInput | MacroHistoryCreateOrConnectWithoutProfileInput[]
    upsert?: MacroHistoryUpsertWithWhereUniqueWithoutProfileInput | MacroHistoryUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: MacroHistoryCreateManyProfileInputEnvelope
    set?: MacroHistoryWhereUniqueInput | MacroHistoryWhereUniqueInput[]
    disconnect?: MacroHistoryWhereUniqueInput | MacroHistoryWhereUniqueInput[]
    delete?: MacroHistoryWhereUniqueInput | MacroHistoryWhereUniqueInput[]
    connect?: MacroHistoryWhereUniqueInput | MacroHistoryWhereUniqueInput[]
    update?: MacroHistoryUpdateWithWhereUniqueWithoutProfileInput | MacroHistoryUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: MacroHistoryUpdateManyWithWhereWithoutProfileInput | MacroHistoryUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: MacroHistoryScalarWhereInput | MacroHistoryScalarWhereInput[]
  }

  export type MacroHistoryUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<MacroHistoryCreateWithoutProfileInput, MacroHistoryUncheckedCreateWithoutProfileInput> | MacroHistoryCreateWithoutProfileInput[] | MacroHistoryUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: MacroHistoryCreateOrConnectWithoutProfileInput | MacroHistoryCreateOrConnectWithoutProfileInput[]
    upsert?: MacroHistoryUpsertWithWhereUniqueWithoutProfileInput | MacroHistoryUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: MacroHistoryCreateManyProfileInputEnvelope
    set?: MacroHistoryWhereUniqueInput | MacroHistoryWhereUniqueInput[]
    disconnect?: MacroHistoryWhereUniqueInput | MacroHistoryWhereUniqueInput[]
    delete?: MacroHistoryWhereUniqueInput | MacroHistoryWhereUniqueInput[]
    connect?: MacroHistoryWhereUniqueInput | MacroHistoryWhereUniqueInput[]
    update?: MacroHistoryUpdateWithWhereUniqueWithoutProfileInput | MacroHistoryUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: MacroHistoryUpdateManyWithWhereWithoutProfileInput | MacroHistoryUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: MacroHistoryScalarWhereInput | MacroHistoryScalarWhereInput[]
  }

  export type ProfileCreateNestedOneWithoutMacroHistoryInput = {
    create?: XOR<ProfileCreateWithoutMacroHistoryInput, ProfileUncheckedCreateWithoutMacroHistoryInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutMacroHistoryInput
    connect?: ProfileWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProfileUpdateOneRequiredWithoutMacroHistoryNestedInput = {
    create?: XOR<ProfileCreateWithoutMacroHistoryInput, ProfileUncheckedCreateWithoutMacroHistoryInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutMacroHistoryInput
    upsert?: ProfileUpsertWithoutMacroHistoryInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutMacroHistoryInput, ProfileUpdateWithoutMacroHistoryInput>, ProfileUncheckedUpdateWithoutMacroHistoryInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type MealCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    planMeals?: PlanMealCreateNestedManyWithoutMealInput
    ingredients?: MealIngredientCreateNestedManyWithoutMealInput
    categories?: MealCategoryCreateNestedManyWithoutMealInput
    tags?: MealTagCreateNestedManyWithoutMealInput
    favorited?: FavoriteMealCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    planMeals?: PlanMealUncheckedCreateNestedManyWithoutMealInput
    ingredients?: MealIngredientUncheckedCreateNestedManyWithoutMealInput
    categories?: MealCategoryUncheckedCreateNestedManyWithoutMealInput
    tags?: MealTagUncheckedCreateNestedManyWithoutMealInput
    favorited?: FavoriteMealUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealCreateOrConnectWithoutUserInput = {
    where: MealWhereUniqueInput
    create: XOR<MealCreateWithoutUserInput, MealUncheckedCreateWithoutUserInput>
  }

  export type MealCreateManyUserInputEnvelope = {
    data: MealCreateManyUserInput | MealCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PlanCreateWithoutUserInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    planMeals?: PlanMealCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    planMeals?: PlanMealUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanCreateOrConnectWithoutUserInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutUserInput, PlanUncheckedCreateWithoutUserInput>
  }

  export type PlanCreateManyUserInputEnvelope = {
    data: PlanCreateManyUserInput | PlanCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    name: string
    isActive?: boolean
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dietaryNeeds?: string | null
    activityLevel?: string | null
    weightGoal?: string | null
    macroHistory?: MacroHistoryCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    isActive?: boolean
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dietaryNeeds?: string | null
    activityLevel?: string | null
    weightGoal?: string | null
    macroHistory?: MacroHistoryUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileCreateManyUserInputEnvelope = {
    data: ProfileCreateManyUserInput | ProfileCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteMealCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    meal: MealCreateNestedOneWithoutFavoritedInput
  }

  export type FavoriteMealUncheckedCreateWithoutUserInput = {
    id?: string
    mealId: string
    createdAt?: Date | string
  }

  export type FavoriteMealCreateOrConnectWithoutUserInput = {
    where: FavoriteMealWhereUniqueInput
    create: XOR<FavoriteMealCreateWithoutUserInput, FavoriteMealUncheckedCreateWithoutUserInput>
  }

  export type FavoriteMealCreateManyUserInputEnvelope = {
    data: FavoriteMealCreateManyUserInput | FavoriteMealCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MealUpsertWithWhereUniqueWithoutUserInput = {
    where: MealWhereUniqueInput
    update: XOR<MealUpdateWithoutUserInput, MealUncheckedUpdateWithoutUserInput>
    create: XOR<MealCreateWithoutUserInput, MealUncheckedCreateWithoutUserInput>
  }

  export type MealUpdateWithWhereUniqueWithoutUserInput = {
    where: MealWhereUniqueInput
    data: XOR<MealUpdateWithoutUserInput, MealUncheckedUpdateWithoutUserInput>
  }

  export type MealUpdateManyWithWhereWithoutUserInput = {
    where: MealScalarWhereInput
    data: XOR<MealUpdateManyMutationInput, MealUncheckedUpdateManyWithoutUserInput>
  }

  export type MealScalarWhereInput = {
    AND?: MealScalarWhereInput | MealScalarWhereInput[]
    OR?: MealScalarWhereInput[]
    NOT?: MealScalarWhereInput | MealScalarWhereInput[]
    id?: StringFilter<"Meal"> | string
    name?: StringFilter<"Meal"> | string
    description?: StringNullableFilter<"Meal"> | string | null
    instructions?: StringNullableFilter<"Meal"> | string | null
    prepTime?: IntFilter<"Meal"> | number
    cookTime?: IntFilter<"Meal"> | number
    servings?: IntFilter<"Meal"> | number
    servingSize?: StringFilter<"Meal"> | string
    difficulty?: StringFilter<"Meal"> | string
    calories?: IntFilter<"Meal"> | number
    protein?: FloatFilter<"Meal"> | number
    carbs?: FloatFilter<"Meal"> | number
    fat?: FloatFilter<"Meal"> | number
    userId?: StringFilter<"Meal"> | string
    createdAt?: DateTimeFilter<"Meal"> | Date | string
    updatedAt?: DateTimeFilter<"Meal"> | Date | string
    notes?: StringNullableFilter<"Meal"> | string | null
  }

  export type PlanUpsertWithWhereUniqueWithoutUserInput = {
    where: PlanWhereUniqueInput
    update: XOR<PlanUpdateWithoutUserInput, PlanUncheckedUpdateWithoutUserInput>
    create: XOR<PlanCreateWithoutUserInput, PlanUncheckedCreateWithoutUserInput>
  }

  export type PlanUpdateWithWhereUniqueWithoutUserInput = {
    where: PlanWhereUniqueInput
    data: XOR<PlanUpdateWithoutUserInput, PlanUncheckedUpdateWithoutUserInput>
  }

  export type PlanUpdateManyWithWhereWithoutUserInput = {
    where: PlanScalarWhereInput
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyWithoutUserInput>
  }

  export type PlanScalarWhereInput = {
    AND?: PlanScalarWhereInput | PlanScalarWhereInput[]
    OR?: PlanScalarWhereInput[]
    NOT?: PlanScalarWhereInput | PlanScalarWhereInput[]
    id?: StringFilter<"Plan"> | string
    name?: StringFilter<"Plan"> | string
    startDate?: DateTimeFilter<"Plan"> | Date | string
    endDate?: DateTimeFilter<"Plan"> | Date | string
    userId?: StringFilter<"Plan"> | string
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    updatedAt?: DateTimeFilter<"Plan"> | Date | string
    notes?: StringNullableFilter<"Plan"> | string | null
  }

  export type ProfileUpsertWithWhereUniqueWithoutUserInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutUserInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateManyWithWhereWithoutUserInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutUserInput>
  }

  export type ProfileScalarWhereInput = {
    AND?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    OR?: ProfileScalarWhereInput[]
    NOT?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    id?: StringFilter<"Profile"> | string
    name?: StringFilter<"Profile"> | string
    isActive?: BoolFilter<"Profile"> | boolean
    calories?: IntFilter<"Profile"> | number
    protein?: FloatFilter<"Profile"> | number
    carbs?: FloatFilter<"Profile"> | number
    fat?: FloatFilter<"Profile"> | number
    userId?: StringFilter<"Profile"> | string
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    dietaryNeeds?: StringNullableFilter<"Profile"> | string | null
    activityLevel?: StringNullableFilter<"Profile"> | string | null
    weightGoal?: StringNullableFilter<"Profile"> | string | null
  }

  export type FavoriteMealUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteMealWhereUniqueInput
    update: XOR<FavoriteMealUpdateWithoutUserInput, FavoriteMealUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteMealCreateWithoutUserInput, FavoriteMealUncheckedCreateWithoutUserInput>
  }

  export type FavoriteMealUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteMealWhereUniqueInput
    data: XOR<FavoriteMealUpdateWithoutUserInput, FavoriteMealUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteMealUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteMealScalarWhereInput
    data: XOR<FavoriteMealUpdateManyMutationInput, FavoriteMealUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteMealScalarWhereInput = {
    AND?: FavoriteMealScalarWhereInput | FavoriteMealScalarWhereInput[]
    OR?: FavoriteMealScalarWhereInput[]
    NOT?: FavoriteMealScalarWhereInput | FavoriteMealScalarWhereInput[]
    id?: StringFilter<"FavoriteMeal"> | string
    userId?: StringFilter<"FavoriteMeal"> | string
    mealId?: StringFilter<"FavoriteMeal"> | string
    createdAt?: DateTimeFilter<"FavoriteMeal"> | Date | string
  }

  export type UserCreateWithoutMealsInput = {
    id?: string
    email: string
    name?: string | null
    b2cId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    plans?: PlanCreateNestedManyWithoutUserInput
    profiles?: ProfileCreateNestedManyWithoutUserInput
    favorites?: FavoriteMealCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMealsInput = {
    id?: string
    email: string
    name?: string | null
    b2cId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteMealUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMealsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMealsInput, UserUncheckedCreateWithoutMealsInput>
  }

  export type PlanMealCreateWithoutMealInput = {
    id?: string
    date: Date | string
    mealTime: string
    servings: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    plan: PlanCreateNestedOneWithoutPlanMealsInput
  }

  export type PlanMealUncheckedCreateWithoutMealInput = {
    id?: string
    planId: string
    date: Date | string
    mealTime: string
    servings: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlanMealCreateOrConnectWithoutMealInput = {
    where: PlanMealWhereUniqueInput
    create: XOR<PlanMealCreateWithoutMealInput, PlanMealUncheckedCreateWithoutMealInput>
  }

  export type PlanMealCreateManyMealInputEnvelope = {
    data: PlanMealCreateManyMealInput | PlanMealCreateManyMealInput[]
    skipDuplicates?: boolean
  }

  export type MealIngredientCreateWithoutMealInput = {
    id?: string
    amount: number
    unit: string
    notes?: string | null
    ingredient: IngredientCreateNestedOneWithoutMealsInput
  }

  export type MealIngredientUncheckedCreateWithoutMealInput = {
    id?: string
    ingredientId: string
    amount: number
    unit: string
    notes?: string | null
  }

  export type MealIngredientCreateOrConnectWithoutMealInput = {
    where: MealIngredientWhereUniqueInput
    create: XOR<MealIngredientCreateWithoutMealInput, MealIngredientUncheckedCreateWithoutMealInput>
  }

  export type MealIngredientCreateManyMealInputEnvelope = {
    data: MealIngredientCreateManyMealInput | MealIngredientCreateManyMealInput[]
    skipDuplicates?: boolean
  }

  export type MealCategoryCreateWithoutMealInput = {
    id?: string
    category: CategoryCreateNestedOneWithoutMealsInput
  }

  export type MealCategoryUncheckedCreateWithoutMealInput = {
    id?: string
    categoryId: string
  }

  export type MealCategoryCreateOrConnectWithoutMealInput = {
    where: MealCategoryWhereUniqueInput
    create: XOR<MealCategoryCreateWithoutMealInput, MealCategoryUncheckedCreateWithoutMealInput>
  }

  export type MealCategoryCreateManyMealInputEnvelope = {
    data: MealCategoryCreateManyMealInput | MealCategoryCreateManyMealInput[]
    skipDuplicates?: boolean
  }

  export type MealTagCreateWithoutMealInput = {
    id?: string
    tag: TagCreateNestedOneWithoutMealsInput
  }

  export type MealTagUncheckedCreateWithoutMealInput = {
    id?: string
    tagId: string
  }

  export type MealTagCreateOrConnectWithoutMealInput = {
    where: MealTagWhereUniqueInput
    create: XOR<MealTagCreateWithoutMealInput, MealTagUncheckedCreateWithoutMealInput>
  }

  export type MealTagCreateManyMealInputEnvelope = {
    data: MealTagCreateManyMealInput | MealTagCreateManyMealInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteMealCreateWithoutMealInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoritesInput
  }

  export type FavoriteMealUncheckedCreateWithoutMealInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type FavoriteMealCreateOrConnectWithoutMealInput = {
    where: FavoriteMealWhereUniqueInput
    create: XOR<FavoriteMealCreateWithoutMealInput, FavoriteMealUncheckedCreateWithoutMealInput>
  }

  export type FavoriteMealCreateManyMealInputEnvelope = {
    data: FavoriteMealCreateManyMealInput | FavoriteMealCreateManyMealInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMealsInput = {
    update: XOR<UserUpdateWithoutMealsInput, UserUncheckedUpdateWithoutMealsInput>
    create: XOR<UserCreateWithoutMealsInput, UserUncheckedCreateWithoutMealsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMealsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMealsInput, UserUncheckedUpdateWithoutMealsInput>
  }

  export type UserUpdateWithoutMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    b2cId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plans?: PlanUpdateManyWithoutUserNestedInput
    profiles?: ProfileUpdateManyWithoutUserNestedInput
    favorites?: FavoriteMealUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    b2cId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteMealUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PlanMealUpsertWithWhereUniqueWithoutMealInput = {
    where: PlanMealWhereUniqueInput
    update: XOR<PlanMealUpdateWithoutMealInput, PlanMealUncheckedUpdateWithoutMealInput>
    create: XOR<PlanMealCreateWithoutMealInput, PlanMealUncheckedCreateWithoutMealInput>
  }

  export type PlanMealUpdateWithWhereUniqueWithoutMealInput = {
    where: PlanMealWhereUniqueInput
    data: XOR<PlanMealUpdateWithoutMealInput, PlanMealUncheckedUpdateWithoutMealInput>
  }

  export type PlanMealUpdateManyWithWhereWithoutMealInput = {
    where: PlanMealScalarWhereInput
    data: XOR<PlanMealUpdateManyMutationInput, PlanMealUncheckedUpdateManyWithoutMealInput>
  }

  export type PlanMealScalarWhereInput = {
    AND?: PlanMealScalarWhereInput | PlanMealScalarWhereInput[]
    OR?: PlanMealScalarWhereInput[]
    NOT?: PlanMealScalarWhereInput | PlanMealScalarWhereInput[]
    id?: StringFilter<"PlanMeal"> | string
    planId?: StringFilter<"PlanMeal"> | string
    mealId?: StringFilter<"PlanMeal"> | string
    date?: DateTimeFilter<"PlanMeal"> | Date | string
    mealTime?: StringFilter<"PlanMeal"> | string
    servings?: IntFilter<"PlanMeal"> | number
    notes?: StringNullableFilter<"PlanMeal"> | string | null
    createdAt?: DateTimeFilter<"PlanMeal"> | Date | string
    updatedAt?: DateTimeFilter<"PlanMeal"> | Date | string
  }

  export type MealIngredientUpsertWithWhereUniqueWithoutMealInput = {
    where: MealIngredientWhereUniqueInput
    update: XOR<MealIngredientUpdateWithoutMealInput, MealIngredientUncheckedUpdateWithoutMealInput>
    create: XOR<MealIngredientCreateWithoutMealInput, MealIngredientUncheckedCreateWithoutMealInput>
  }

  export type MealIngredientUpdateWithWhereUniqueWithoutMealInput = {
    where: MealIngredientWhereUniqueInput
    data: XOR<MealIngredientUpdateWithoutMealInput, MealIngredientUncheckedUpdateWithoutMealInput>
  }

  export type MealIngredientUpdateManyWithWhereWithoutMealInput = {
    where: MealIngredientScalarWhereInput
    data: XOR<MealIngredientUpdateManyMutationInput, MealIngredientUncheckedUpdateManyWithoutMealInput>
  }

  export type MealIngredientScalarWhereInput = {
    AND?: MealIngredientScalarWhereInput | MealIngredientScalarWhereInput[]
    OR?: MealIngredientScalarWhereInput[]
    NOT?: MealIngredientScalarWhereInput | MealIngredientScalarWhereInput[]
    id?: StringFilter<"MealIngredient"> | string
    mealId?: StringFilter<"MealIngredient"> | string
    ingredientId?: StringFilter<"MealIngredient"> | string
    amount?: FloatFilter<"MealIngredient"> | number
    unit?: StringFilter<"MealIngredient"> | string
    notes?: StringNullableFilter<"MealIngredient"> | string | null
  }

  export type MealCategoryUpsertWithWhereUniqueWithoutMealInput = {
    where: MealCategoryWhereUniqueInput
    update: XOR<MealCategoryUpdateWithoutMealInput, MealCategoryUncheckedUpdateWithoutMealInput>
    create: XOR<MealCategoryCreateWithoutMealInput, MealCategoryUncheckedCreateWithoutMealInput>
  }

  export type MealCategoryUpdateWithWhereUniqueWithoutMealInput = {
    where: MealCategoryWhereUniqueInput
    data: XOR<MealCategoryUpdateWithoutMealInput, MealCategoryUncheckedUpdateWithoutMealInput>
  }

  export type MealCategoryUpdateManyWithWhereWithoutMealInput = {
    where: MealCategoryScalarWhereInput
    data: XOR<MealCategoryUpdateManyMutationInput, MealCategoryUncheckedUpdateManyWithoutMealInput>
  }

  export type MealCategoryScalarWhereInput = {
    AND?: MealCategoryScalarWhereInput | MealCategoryScalarWhereInput[]
    OR?: MealCategoryScalarWhereInput[]
    NOT?: MealCategoryScalarWhereInput | MealCategoryScalarWhereInput[]
    id?: StringFilter<"MealCategory"> | string
    mealId?: StringFilter<"MealCategory"> | string
    categoryId?: StringFilter<"MealCategory"> | string
  }

  export type MealTagUpsertWithWhereUniqueWithoutMealInput = {
    where: MealTagWhereUniqueInput
    update: XOR<MealTagUpdateWithoutMealInput, MealTagUncheckedUpdateWithoutMealInput>
    create: XOR<MealTagCreateWithoutMealInput, MealTagUncheckedCreateWithoutMealInput>
  }

  export type MealTagUpdateWithWhereUniqueWithoutMealInput = {
    where: MealTagWhereUniqueInput
    data: XOR<MealTagUpdateWithoutMealInput, MealTagUncheckedUpdateWithoutMealInput>
  }

  export type MealTagUpdateManyWithWhereWithoutMealInput = {
    where: MealTagScalarWhereInput
    data: XOR<MealTagUpdateManyMutationInput, MealTagUncheckedUpdateManyWithoutMealInput>
  }

  export type MealTagScalarWhereInput = {
    AND?: MealTagScalarWhereInput | MealTagScalarWhereInput[]
    OR?: MealTagScalarWhereInput[]
    NOT?: MealTagScalarWhereInput | MealTagScalarWhereInput[]
    id?: StringFilter<"MealTag"> | string
    mealId?: StringFilter<"MealTag"> | string
    tagId?: StringFilter<"MealTag"> | string
  }

  export type FavoriteMealUpsertWithWhereUniqueWithoutMealInput = {
    where: FavoriteMealWhereUniqueInput
    update: XOR<FavoriteMealUpdateWithoutMealInput, FavoriteMealUncheckedUpdateWithoutMealInput>
    create: XOR<FavoriteMealCreateWithoutMealInput, FavoriteMealUncheckedCreateWithoutMealInput>
  }

  export type FavoriteMealUpdateWithWhereUniqueWithoutMealInput = {
    where: FavoriteMealWhereUniqueInput
    data: XOR<FavoriteMealUpdateWithoutMealInput, FavoriteMealUncheckedUpdateWithoutMealInput>
  }

  export type FavoriteMealUpdateManyWithWhereWithoutMealInput = {
    where: FavoriteMealScalarWhereInput
    data: XOR<FavoriteMealUpdateManyMutationInput, FavoriteMealUncheckedUpdateManyWithoutMealInput>
  }

  export type MealIngredientCreateWithoutIngredientInput = {
    id?: string
    amount: number
    unit: string
    notes?: string | null
    meal: MealCreateNestedOneWithoutIngredientsInput
  }

  export type MealIngredientUncheckedCreateWithoutIngredientInput = {
    id?: string
    mealId: string
    amount: number
    unit: string
    notes?: string | null
  }

  export type MealIngredientCreateOrConnectWithoutIngredientInput = {
    where: MealIngredientWhereUniqueInput
    create: XOR<MealIngredientCreateWithoutIngredientInput, MealIngredientUncheckedCreateWithoutIngredientInput>
  }

  export type MealIngredientCreateManyIngredientInputEnvelope = {
    data: MealIngredientCreateManyIngredientInput | MealIngredientCreateManyIngredientInput[]
    skipDuplicates?: boolean
  }

  export type MealIngredientUpsertWithWhereUniqueWithoutIngredientInput = {
    where: MealIngredientWhereUniqueInput
    update: XOR<MealIngredientUpdateWithoutIngredientInput, MealIngredientUncheckedUpdateWithoutIngredientInput>
    create: XOR<MealIngredientCreateWithoutIngredientInput, MealIngredientUncheckedCreateWithoutIngredientInput>
  }

  export type MealIngredientUpdateWithWhereUniqueWithoutIngredientInput = {
    where: MealIngredientWhereUniqueInput
    data: XOR<MealIngredientUpdateWithoutIngredientInput, MealIngredientUncheckedUpdateWithoutIngredientInput>
  }

  export type MealIngredientUpdateManyWithWhereWithoutIngredientInput = {
    where: MealIngredientScalarWhereInput
    data: XOR<MealIngredientUpdateManyMutationInput, MealIngredientUncheckedUpdateManyWithoutIngredientInput>
  }

  export type MealCreateWithoutIngredientsInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    user: UserCreateNestedOneWithoutMealsInput
    planMeals?: PlanMealCreateNestedManyWithoutMealInput
    categories?: MealCategoryCreateNestedManyWithoutMealInput
    tags?: MealTagCreateNestedManyWithoutMealInput
    favorited?: FavoriteMealCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateWithoutIngredientsInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    planMeals?: PlanMealUncheckedCreateNestedManyWithoutMealInput
    categories?: MealCategoryUncheckedCreateNestedManyWithoutMealInput
    tags?: MealTagUncheckedCreateNestedManyWithoutMealInput
    favorited?: FavoriteMealUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealCreateOrConnectWithoutIngredientsInput = {
    where: MealWhereUniqueInput
    create: XOR<MealCreateWithoutIngredientsInput, MealUncheckedCreateWithoutIngredientsInput>
  }

  export type IngredientCreateWithoutMealsInput = {
    id?: string
    name: string
    calories: number
    protein: number
    carbs: number
    fat: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngredientUncheckedCreateWithoutMealsInput = {
    id?: string
    name: string
    calories: number
    protein: number
    carbs: number
    fat: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IngredientCreateOrConnectWithoutMealsInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutMealsInput, IngredientUncheckedCreateWithoutMealsInput>
  }

  export type MealUpsertWithoutIngredientsInput = {
    update: XOR<MealUpdateWithoutIngredientsInput, MealUncheckedUpdateWithoutIngredientsInput>
    create: XOR<MealCreateWithoutIngredientsInput, MealUncheckedCreateWithoutIngredientsInput>
    where?: MealWhereInput
  }

  export type MealUpdateToOneWithWhereWithoutIngredientsInput = {
    where?: MealWhereInput
    data: XOR<MealUpdateWithoutIngredientsInput, MealUncheckedUpdateWithoutIngredientsInput>
  }

  export type MealUpdateWithoutIngredientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutMealsNestedInput
    planMeals?: PlanMealUpdateManyWithoutMealNestedInput
    categories?: MealCategoryUpdateManyWithoutMealNestedInput
    tags?: MealTagUpdateManyWithoutMealNestedInput
    favorited?: FavoriteMealUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateWithoutIngredientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    planMeals?: PlanMealUncheckedUpdateManyWithoutMealNestedInput
    categories?: MealCategoryUncheckedUpdateManyWithoutMealNestedInput
    tags?: MealTagUncheckedUpdateManyWithoutMealNestedInput
    favorited?: FavoriteMealUncheckedUpdateManyWithoutMealNestedInput
  }

  export type IngredientUpsertWithoutMealsInput = {
    update: XOR<IngredientUpdateWithoutMealsInput, IngredientUncheckedUpdateWithoutMealsInput>
    create: XOR<IngredientCreateWithoutMealsInput, IngredientUncheckedCreateWithoutMealsInput>
    where?: IngredientWhereInput
  }

  export type IngredientUpdateToOneWithWhereWithoutMealsInput = {
    where?: IngredientWhereInput
    data: XOR<IngredientUpdateWithoutMealsInput, IngredientUncheckedUpdateWithoutMealsInput>
  }

  export type IngredientUpdateWithoutMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngredientUncheckedUpdateWithoutMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealCategoryCreateWithoutCategoryInput = {
    id?: string
    meal: MealCreateNestedOneWithoutCategoriesInput
  }

  export type MealCategoryUncheckedCreateWithoutCategoryInput = {
    id?: string
    mealId: string
  }

  export type MealCategoryCreateOrConnectWithoutCategoryInput = {
    where: MealCategoryWhereUniqueInput
    create: XOR<MealCategoryCreateWithoutCategoryInput, MealCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type MealCategoryCreateManyCategoryInputEnvelope = {
    data: MealCategoryCreateManyCategoryInput | MealCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type MealCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: MealCategoryWhereUniqueInput
    update: XOR<MealCategoryUpdateWithoutCategoryInput, MealCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<MealCategoryCreateWithoutCategoryInput, MealCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type MealCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: MealCategoryWhereUniqueInput
    data: XOR<MealCategoryUpdateWithoutCategoryInput, MealCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type MealCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: MealCategoryScalarWhereInput
    data: XOR<MealCategoryUpdateManyMutationInput, MealCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type MealCreateWithoutCategoriesInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    user: UserCreateNestedOneWithoutMealsInput
    planMeals?: PlanMealCreateNestedManyWithoutMealInput
    ingredients?: MealIngredientCreateNestedManyWithoutMealInput
    tags?: MealTagCreateNestedManyWithoutMealInput
    favorited?: FavoriteMealCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateWithoutCategoriesInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    planMeals?: PlanMealUncheckedCreateNestedManyWithoutMealInput
    ingredients?: MealIngredientUncheckedCreateNestedManyWithoutMealInput
    tags?: MealTagUncheckedCreateNestedManyWithoutMealInput
    favorited?: FavoriteMealUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealCreateOrConnectWithoutCategoriesInput = {
    where: MealWhereUniqueInput
    create: XOR<MealCreateWithoutCategoriesInput, MealUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutMealsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUncheckedCreateWithoutMealsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryCreateOrConnectWithoutMealsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutMealsInput, CategoryUncheckedCreateWithoutMealsInput>
  }

  export type MealUpsertWithoutCategoriesInput = {
    update: XOR<MealUpdateWithoutCategoriesInput, MealUncheckedUpdateWithoutCategoriesInput>
    create: XOR<MealCreateWithoutCategoriesInput, MealUncheckedCreateWithoutCategoriesInput>
    where?: MealWhereInput
  }

  export type MealUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: MealWhereInput
    data: XOR<MealUpdateWithoutCategoriesInput, MealUncheckedUpdateWithoutCategoriesInput>
  }

  export type MealUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutMealsNestedInput
    planMeals?: PlanMealUpdateManyWithoutMealNestedInput
    ingredients?: MealIngredientUpdateManyWithoutMealNestedInput
    tags?: MealTagUpdateManyWithoutMealNestedInput
    favorited?: FavoriteMealUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    planMeals?: PlanMealUncheckedUpdateManyWithoutMealNestedInput
    ingredients?: MealIngredientUncheckedUpdateManyWithoutMealNestedInput
    tags?: MealTagUncheckedUpdateManyWithoutMealNestedInput
    favorited?: FavoriteMealUncheckedUpdateManyWithoutMealNestedInput
  }

  export type CategoryUpsertWithoutMealsInput = {
    update: XOR<CategoryUpdateWithoutMealsInput, CategoryUncheckedUpdateWithoutMealsInput>
    create: XOR<CategoryCreateWithoutMealsInput, CategoryUncheckedCreateWithoutMealsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutMealsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutMealsInput, CategoryUncheckedUpdateWithoutMealsInput>
  }

  export type CategoryUpdateWithoutMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealTagCreateWithoutTagInput = {
    id?: string
    meal: MealCreateNestedOneWithoutTagsInput
  }

  export type MealTagUncheckedCreateWithoutTagInput = {
    id?: string
    mealId: string
  }

  export type MealTagCreateOrConnectWithoutTagInput = {
    where: MealTagWhereUniqueInput
    create: XOR<MealTagCreateWithoutTagInput, MealTagUncheckedCreateWithoutTagInput>
  }

  export type MealTagCreateManyTagInputEnvelope = {
    data: MealTagCreateManyTagInput | MealTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type MealTagUpsertWithWhereUniqueWithoutTagInput = {
    where: MealTagWhereUniqueInput
    update: XOR<MealTagUpdateWithoutTagInput, MealTagUncheckedUpdateWithoutTagInput>
    create: XOR<MealTagCreateWithoutTagInput, MealTagUncheckedCreateWithoutTagInput>
  }

  export type MealTagUpdateWithWhereUniqueWithoutTagInput = {
    where: MealTagWhereUniqueInput
    data: XOR<MealTagUpdateWithoutTagInput, MealTagUncheckedUpdateWithoutTagInput>
  }

  export type MealTagUpdateManyWithWhereWithoutTagInput = {
    where: MealTagScalarWhereInput
    data: XOR<MealTagUpdateManyMutationInput, MealTagUncheckedUpdateManyWithoutTagInput>
  }

  export type MealCreateWithoutTagsInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    user: UserCreateNestedOneWithoutMealsInput
    planMeals?: PlanMealCreateNestedManyWithoutMealInput
    ingredients?: MealIngredientCreateNestedManyWithoutMealInput
    categories?: MealCategoryCreateNestedManyWithoutMealInput
    favorited?: FavoriteMealCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateWithoutTagsInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    planMeals?: PlanMealUncheckedCreateNestedManyWithoutMealInput
    ingredients?: MealIngredientUncheckedCreateNestedManyWithoutMealInput
    categories?: MealCategoryUncheckedCreateNestedManyWithoutMealInput
    favorited?: FavoriteMealUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealCreateOrConnectWithoutTagsInput = {
    where: MealWhereUniqueInput
    create: XOR<MealCreateWithoutTagsInput, MealUncheckedCreateWithoutTagsInput>
  }

  export type TagCreateWithoutMealsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagUncheckedCreateWithoutMealsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagCreateOrConnectWithoutMealsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutMealsInput, TagUncheckedCreateWithoutMealsInput>
  }

  export type MealUpsertWithoutTagsInput = {
    update: XOR<MealUpdateWithoutTagsInput, MealUncheckedUpdateWithoutTagsInput>
    create: XOR<MealCreateWithoutTagsInput, MealUncheckedCreateWithoutTagsInput>
    where?: MealWhereInput
  }

  export type MealUpdateToOneWithWhereWithoutTagsInput = {
    where?: MealWhereInput
    data: XOR<MealUpdateWithoutTagsInput, MealUncheckedUpdateWithoutTagsInput>
  }

  export type MealUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutMealsNestedInput
    planMeals?: PlanMealUpdateManyWithoutMealNestedInput
    ingredients?: MealIngredientUpdateManyWithoutMealNestedInput
    categories?: MealCategoryUpdateManyWithoutMealNestedInput
    favorited?: FavoriteMealUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    planMeals?: PlanMealUncheckedUpdateManyWithoutMealNestedInput
    ingredients?: MealIngredientUncheckedUpdateManyWithoutMealNestedInput
    categories?: MealCategoryUncheckedUpdateManyWithoutMealNestedInput
    favorited?: FavoriteMealUncheckedUpdateManyWithoutMealNestedInput
  }

  export type TagUpsertWithoutMealsInput = {
    update: XOR<TagUpdateWithoutMealsInput, TagUncheckedUpdateWithoutMealsInput>
    create: XOR<TagCreateWithoutMealsInput, TagUncheckedCreateWithoutMealsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutMealsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutMealsInput, TagUncheckedUpdateWithoutMealsInput>
  }

  export type TagUpdateWithoutMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateWithoutMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutFavoritesInput = {
    id?: string
    email: string
    name?: string | null
    b2cId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    profiles?: ProfileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoritesInput = {
    id?: string
    email: string
    name?: string | null
    b2cId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoritesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
  }

  export type MealCreateWithoutFavoritedInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    user: UserCreateNestedOneWithoutMealsInput
    planMeals?: PlanMealCreateNestedManyWithoutMealInput
    ingredients?: MealIngredientCreateNestedManyWithoutMealInput
    categories?: MealCategoryCreateNestedManyWithoutMealInput
    tags?: MealTagCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateWithoutFavoritedInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    planMeals?: PlanMealUncheckedCreateNestedManyWithoutMealInput
    ingredients?: MealIngredientUncheckedCreateNestedManyWithoutMealInput
    categories?: MealCategoryUncheckedCreateNestedManyWithoutMealInput
    tags?: MealTagUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealCreateOrConnectWithoutFavoritedInput = {
    where: MealWhereUniqueInput
    create: XOR<MealCreateWithoutFavoritedInput, MealUncheckedCreateWithoutFavoritedInput>
  }

  export type UserUpsertWithoutFavoritesInput = {
    update: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    b2cId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    profiles?: ProfileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    b2cId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MealUpsertWithoutFavoritedInput = {
    update: XOR<MealUpdateWithoutFavoritedInput, MealUncheckedUpdateWithoutFavoritedInput>
    create: XOR<MealCreateWithoutFavoritedInput, MealUncheckedCreateWithoutFavoritedInput>
    where?: MealWhereInput
  }

  export type MealUpdateToOneWithWhereWithoutFavoritedInput = {
    where?: MealWhereInput
    data: XOR<MealUpdateWithoutFavoritedInput, MealUncheckedUpdateWithoutFavoritedInput>
  }

  export type MealUpdateWithoutFavoritedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutMealsNestedInput
    planMeals?: PlanMealUpdateManyWithoutMealNestedInput
    ingredients?: MealIngredientUpdateManyWithoutMealNestedInput
    categories?: MealCategoryUpdateManyWithoutMealNestedInput
    tags?: MealTagUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateWithoutFavoritedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    planMeals?: PlanMealUncheckedUpdateManyWithoutMealNestedInput
    ingredients?: MealIngredientUncheckedUpdateManyWithoutMealNestedInput
    categories?: MealCategoryUncheckedUpdateManyWithoutMealNestedInput
    tags?: MealTagUncheckedUpdateManyWithoutMealNestedInput
  }

  export type UserCreateWithoutPlansInput = {
    id?: string
    email: string
    name?: string | null
    b2cId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealCreateNestedManyWithoutUserInput
    profiles?: ProfileCreateNestedManyWithoutUserInput
    favorites?: FavoriteMealCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPlansInput = {
    id?: string
    email: string
    name?: string | null
    b2cId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealUncheckedCreateNestedManyWithoutUserInput
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteMealUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlansInput, UserUncheckedCreateWithoutPlansInput>
  }

  export type PlanMealCreateWithoutPlanInput = {
    id?: string
    date: Date | string
    mealTime: string
    servings: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meal: MealCreateNestedOneWithoutPlanMealsInput
  }

  export type PlanMealUncheckedCreateWithoutPlanInput = {
    id?: string
    mealId: string
    date: Date | string
    mealTime: string
    servings: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlanMealCreateOrConnectWithoutPlanInput = {
    where: PlanMealWhereUniqueInput
    create: XOR<PlanMealCreateWithoutPlanInput, PlanMealUncheckedCreateWithoutPlanInput>
  }

  export type PlanMealCreateManyPlanInputEnvelope = {
    data: PlanMealCreateManyPlanInput | PlanMealCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPlansInput = {
    update: XOR<UserUpdateWithoutPlansInput, UserUncheckedUpdateWithoutPlansInput>
    create: XOR<UserCreateWithoutPlansInput, UserUncheckedCreateWithoutPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlansInput, UserUncheckedUpdateWithoutPlansInput>
  }

  export type UserUpdateWithoutPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    b2cId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealUpdateManyWithoutUserNestedInput
    profiles?: ProfileUpdateManyWithoutUserNestedInput
    favorites?: FavoriteMealUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    b2cId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealUncheckedUpdateManyWithoutUserNestedInput
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteMealUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PlanMealUpsertWithWhereUniqueWithoutPlanInput = {
    where: PlanMealWhereUniqueInput
    update: XOR<PlanMealUpdateWithoutPlanInput, PlanMealUncheckedUpdateWithoutPlanInput>
    create: XOR<PlanMealCreateWithoutPlanInput, PlanMealUncheckedCreateWithoutPlanInput>
  }

  export type PlanMealUpdateWithWhereUniqueWithoutPlanInput = {
    where: PlanMealWhereUniqueInput
    data: XOR<PlanMealUpdateWithoutPlanInput, PlanMealUncheckedUpdateWithoutPlanInput>
  }

  export type PlanMealUpdateManyWithWhereWithoutPlanInput = {
    where: PlanMealScalarWhereInput
    data: XOR<PlanMealUpdateManyMutationInput, PlanMealUncheckedUpdateManyWithoutPlanInput>
  }

  export type PlanCreateWithoutPlanMealsInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    user: UserCreateNestedOneWithoutPlansInput
  }

  export type PlanUncheckedCreateWithoutPlanMealsInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
  }

  export type PlanCreateOrConnectWithoutPlanMealsInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutPlanMealsInput, PlanUncheckedCreateWithoutPlanMealsInput>
  }

  export type MealCreateWithoutPlanMealsInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    user: UserCreateNestedOneWithoutMealsInput
    ingredients?: MealIngredientCreateNestedManyWithoutMealInput
    categories?: MealCategoryCreateNestedManyWithoutMealInput
    tags?: MealTagCreateNestedManyWithoutMealInput
    favorited?: FavoriteMealCreateNestedManyWithoutMealInput
  }

  export type MealUncheckedCreateWithoutPlanMealsInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    ingredients?: MealIngredientUncheckedCreateNestedManyWithoutMealInput
    categories?: MealCategoryUncheckedCreateNestedManyWithoutMealInput
    tags?: MealTagUncheckedCreateNestedManyWithoutMealInput
    favorited?: FavoriteMealUncheckedCreateNestedManyWithoutMealInput
  }

  export type MealCreateOrConnectWithoutPlanMealsInput = {
    where: MealWhereUniqueInput
    create: XOR<MealCreateWithoutPlanMealsInput, MealUncheckedCreateWithoutPlanMealsInput>
  }

  export type PlanUpsertWithoutPlanMealsInput = {
    update: XOR<PlanUpdateWithoutPlanMealsInput, PlanUncheckedUpdateWithoutPlanMealsInput>
    create: XOR<PlanCreateWithoutPlanMealsInput, PlanUncheckedCreateWithoutPlanMealsInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutPlanMealsInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutPlanMealsInput, PlanUncheckedUpdateWithoutPlanMealsInput>
  }

  export type PlanUpdateWithoutPlanMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPlansNestedInput
  }

  export type PlanUncheckedUpdateWithoutPlanMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MealUpsertWithoutPlanMealsInput = {
    update: XOR<MealUpdateWithoutPlanMealsInput, MealUncheckedUpdateWithoutPlanMealsInput>
    create: XOR<MealCreateWithoutPlanMealsInput, MealUncheckedCreateWithoutPlanMealsInput>
    where?: MealWhereInput
  }

  export type MealUpdateToOneWithWhereWithoutPlanMealsInput = {
    where?: MealWhereInput
    data: XOR<MealUpdateWithoutPlanMealsInput, MealUncheckedUpdateWithoutPlanMealsInput>
  }

  export type MealUpdateWithoutPlanMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutMealsNestedInput
    ingredients?: MealIngredientUpdateManyWithoutMealNestedInput
    categories?: MealCategoryUpdateManyWithoutMealNestedInput
    tags?: MealTagUpdateManyWithoutMealNestedInput
    favorited?: FavoriteMealUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateWithoutPlanMealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: MealIngredientUncheckedUpdateManyWithoutMealNestedInput
    categories?: MealCategoryUncheckedUpdateManyWithoutMealNestedInput
    tags?: MealTagUncheckedUpdateManyWithoutMealNestedInput
    favorited?: FavoriteMealUncheckedUpdateManyWithoutMealNestedInput
  }

  export type UserCreateWithoutProfilesInput = {
    id?: string
    email: string
    name?: string | null
    b2cId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    favorites?: FavoriteMealCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfilesInput = {
    id?: string
    email: string
    name?: string | null
    b2cId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meals?: MealUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteMealUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
  }

  export type MacroHistoryCreateWithoutProfileInput = {
    id?: string
    date?: Date | string
    calories: number
    protein: number
    carbs: number
    fat: number
    weight?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MacroHistoryUncheckedCreateWithoutProfileInput = {
    id?: string
    date?: Date | string
    calories: number
    protein: number
    carbs: number
    fat: number
    weight?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MacroHistoryCreateOrConnectWithoutProfileInput = {
    where: MacroHistoryWhereUniqueInput
    create: XOR<MacroHistoryCreateWithoutProfileInput, MacroHistoryUncheckedCreateWithoutProfileInput>
  }

  export type MacroHistoryCreateManyProfileInputEnvelope = {
    data: MacroHistoryCreateManyProfileInput | MacroHistoryCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProfilesInput = {
    update: XOR<UserUpdateWithoutProfilesInput, UserUncheckedUpdateWithoutProfilesInput>
    create: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfilesInput, UserUncheckedUpdateWithoutProfilesInput>
  }

  export type UserUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    b2cId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    favorites?: FavoriteMealUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    b2cId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meals?: MealUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteMealUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MacroHistoryUpsertWithWhereUniqueWithoutProfileInput = {
    where: MacroHistoryWhereUniqueInput
    update: XOR<MacroHistoryUpdateWithoutProfileInput, MacroHistoryUncheckedUpdateWithoutProfileInput>
    create: XOR<MacroHistoryCreateWithoutProfileInput, MacroHistoryUncheckedCreateWithoutProfileInput>
  }

  export type MacroHistoryUpdateWithWhereUniqueWithoutProfileInput = {
    where: MacroHistoryWhereUniqueInput
    data: XOR<MacroHistoryUpdateWithoutProfileInput, MacroHistoryUncheckedUpdateWithoutProfileInput>
  }

  export type MacroHistoryUpdateManyWithWhereWithoutProfileInput = {
    where: MacroHistoryScalarWhereInput
    data: XOR<MacroHistoryUpdateManyMutationInput, MacroHistoryUncheckedUpdateManyWithoutProfileInput>
  }

  export type MacroHistoryScalarWhereInput = {
    AND?: MacroHistoryScalarWhereInput | MacroHistoryScalarWhereInput[]
    OR?: MacroHistoryScalarWhereInput[]
    NOT?: MacroHistoryScalarWhereInput | MacroHistoryScalarWhereInput[]
    id?: StringFilter<"MacroHistory"> | string
    date?: DateTimeFilter<"MacroHistory"> | Date | string
    calories?: IntFilter<"MacroHistory"> | number
    protein?: FloatFilter<"MacroHistory"> | number
    carbs?: FloatFilter<"MacroHistory"> | number
    fat?: FloatFilter<"MacroHistory"> | number
    weight?: FloatNullableFilter<"MacroHistory"> | number | null
    notes?: StringNullableFilter<"MacroHistory"> | string | null
    profileId?: StringFilter<"MacroHistory"> | string
    createdAt?: DateTimeFilter<"MacroHistory"> | Date | string
    updatedAt?: DateTimeFilter<"MacroHistory"> | Date | string
  }

  export type ProfileCreateWithoutMacroHistoryInput = {
    id?: string
    name: string
    isActive?: boolean
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dietaryNeeds?: string | null
    activityLevel?: string | null
    weightGoal?: string | null
    user: UserCreateNestedOneWithoutProfilesInput
  }

  export type ProfileUncheckedCreateWithoutMacroHistoryInput = {
    id?: string
    name: string
    isActive?: boolean
    calories: number
    protein: number
    carbs: number
    fat: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dietaryNeeds?: string | null
    activityLevel?: string | null
    weightGoal?: string | null
  }

  export type ProfileCreateOrConnectWithoutMacroHistoryInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutMacroHistoryInput, ProfileUncheckedCreateWithoutMacroHistoryInput>
  }

  export type ProfileUpsertWithoutMacroHistoryInput = {
    update: XOR<ProfileUpdateWithoutMacroHistoryInput, ProfileUncheckedUpdateWithoutMacroHistoryInput>
    create: XOR<ProfileCreateWithoutMacroHistoryInput, ProfileUncheckedCreateWithoutMacroHistoryInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutMacroHistoryInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutMacroHistoryInput, ProfileUncheckedUpdateWithoutMacroHistoryInput>
  }

  export type ProfileUpdateWithoutMacroHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dietaryNeeds?: NullableStringFieldUpdateOperationsInput | string | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    weightGoal?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfilesNestedInput
  }

  export type ProfileUncheckedUpdateWithoutMacroHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dietaryNeeds?: NullableStringFieldUpdateOperationsInput | string | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    weightGoal?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MealCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    instructions?: string | null
    prepTime: number
    cookTime: number
    servings: number
    servingSize: string
    difficulty: string
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
  }

  export type PlanCreateManyUserInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
  }

  export type ProfileCreateManyUserInput = {
    id?: string
    name: string
    isActive?: boolean
    calories: number
    protein: number
    carbs: number
    fat: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dietaryNeeds?: string | null
    activityLevel?: string | null
    weightGoal?: string | null
  }

  export type FavoriteMealCreateManyUserInput = {
    id?: string
    mealId: string
    createdAt?: Date | string
  }

  export type MealUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    planMeals?: PlanMealUpdateManyWithoutMealNestedInput
    ingredients?: MealIngredientUpdateManyWithoutMealNestedInput
    categories?: MealCategoryUpdateManyWithoutMealNestedInput
    tags?: MealTagUpdateManyWithoutMealNestedInput
    favorited?: FavoriteMealUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    planMeals?: PlanMealUncheckedUpdateManyWithoutMealNestedInput
    ingredients?: MealIngredientUncheckedUpdateManyWithoutMealNestedInput
    categories?: MealCategoryUncheckedUpdateManyWithoutMealNestedInput
    tags?: MealTagUncheckedUpdateManyWithoutMealNestedInput
    favorited?: FavoriteMealUncheckedUpdateManyWithoutMealNestedInput
  }

  export type MealUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    servingSize?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlanUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    planMeals?: PlanMealUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    planMeals?: PlanMealUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dietaryNeeds?: NullableStringFieldUpdateOperationsInput | string | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    weightGoal?: NullableStringFieldUpdateOperationsInput | string | null
    macroHistory?: MacroHistoryUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dietaryNeeds?: NullableStringFieldUpdateOperationsInput | string | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    weightGoal?: NullableStringFieldUpdateOperationsInput | string | null
    macroHistory?: MacroHistoryUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dietaryNeeds?: NullableStringFieldUpdateOperationsInput | string | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    weightGoal?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FavoriteMealUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meal?: MealUpdateOneRequiredWithoutFavoritedNestedInput
  }

  export type FavoriteMealUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteMealUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanMealCreateManyMealInput = {
    id?: string
    planId: string
    date: Date | string
    mealTime: string
    servings: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealIngredientCreateManyMealInput = {
    id?: string
    ingredientId: string
    amount: number
    unit: string
    notes?: string | null
  }

  export type MealCategoryCreateManyMealInput = {
    id?: string
    categoryId: string
  }

  export type MealTagCreateManyMealInput = {
    id?: string
    tagId: string
  }

  export type FavoriteMealCreateManyMealInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type PlanMealUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealTime?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: PlanUpdateOneRequiredWithoutPlanMealsNestedInput
  }

  export type PlanMealUncheckedUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealTime?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanMealUncheckedUpdateManyWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealTime?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealIngredientUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    ingredient?: IngredientUpdateOneRequiredWithoutMealsNestedInput
  }

  export type MealIngredientUncheckedUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    ingredientId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MealIngredientUncheckedUpdateManyWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    ingredientId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MealCategoryUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutMealsNestedInput
  }

  export type MealCategoryUncheckedUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type MealCategoryUncheckedUpdateManyWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type MealTagUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutMealsNestedInput
  }

  export type MealTagUncheckedUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type MealTagUncheckedUpdateManyWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type FavoriteMealUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type FavoriteMealUncheckedUpdateWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteMealUncheckedUpdateManyWithoutMealInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealIngredientCreateManyIngredientInput = {
    id?: string
    mealId: string
    amount: number
    unit: string
    notes?: string | null
  }

  export type MealIngredientUpdateWithoutIngredientInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meal?: MealUpdateOneRequiredWithoutIngredientsNestedInput
  }

  export type MealIngredientUncheckedUpdateWithoutIngredientInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MealIngredientUncheckedUpdateManyWithoutIngredientInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MealCategoryCreateManyCategoryInput = {
    id?: string
    mealId: string
  }

  export type MealCategoryUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    meal?: MealUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type MealCategoryUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
  }

  export type MealCategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
  }

  export type MealTagCreateManyTagInput = {
    id?: string
    mealId: string
  }

  export type MealTagUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    meal?: MealUpdateOneRequiredWithoutTagsNestedInput
  }

  export type MealTagUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
  }

  export type MealTagUncheckedUpdateManyWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
  }

  export type PlanMealCreateManyPlanInput = {
    id?: string
    mealId: string
    date: Date | string
    mealTime: string
    servings: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlanMealUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealTime?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meal?: MealUpdateOneRequiredWithoutPlanMealsNestedInput
  }

  export type PlanMealUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealTime?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanMealUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealTime?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MacroHistoryCreateManyProfileInput = {
    id?: string
    date?: Date | string
    calories: number
    protein: number
    carbs: number
    fat: number
    weight?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MacroHistoryUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MacroHistoryUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MacroHistoryUncheckedUpdateManyWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    calories?: IntFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    carbs?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}