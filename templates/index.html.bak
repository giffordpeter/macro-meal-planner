<!DOCTYPE html>
<html>
<head>
    <title>Macro Meal Planner</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
    <style>
        .container { max-width: 800px; }
        .macro-input { margin-bottom: 20px; }
        .meal-slot { background-color: #f8f9fa; padding: 15px; margin-bottom: 10px; border-radius: 5px; }
        .meal-ingredients { margin: 10px 0; padding-left: 20px; }
        .macro-breakdown { font-size: 0.9em; color: #666; }
        .loading { display: none; }
        .calories-section {
            margin: 20px 0;
            padding: 15px;
            background-color: #f5f5f5;
            border-radius: 4px;
        }
        .calories-slider {
            width: 100%;
            margin: 10px 0;
        }
        #pdf-meal-plan {
            display: none;
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
            background: white;
        }
        .meal-card {
            border: 1px solid #ddd;
            margin: 15px 0;
            padding: 20px;
            border-radius: 8px;
            background: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .meal-card h3 {
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 8px;
            margin-bottom: 15px;
        }
        .macro-summary {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .macro-summary h2 {
            color: #2c3e50;
            margin-bottom: 15px;
        }
        .export-section {
            margin: 20px 0;
            text-align: right;
        }
        @media print {
            body * {
                visibility: hidden;
            }
            #pdf-meal-plan, #pdf-meal-plan * {
                visibility: visible;
            }
            #pdf-meal-plan {
                display: block !important;
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
            }
            .meal-card {
                break-inside: avoid;
                page-break-inside: avoid;
            }
        }
    </style>
</head>
<body>
    <div class="container py-4">
        <h1 class="mb-4">Macro Meal Planner</h1>

        <!-- Macro Inputs -->
        <div class="card mb-4">
            <div class="card-header">
                <h2>Set Your Macro Targets</h2>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <label>Protein (g)</label>
                        <input type="number" class="form-control" id="protein" value="180" required>
                    </div>
                    <div class="col-md-4">
                        <label>Fats (g)</label>
                        <input type="number" class="form-control" id="fats" value="65" required>
                    </div>
                    <div class="col-md-4">
                        <label>Carbs (g)</label>
                        <input type="number" class="form-control" id="carbs" value="200" required>
                    </div>
                </div>
            </div>
        </div>

        <!-- Calorie Calculation Section -->
        <div class="calories-section">
            <h2>Total Calories: <span id="total-calories">2105</span></h2>
            <p>Adjust calories by modifying macros proportionally:</p>
            <input type="range" id="calories-slider" class="calories-slider" min="1600" max="3000" value="2105">
            <div>
                <small>Protein: 4 cal/g × <span id="protein-display">180</span>g = <span id="protein-cals">720</span> calories</small><br>
                <small>Fats: 9 cal/g × <span id="fats-display">65</span>g = <span id="fats-cals">585</span> calories</small><br>
                <small>Carbs: 4 cal/g × <span id="carbs-display">200</span>g = <span id="carbs-cals">800</span> calories</small>
            </div>
        </div>

        <!-- Meal Schedule Section -->
        <div class="card mb-4">
            <div class="card-header">
                <h2>Meal Schedule</h2>
            </div>
            <div class="card-body">
                <div id="mealSchedule">
                    <div class="meal-time">
                        <input type="text" class="form-control mb-2" value="Breakfast" readonly>
                        <input type="time" class="form-control" value="07:30">
                    </div>
                    <div class="meal-time">
                        <input type="text" class="form-control mb-2" value="Snack 1" readonly>
                        <input type="time" class="form-control" value="10:30">
                    </div>
                    <div class="meal-time">
                        <input type="text" class="form-control mb-2" value="Lunch" readonly>
                        <input type="time" class="form-control" value="13:00">
                    </div>
                    <div class="meal-time">
                        <input type="text" class="form-control mb-2" value="Snack 2" readonly>
                        <input type="time" class="form-control" value="16:00">
                    </div>
                    <div class="meal-time">
                        <input type="text" class="form-control mb-2" value="Dinner" readonly>
                        <input type="time" class="form-control" value="19:00">
                    </div>
                </div>
                <small class="text-muted mt-2 d-block">* You can adjust the times to match your schedule</small>
            </div>
        </div>

        <button onclick="generatePlan()" class="btn btn-primary">Generate Meal Plan</button>
        
        <div class="export-section">
            <button onclick="exportToPDF()" id="export-pdf" class="btn btn-secondary" style="display: none;">Export to PDF</button>
            <button onclick="printMealPlan()" id="print-plan" class="btn btn-secondary" style="display: none;">Print Plan</button>
        </div>

        <!-- Results Section -->
        <div id="meal-plan-output" class="mt-4"></div>

        <!-- PDF/Print Formatted Version -->
        <div id="pdf-meal-plan">
            <h1 class="text-center mb-4">Your Daily Meal Plan</h1>
            <div class="macro-summary"></div>
            <div class="meals-container"></div>
        </div>
    </div>

    <script>
        // Update calorie calculations
        function updateCalories() {
            const protein = parseInt(document.getElementById('protein').value) || 0;
            const fats = parseInt(document.getElementById('fats').value) || 0;
            const carbs = parseInt(document.getElementById('carbs').value) || 0;

            const proteinCals = protein * 4;
            const fatsCals = fats * 9;
            const carbsCals = carbs * 4;
            const totalCals = proteinCals + fatsCals + carbsCals;

            document.getElementById('protein-display').textContent = protein;
            document.getElementById('fats-display').textContent = fats;
            document.getElementById('carbs-display').textContent = carbs;
            document.getElementById('protein-cals').textContent = proteinCals;
            document.getElementById('fats-cals').textContent = fatsCals;
            document.getElementById('carbs-cals').textContent = carbsCals;
            document.getElementById('total-calories').textContent = totalCals;
            document.getElementById('calories-slider').value = totalCals;

            // Store the current macro ratios
            window.currentMacroRatios = {
                protein: proteinCals / totalCals,
                fats: fatsCals / totalCals,
                carbs: carbsCals / totalCals
            };
        }

        // Update all macros based on calorie slider while maintaining ratios
        function updateMacrosFromCalories() {
            const targetCalories = parseInt(document.getElementById('calories-slider').value);
            const ratios = window.currentMacroRatios;

            if (!ratios) return; // Skip if ratios haven't been calculated yet

            // Calculate new macro values maintaining the same ratios
            const newProteinCals = targetCalories * ratios.protein;
            const newFatsCals = targetCalories * ratios.fats;
            const newCarbsCals = targetCalories * ratios.carbs;

            // Convert calories back to grams
            const newProtein = Math.round(newProteinCals / 4);
            const newFats = Math.round(newFatsCals / 9);
            const newCarbs = Math.round(newCarbsCals / 4);

            // Update the input fields
            document.getElementById('protein').value = newProtein;
            document.getElementById('fats').value = newFats;
            document.getElementById('carbs').value = newCarbs;

            // Update the display
            updateCalories();
        }

        // Add event listeners
        document.getElementById('protein').addEventListener('input', updateCalories);
        document.getElementById('fats').addEventListener('input', updateCalories);
        document.getElementById('carbs').addEventListener('input', updateCalories);
        document.getElementById('calories-slider').addEventListener('input', updateMacrosFromCalories);

        async function generatePlan() {
            const mealSlots = document.querySelectorAll('.meal-time');
            const schedule = Array.from(mealSlots).map(slot => ({
                name: slot.querySelector('input[type="text"]').value,
                time: slot.querySelector('input[type="time"]').value
            }));

            // Get macro values
            const macros = {
                protein: parseInt(document.getElementById('protein').value),
                carbs: parseInt(document.getElementById('carbs').value),
                fats: parseInt(document.getElementById('fats').value)
            };

            try {
                // First, set macro targets
                const macroResponse = await fetch('/macro-targets', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(macros)
                });

                if (!macroResponse.ok) {
                    throw new Error('Failed to set macro targets');
                }

                // Then generate meal plan
                const response = await fetch('/generate-meal-plan', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ schedule: schedule })
                });

                const result = await response.json();
                if (result.error) {
                    throw new Error(result.error);
                }

                formatMealPlan(result);
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('meal-plan-output').innerHTML = `
                    <div class="alert alert-danger mt-3">
                        ${error.message || 'Error generating meal plan'}
                    </div>
                `;
            }
        }

        function formatMealPlan(data) {
            // Format for display
            const mealPlanHtml = data.plan.meals.map(meal => `
                <div class="card mb-3">
                    <div class="card-header">
                        <h3 class="mb-0">${meal.name} - ${meal.time}</h3>
                    </div>
                    <div class="card-body">
                        <div class="macro-breakdown mb-3">
                            <strong>Macros:</strong> 
                            Protein: ${meal.macros.protein}g | 
                            Carbs: ${meal.macros.carbs}g | 
                            Fats: ${meal.macros.fats}g
                        </div>
                        <h5>Ingredients:</h5>
                        <ul class="meal-ingredients">
                            ${meal.ingredients.map(ing => `<li>${ing}</li>`).join('')}
                        </ul>
                        <h5>Instructions:</h5>
                        <p>${meal.instructions}</p>
                    </div>
                </div>
            `).join('');

            document.getElementById('meal-plan-output').innerHTML = mealPlanHtml;

            // Format for PDF/Print
            const pdfPlan = document.getElementById('pdf-meal-plan');
            const macroSummary = pdfPlan.querySelector('.macro-summary');
            const mealsContainer = pdfPlan.querySelector('.meals-container');

            // Add macro summary
            const totalMacros = {
                protein: parseInt(document.getElementById('protein').value),
                carbs: parseInt(document.getElementById('carbs').value),
                fats: parseInt(document.getElementById('fats').value)
            };
            const totalCals = totalMacros.protein * 4 + totalMacros.carbs * 4 + totalMacros.fats * 9;

            macroSummary.innerHTML = `
                <h2>Daily Targets</h2>
                <div class="row">
                    <div class="col-md-3">
                        <strong>Calories:</strong> ${totalCals} kcal
                    </div>
                    <div class="col-md-3">
                        <strong>Protein:</strong> ${totalMacros.protein}g
                    </div>
                    <div class="col-md-3">
                        <strong>Carbs:</strong> ${totalMacros.carbs}g
                    </div>
                    <div class="col-md-3">
                        <strong>Fats:</strong> ${totalMacros.fats}g
                    </div>
                </div>
            `;

            // Add meals
            mealsContainer.innerHTML = data.plan.meals.map(meal => `
                <div class="meal-card">
                    <h3>${meal.name} - ${meal.time}</h3>
                    <div class="macro-breakdown mb-3">
                        <strong>Macros:</strong> 
                        Protein: ${meal.macros.protein}g | 
                        Carbs: ${meal.macros.carbs}g | 
                        Fats: ${meal.macros.fats}g
                    </div>
                    <div class="ingredients">
                        <h5>Ingredients:</h5>
                        <ul>
                            ${meal.ingredients.map(ing => `<li>${ing}</li>`).join('')}
                        </ul>
                    </div>
                    <div class="instructions">
                        <h5>Instructions:</h5>
                        <p>${meal.instructions}</p>
                    </div>
                </div>
            `).join('');

            // Show export buttons
            document.getElementById('export-pdf').style.display = 'inline-block';
            document.getElementById('print-plan').style.display = 'inline-block';
        }

        function exportToPDF() {
            const element = document.getElementById('pdf-meal-plan');
            const opt = {
                margin: 1,
                filename: 'meal-plan.pdf',
                image: { type: 'jpeg', quality: 0.98 },
                html2canvas: { scale: 2 },
                jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
            };

            // Make the element visible temporarily
            element.style.display = 'block';
            
            html2pdf().set(opt).from(element).save().then(() => {
                // Hide the element again
                element.style.display = 'none';
            });
        }

        function printMealPlan() {
            window.print();
        }

        // Initialize calorie display
        updateCalories();
    </script>
</body>
</html>
